import config from '@config/index'

let productName = config.productName;
if (isMain()) {
  productName = "";
} else {
  productName += "/";
}
let routerArr = [];
let routers = require.context(`@`, true, /\.vue$/).keys();
routers.forEach(item => {
  const paths = item.match(/[a-zA-Z]+/g)  //paths中存储了一个目录，二级目录，文件名
  let index = "views".length + 2;
  let vuePath;

  if (isMain()) {
    if (paths[0] != "views") {
      return false;
    }
    vuePath = item.slice(index, item.length - 4);
  } else {
    if (paths[1] != "views") {
      return false;
    }
    vuePath = item.slice(paths[0].length + 1 + index, item.length - 4);
  }
  // const component = require(`@/${item.slice(2)}`);
  const routerChild = {  //定义路由对象
    path: vuePath || "",
    // name: component.default.name,   
    component (resolve) {
      require([`@/${item.slice(2)}`], resolve)
    },
    meta: {
      // title:component.default.title,
      // breadNumber: paths.length-2
      breadNumber: 1
    }
  }

  if (/.vue$/.test(item)) {  //判断是否以vue结尾
    routerArr.push(routerChild);
  }

});
let customRouters = require.context(`@`, true, /\.js$/).keys();
customRouters.forEach(item => {
  let index = "router".length + 2;
  const paths = item.match(/[a-zA-Z]+/g)
  let path = item.slice(1);
  if (isBase() || isMain()) {
    if (paths[0] != "router") {
      return false;
    }
    path = item.slice(index);
    if (path == "/index.js") {
      return false;
    }
  } else {
    if (paths[1] != "router") {
      return false;
    }
    path = item.slice(paths[0].length + 1 + index);
  }
  if (path == "/top.js") {
    const router = require(`@/${item.slice(2)}`);
    router.default.forEach(r => {
      routerArr.push(r);
    });
  }
});
/* if(!isBase()&&isMain()){
  let main = require(`@/${productName}router/main`);
  let mainRouter = main.default;

  mainRouter.children = mainRouter.children.concat(mainChildren);
  let routes = store.getters.routes;
  if(routes){
    let routesArr = [];
    for(let r of routes){
      let router = {
          path: r.path||"",
          component: () => import('mftcc-plt-npm/components/mftccIframe'),
          meta: {
            title:r.meta.title,
            iframeUrl: r.meta.iframeUrl,
            breadNumber: r.meta.breadNumber
          }
      };
      routesArr.push(router);
    }
    mainRouter.children = mainRouter.children.concat(routesArr);
  } 

  routerArr.push(mainRouter);
}*/

function isBase () {
  const productName = config.productName;
  if (productName == "mftcc-layout-web") {
    return true;
  }
  return false;
}

function isMain () {
  const productName = config.productName;
  if (isBase() || productName == "mftcc-sys-web"
    || productName == "mftcc-mq-web"
    || productName == "mftcc-flowable-web") {
    return true;
  }
  return false;
}
export default routerArr;