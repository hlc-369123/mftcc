{"version":3,"sources":["D:/_work/mftcc-platform/mftcc-base-npm/src/components/table/customFilter/src/components/table/customFilter/filterItem.vue","filterItem.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/table/customFilter/src/components/table/customFilter/index.vue","index.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/form/src/components/form/switch.vue","switch.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/bus/dialog/src/components/bus/dialog/mftccRuleTable.vue","mftccRuleTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/contextmenu.vue","contextmenu.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/dialog/src/components/dialog/mftccDialogCheckbox.vue","mftccDialogCheckbox.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/dialog/src/components/dialog/mftccDialogRadio.vue","mftccDialogRadio.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/dialog/src/components/dialog/mftccDialogTable.vue","mftccDialogTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/dialog/src/components/dialog/mftccDialogTree.vue","mftccDialogTree.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/form/src/components/form/group.vue","group.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/form/plugins/src/components/form/plugins/mftccForm.vue","mftccForm.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/form/src/components/form/upload.vue","upload.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/layout/src/components/layout/collapse.vue","collapse.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/layout/src/components/layout/container.vue","container.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccForm.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccDialogForm.vue","mftccDialogForm.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccTable.vue","mftccTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccDialogTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccEditTable.vue","mftccEditTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccIframe.vue","mftccIframe.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/src/components/mftccSearch.vue","mftccSearch.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/components/table/plugins/src/components/table/plugins/mftccTable.vue","D:/_work/mftcc-platform/mftcc-base-npm/src/style/transition.css","transition.css","D:/_work/mftcc-platform/mftcc-base-npm/src/icon/iconfont.css","iconfont.css"],"names":[],"mappings":"AAiMA,mBACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,kBCKA,CDHA,8BACA,WAAA,CACA,YCKA,CDHA,gCACA,WAAA,CACA,YCKA,CDHA,2BACA,WAAA,CACA,iBCKA,CDHA,oCACA,iBCKA,CDHA,mCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,iBCSA,CDPA,kFACA,gBCSA,CDPA,8BACA,UAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,iBCSA,CDPA,oCACA,kBCSA,CCqJA,cAGA,kBAAA,CACA,kBAAA,CAAA,cCMA,CDJA,wCALA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBCiBA,CDbA,0BAGA,aCUA,CDRA,kCACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,wBAAA,CACA,yBAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,6BAAA,CAAA,qBAAA,CACA,cCiBA,CDfA,4CACA,kBAAA,CACA,UAAA,CACA,iBCiBA,CDfA,uCACA,WAAA,CACA,aAAA,CACA,cAAA,CACA,yBAAA,CACA,eCiBA,CDfA,8CACA,wBCiBA,CDfA,cACA,WAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,kBCuBA,CDrBA,eACA,iBCuBA,CDrBA,uBACA,mBCuBA,CDrBA,mCACA,YAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBC6BA,CD3BA,4CACA,SC6BA,CD3BA,iEACA,WAAA,CACA,gBC6BA,CD3BA,aACA,aAAA,CACA,aAAA,CACA,gBC6BA,CC/XA,kBACA,YAAA,CACA,oBCCA,CDEA,oCACA,SCCA,CDEA,yCACA,iBAAA,CACA,gBCCA,CDEA,mCACA,SCCA,CDEA,wCACA,gBAAA,CACA,iBCCA,CDEA,uCACA,aCCA,CDEA,sCACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QCCA,CDCA,mEAEA,oBAAA,CACA,QCCA,CCqGA,kCACA,kCCCA,CCtMA,8BACA,iBCCA,CCgNA,kCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBCMA,CDHA,wCACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,aCQA,CDNA,0CACA,UCSA,CDPA,oCACA,sBAAA,CACA,oBCUA,CDRA,wDACA,mBAAA,CACA,oBAAA,CACA,oBAAA,CACA,eAAA,CACA,gBAAA,CACA,uBCWA,CCxCA,+BACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBCMA,CDHA,qCACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,aCQA,CDNA,oCACA,UCSA,CDPA,8BACA,sBAAA,CACA,oBCUA,CDRA,+CACA,mBAAA,CACA,oBAAA,CACA,oBAAA,CACA,eAAA,CACA,gBAAA,CACA,uBCWA,CClHA,uCACA,cCCA,CDeA,0CAGA,uBCeA,CC0BA,qBACA,WAAA,CACA,aCCA,CDCA,uBACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBCMA,CDJA,6BACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,aCQA,CCpJA,8BACA,iBAAA,CACA,OAAA,CACA,KAAA,CACA,WAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBCQA,CDNA,gCACA,YCQA,CCkiDA,YACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,kBAAA,CAAA,cAAA,CACA,iCAAA,CAAA,yBAAA,CACA,QAAA,CACA,iBCKA,CDkBA,wFAGA,kBAAA,CACA,SCMA,CDFA,4SAQA,YCIA,CDFA,4TAKA,aCIA,CDFA,4TAKA,aCIA,CDFA,uTAKA,aCIA,CCloDA,aACA,kBAAA,CACA,eAAA,CACA,kCAAA,CACA,uBAAA,CACA,eCCA,CDCA,8BACA,cCCA,CCqXA,kCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBCMA,CDJA,0DACA,kBAAA,CAAA,mBAAA,CAAA,WCQA,CDDA,kBACA,iBCQA,CDNA,YACA,kBAAA,CACA,eAAA,CACA,sBCQA,CDNA,cACA,iBAAA,CACA,aCQA,CDNA,wEAIA,gBCQA,CDNA,aACA,WAAA,CACA,aCQA,CDNA,+BAEA,cCQA,CDNA,6DAEA,cCQA,CDLA,yCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBCWA,CCnYA,cACA,sBAAA,CACA,0BAAA,CACA,0BCCA,CDCA,uBACA,YAAA,CACA,yPCWG,CDCH,yBCCA,CCqgCA,+BAEA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,kBAAA,CAAA,cPIA,COFA,6EAEA,UPIA,COFA,2DAEA,iBAAA,CACA,kBPIA,COFA,+FAEA,SPIA,COEA,8GAEA,UPIA,CQjoCA,wBACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBCMA,CDJA,8BACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,aAAA,CACA,gBCQA,CC+pBA,yBACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,SCCA,CDCA,2DAEA,qCAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,SCCA,CCtmBA,qCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBlBKA,CkBHA,oCACA,WAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBAAA,CACA,kBAAA,CAAA,mBAAA,CAAA,WlBYA,CkBTA,6DACA,WlBWA,CkBTA,0CACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YlBeA,CkBbA,+BACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBlBoBA,CkBlBA,qCACA,kBAAA,CAAA,mBAAA,CAAA,WAAA,CACA,WlBsBA,CmBsjDA,uDACA,cCCA,CDCA,wDACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,SCCA,CDCA,kDACA,cCCA,CDCA,8DACA,gBAAA,CACA,iBCCA,CDCA,mDACA,gCCCA,CCxlDA,4BACA,UAAA,CACA,WCCA,CDCA,+BACA,UAAA,CACA,uBCCA,CC8fA,0CACA,UAAA,CAEA,WAAA,CACA,cCCA,CDCA,yDACA,WAAA,CACA,UCCA,CDCA,+DACA,wBAAA,CACA,eAAA,CACA,WCCA,CDCA,iDACA,aAAA,CACA,oBAAA,CACA,iBAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,eCCA,CDEA,yCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,cCEA,CDAA,6DACA,cAAA,CACA,aAAA,CACA,gBAAA,CACA,eCEA,CDAA,+DACA,cCEA,CDAA,kEACA,iBAAA,CACA,QCEA,CDCA,kDACA,WAAA,CACA,eCCA,CDEA,iDACA,WAAA,CACA,gBAAA,CACA,WAAA,CACA,cAAA,CACA,aCAA,CDEA,uDACA,eCAA,CDGA,2DACA,aAAA,CACA,cAAA,CACA,wBAAA,CACA,yCCDA,CDIA,sCACA,WAAA,CACA,UCFA,CDKA,wEACA,aAAA,CACA,WCHA,CDKA,oCACA,kBAAA,CACA,6BAAA,CAAA,qBCFA,CDIA,oCACA,gBAAA,CACA,kBCFA,CDIA,+CACA,iBCFA,CDIA,yCACA,iBAAA,CACA,kBCFA,CDIA,gFAEA,UCFA,CDIA,6GAEA,uBAAA,CACA,eAAA,CACA,WCFA,CDKA,oFACA,qBCHA,CDKA,sTASA,gBCHA,CDKA,+CACA,SAAA,CACA,WCHA,CDKA,4CACA,cCHA,CDKA,4CACA,UAAA,CACA,QCHA,CDKA,qDACA,WAAA,CACA,kBAAA,CACA,qBAAA,CACA,eCHA,CDKA,kDACA,gBCHA,CDKA,uFACA,wBAAA,CACA,oBCHA,CDKA,+BACA,iBCHA,CDKA,mCAEA,eAAA,CAGA,mBCHA,CDKA,+CACA,cCHA,CDKA,iDACA,iBAAA,CACA,iBAAA,CACA,aAAA,CACA,kBAAA,CACA,wBAAA,CACA,eAAA,CACA,UCHA,CDKA,8CACA,iBCHA,CDKA,0DACA,kBAAA,CACA,oBCHA,CDKA,yDACA,eAAA,CACA,oBAAA,CACA,UCHA,CDKA,sFACA,kBAAA,CACA,WAAA,CACA,gBAAA,CACA,kBAAA,CACA,gBAAA,CACA,wBCHA,CDKA,wEACA,WCHA,CDKA,8DACA,oBAAA,CACA,iBAAA,CACA,QAAA,CACA,kBCHA,CDKA,0DACA,WCHA,CDKA,+FAIA,kBAAA,CACA,UCHA,CDKA,6CACA,wBAAA,CACA,kBCHA,CDKA,8CACA,WCHA,CDKA,qCACA,iDACA,UCHE,CACF,CCikEA,iCACA,cRCA,CQEA,4BACA,cRCA,CQEA,gEAEA,gCRCA,CQEA,mCACA,gBRCA,CQEA,oCACA,QRCA,CQEA,gCACA,aAAA,CACA,iBAAA,CACA,kBAAA,CACA,kBAAA,CACA,gBAAA,CACA,sBRCA,CQEA,yBACA,0BAAA,CACA,0BAAA,CACA,mBAAA,CACA,2BAAA,CACA,4BAAA,CACA,yBAAA,CACA,qBAAA,CACA,wBAAA,CACA,qBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,qBAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CACA,QAAA,CACA,WRCA,CQEA,SACA,aRCA,CQCA,2CACA,aREA,CQAA,2CACA,aRGA,CQDA,0CACA,aRIA,CQFA,WACA,gtFRKA,CS3gGA,sCAEE,+BAAA,CAAA,uBCEF,CDCA,+BAEE,SCCF,CDGA,0DAEE,2BAAA,CAAA,mBCCF,CDEA,sBACE,SAAA,CACA,mCAAA,CAAA,2BCCF,CDEA,yBACE,SAAA,CACA,kCAAA,CAAA,0BCCF,CDGA,kDAEE,0BAAA,CAAA,kBCCF,CDEA,2CAEE,SAAA,CACA,kCAAA,CAAA,0BCCF,CDEA,iBACE,0BAAA,CAAA,kBCCF,CDEA,yBACE,iBCAF,CC7CA,WACE,wBAAA,CACA,62JCGF,CDEA,cACE,kCAAA,CACA,cAAA,CACA,iBAAA,CACA,kCAAA,CACA,iCCCF,CDEA,6BACE,eCCF","file":"app.css","sourcesContent":["<template>\r\n  <div class=\"mftcc-filter-item\">\r\n    <span v-if=\"index == 0\" class=\"xuanze\">请选择:</span>\r\n    <el-radio-group v-else v-model=\"filterData.andor\" size=\"mini\">\r\n      <el-radio-button label=\"and\">并且</el-radio-button>\r\n      <el-radio-button label=\"or\">或者</el-radio-button>\r\n    </el-radio-group>\r\n    <el-select\r\n      v-model=\"filterData.fieldName\"\r\n      @change=\"colSelected\"\r\n      placeholder=\"请选择字段\"\r\n      :disabled=\"disabled\"\r\n    >\r\n      <template v-for=\"col in columns\">\r\n        <el-option\r\n          v-if=\"col.prop != ''\"\r\n          :key=\"col.prop\"\r\n          :label=\"col.label\"\r\n          :value=\"col.prop\"\r\n        >\r\n        </el-option>\r\n      </template>\r\n    </el-select>\r\n    <el-select v-if=\"props.fieldType != 'switch'\"  v-model=\"filterData.conditions\" :disabled=\"disabled\" placeholder=\"请选择\">\r\n      <el-option\r\n        v-for=\"cond in getConditions()\"\r\n        :key=\"cond.value\"\r\n        :label=\"cond.label\"\r\n        :value=\"cond.value\"\r\n      >\r\n      </el-option>\r\n    </el-select>\r\n    <component\r\n      class=\"resultInput\"\r\n      :is=\"$Component[props.fieldType || 'text']\"\r\n      v-model=\"filterData.value\"\r\n      :props=\"props\"\r\n      :pramDicItem=\"pramDicItem\"\r\n    >\r\n    </component>\r\n    <i\r\n      v-if=\"!disabled\"\r\n      class=\"el-icon-circle-close filterDel\"\r\n      @click=\"$emit('delFilterItem', index)\"\r\n    ></i>\r\n  </div>\r\n</template>\r\n<script>\r\nimport formUtil from \"../../../utils/formUtil\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      isEmpty: formUtil.isEmpty,\r\n      props: {},\r\n      filterData: {\r\n        andor: \"and\",\r\n        conditions: \"\",\r\n        value: \"\",\r\n        fieldName: \"\",\r\n      },\r\n      stringConditions: [\r\n        { label: \"是\", value: \"eq\" },\r\n        { label: \"不是\", value: \"ne\" },\r\n        { label: \"包括\", value: \"like\" },\r\n        { label: \"不包括\", value: \"notLike\" },\r\n      ],\r\n      numberConditions: [\r\n        { label: \"大于\", value: \"gt\" },\r\n        { label: \"等于\", value: \"eq\" },\r\n        { label: \"小于\", value: \"lt\" },\r\n        { label: \"不等于\", value: \"ne\" },\r\n        { label: \"大于等于\", value: \"ge\" },\r\n        { label: \"小于等于\", value: \"le\" },\r\n      ],\r\n      selectConditions: [\r\n        { label: \"是\", value: \"eq\" },\r\n        { label: \"不是\", value: \"ne\" },\r\n      ],\r\n      multipleSelectionConditions: [\r\n        { label: \"是\", value: \"eqMultiple\" },\r\n        { label: \"不是\", value: \"neMultiple\" },\r\n        { label: \"包含\", value: \"in\" },\r\n        { label: \"不包含\", value: \"notIn\" },\r\n      ],\r\n      dateConditions: [\r\n        { label: \"大于\", value: \"gt\" },\r\n        { label: \"等于\", value: \"eq\" },\r\n        { label: \"小于\", value: \"lt\" },\r\n        { label: \"不等于\", value: \"ne\" },\r\n        { label: \"大于等于\", value: \"ge\" },\r\n        { label: \"小于等于\", value: \"le\" },\r\n      ],\r\n      dateGroupConditions:[\r\n        { label: \"包含\", value: \"between\" },\r\n      ]\r\n    };\r\n  },\r\n  props: {\r\n    designer: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      },\r\n    },\r\n    event: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n    pramDicItem: {\r\n      type: Array,\r\n      default() {\r\n        return null;\r\n      },\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n    filter: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n    index: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  watch: {\r\n    filterData(val) {\r\n      this.$emit(\"setFilter\", val, this.index);\r\n    },\r\n    filter: {\r\n      handler(val, oldVal) {\r\n        this.filterData = Object.assign({}, this.filterData, val);\r\n      },\r\n      immediate: true,\r\n    },\r\n    \"filter.fieldName\": {\r\n      handler(val, oldVal) {\r\n        if (val) {\r\n          this.colSelected(val);\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  created() {},\r\n  methods: {\r\n    colSelected(value) {\r\n      for (let item of this.columns) {\r\n        if (item.prop == value) {\r\n          item.changeDicKey = true;\r\n          item.disabled = this.disabled;\r\n          this.props = item;\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    getConditions(item) {\r\n      if (this.props.fieldType == \"text\" && this.props.dataType == \"\") {\r\n        //普通文本\r\n        return this.stringConditions;\r\n      } else if (this.props.fieldType == \"text\" && this.props.dataType != \"\") {\r\n        //数字\r\n        return this.numberConditions;\r\n      } else if (this.props.fieldType == \"select\") {\r\n        //下拉单选\r\n        return this.selectConditions;\r\n      } else if (this.props.fieldType == \"multipleSelection\") {\r\n        //下拉多选\r\n        return this.multipleSelectionConditions;\r\n      } else if (this.props.fieldType == \"date\" || this.props.fieldType == \"datetime\") {\r\n        //日期框\r\n        return this.dateConditions;\r\n      } else if (this.props.fieldType == \"dateGroup\" || this.props.fieldType == \"datetimeGroup\") {\r\n        //日期组框\r\n        return this.dateGroupConditions;\r\n      } else {\r\n        return [];\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mftcc-filter-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n.mftcc-filter-item > .el-select {\r\n  width: 180px;\r\n  margin: 0 6px;\r\n}\r\n.mftcc-filter-item > .resultInput {\r\n  width: 320px;\r\n  margin: 0 6px;\r\n}\r\n.mftcc-filter-item > .xuanze {\r\n  width: 136px;\r\n  text-align: center;\r\n}\r\n.mftcc-filter-item .el-input__inner {\r\n  border-radius: 2px;\r\n}\r\n.mftcc-filter-item > .el-radio-group {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-right: 26px;\r\n}\r\n.mftcc-filter-item > .el-radio-group .el-radio-button--mini .el-radio-button__inner {\r\n  padding: 12px 7px;\r\n}\r\n.mftcc-filter-item .filterDel {\r\n  color: #999999;\r\n  cursor: pointer;\r\n  visibility: hidden;\r\n  margin-left: 5px;\r\n  margin-right: 12px;\r\n}\r\n.mftcc-filter-item:hover .filterDel {\r\n  visibility: visible;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-filter-item {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n.mftcc-filter-item > .el-select {\r\n  width: 180px;\r\n  margin: 0 6px;\r\n}\r\n.mftcc-filter-item > .resultInput {\r\n  width: 320px;\r\n  margin: 0 6px;\r\n}\r\n.mftcc-filter-item > .xuanze {\r\n  width: 136px;\r\n  text-align: center;\r\n}\r\n.mftcc-filter-item .el-input__inner {\r\n  border-radius: 2px;\r\n}\r\n.mftcc-filter-item > .el-radio-group {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n  margin-right: 26px;\r\n}\r\n.mftcc-filter-item > .el-radio-group .el-radio-button--mini .el-radio-button__inner {\r\n  padding: 12px 7px;\r\n}\r\n.mftcc-filter-item .filterDel {\r\n  color: #999999;\r\n  cursor: pointer;\r\n  visibility: hidden;\r\n  margin-left: 5px;\r\n  margin-right: 12px;\r\n}\r\n.mftcc-filter-item:hover .filterDel {\r\n  visibility: visible;\r\n}\r\n","<template>\r\n  <div style=\"margin: 0px 12px; background: #ffffff; padding: 8px 12px\">\r\n    <div class=\"filterHeader\">\r\n      <span>已保存的定义筛选：</span>\r\n      <template v-for=\"(item, index) in originalFilterData\">\r\n        <div :key=\"item.id\" class=\"filterItem original\">\r\n          <div class=\"filterItemSelected\">\r\n            <i class=\"el-icon-check\"></i>\r\n          </div>\r\n          <el-button\r\n            :class=\"{\r\n              filterItemBtn: true,\r\n              active: filterType == 'original' && filterIndex == index\r\n            }\"\r\n            type=\"primary\"\r\n            @click=\"filterSelected(item, index, 'original')\"\r\n            >{{ item.label }}</el-button\r\n          >\r\n        </div>\r\n      </template>\r\n      <template v-for=\"(item, index) in customFilterData\">\r\n        <div :key=\"item.id\" class=\"filterItem\" v-if=\"item.label != ''\">\r\n          <div\r\n            :class=\"{ filterItemSelected: true, selected: item.selected }\"\r\n            @click=\"changeSelected(index)\"\r\n          >\r\n            <i v-show=\"item.selected\" class=\"el-icon-check\"></i>\r\n          </div>\r\n          <el-button\r\n            :class=\"{\r\n              filterItemBtn: true,\r\n              active: filterType == 'custom' && filterIndex == index\r\n            }\"\r\n            type=\"primary\"\r\n            @click=\"filterSelected(item, index, 'custom')\"\r\n            >{{ item.label }}</el-button\r\n          >\r\n        </div>\r\n      </template>\r\n      <!-- <el-popover\r\n        placement=\"bottom\"\r\n        width=\"300\"\r\n        v-model=\"showPopover\"\r\n        trigger=\"click\"\r\n        @show=\"popoverFormShow\"\r\n      >\r\n        <el-form\r\n          :model=\"popoverForm\"\r\n          :rules=\"rules\"\r\n          ref=\"popoverForm\"\r\n          label-width=\"80px\"\r\n          size=\"mini\"\r\n        >\r\n          <el-form-item label=\"筛选名称\" prop=\"name\">\r\n            <el-input v-model=\"popoverForm.name\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div style=\"text-align: right; margin: 0\">\r\n          <el-button size=\"mini\" type=\"text\" @click=\"showPopover = false\">取消</el-button>\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"addFilter\">确定</el-button>\r\n        </div>\r\n        <el-button\r\n          slot=\"reference\"\r\n          type=\"text\"\r\n          icon=\"el-icon-plus\"\r\n          style=\"margin-left: 16px\"\r\n          >新增筛选条件</el-button\r\n        >\r\n      </el-popover> -->\r\n      <el-button\r\n        type=\"text\"\r\n        icon=\"el-icon-plus\"\r\n        style=\"margin-left: 16px\"\r\n        @click=\"addNewFilter\"\r\n        >新增筛选条件</el-button\r\n      >\r\n      <span class=\"lengthError\" v-if=\"showLengthError\"\r\n        >只能展示5个常用条件！</span\r\n      >\r\n    </div>\r\n    <div\r\n      class=\"filterContent\"\r\n      v-if=\"filterType == 'custom' && customFilterData.length > 0\"\r\n    >\r\n      <template v-for=\"(item, index) in customFilterData[filterIndex].filter\">\r\n        <el-row :gutter=\"20\" :key=\"index\" v-if=\"index % 2 == 0\">\r\n          <el-col :span=\"11\"\r\n            ><filter-item\r\n              :index=\"index\"\r\n              :columns=\"columns\"\r\n              :filter=\"item\"\r\n              @setFilter=\"setFilter\"\r\n              @delFilterItem=\"delFilterItem\"\r\n              :pramDicItem=\"pramDicItem\"\r\n            ></filter-item>\r\n          </el-col>\r\n          <el-col :span=\"13\"\r\n            ><filter-item\r\n              :index=\"index + 1\"\r\n              v-if=\"customFilterData[filterIndex].filter[index + 1]\"\r\n              :columns=\"columns\"\r\n              :filter=\"customFilterData[filterIndex].filter[index + 1]\"\r\n              @setFilter=\"setFilter\"\r\n              @delFilterItem=\"delFilterItem\"\r\n              :pramDicItem=\"pramDicItem\"\r\n            ></filter-item\r\n          ></el-col>\r\n        </el-row>\r\n      </template>\r\n      <el-button\r\n        type=\"text\"\r\n        icon=\"el-icon-plus\"\r\n        style=\"margin-left: 16px\"\r\n        @click=\"addFilterContent\"\r\n        >新增</el-button\r\n      >\r\n    </div>\r\n    <div v-else-if=\"filterType == 'original' && originalFilterData.length > 0\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"11\"\r\n          ><filter-item\r\n            :columns=\"columns\"\r\n            :filter=\"originalFilterData[filterIndex]\"\r\n            :pramDicItem=\"pramDicItem\"\r\n            :disabled=\"true\"\r\n          ></filter-item\r\n        ></el-col>\r\n      </el-row>\r\n    </div>\r\n    <div class=\"filterFooter\">\r\n      <el-button type=\"primary\" @click=\"searchFilter\">搜索</el-button>\r\n      <el-button type=\"primary\" @click=\"saveFilterData\">保存</el-button>\r\n      <el-button @click=\"deleteFilterData\">删除</el-button>\r\n      <el-button @click=\"resetFilterData\">重置</el-button>\r\n    </div>\r\n    <el-dialog\r\n      append-to-body\r\n      custom-class=\"filterNameDialog\"\r\n      title=\"定义检索名称\"\r\n      :visible.sync=\"showFilterNameDialog\"\r\n    >\r\n      <el-form\r\n        :model=\"filterNameForm\"\r\n        :rules=\"rules\"\r\n        ref=\"filterNameForm\"\r\n        label-width=\"80px\"\r\n      >\r\n        <el-form-item label=\"筛选名称\" prop=\"name\">\r\n          <el-input\r\n            v-model=\"filterNameForm.name\"\r\n            maxlength=\"6\"\r\n            :show-word-limit=\"true\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"showFilterNameDialog = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveFilterData('new')\"\r\n          >确 定</el-button\r\n        >\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport filterItem from \"./filterItem\";\r\nimport api from \"../../../api/sysCustomFilter\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      originalFilterData: [],\r\n      filterNameForm: {\r\n        name: \"\"\r\n      },\r\n      rules: {\r\n        name: [{ required: true, message: \"请输入筛选名称\", trigger: \"blur\" }]\r\n      },\r\n      resultData: {},\r\n      filterIndex: -1,\r\n      filterType: null,\r\n      refreshFilterContent: true,\r\n      showFilterNameDialog: false,\r\n      showLengthError: false\r\n    };\r\n  },\r\n  components: {\r\n    filterItem\r\n  },\r\n  props: {\r\n    queryTabs: {\r\n      type: Array,\r\n      default: []\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default: []\r\n    },\r\n    pramDicItem: {\r\n      type: Object,\r\n      default: {}\r\n    },\r\n    customFilterData: {\r\n      type: Array,\r\n      default: []\r\n    }\r\n  },\r\n  created() {\r\n    // this.customFilterData = JSON.parse(\r\n    //   '[{\"id\":\"custom_1621405012760\",\"label\":\"111\",\"selected\":true,\"filter\":[{\"andor\":\"and\",\"conditions\":\"eq\",\"value\":\"111\",\"fieldName\":\"userId\"},{\"andor\":\"and\",\"conditions\":\"eq\",\"value\":\"222\",\"fieldName\":\"opName\"}]},{\"id\":\"custom_1621405014493\",\"label\":\"222\",\"selected\":false,\"filter\":[{\"andor\":\"and\",\"conditions\":\"ne\",\"value\":\"FT\",\"fieldName\":\"brNo\"},{\"andor\":\"or\",\"conditions\":\"notLike\",\"value\":[\"001\",\"ZC_BBGL\",\"ZC_BMFZJL\"],\"fieldName\":\"roleNo\"}]}]'\r\n    // );\r\n    this.originalFilterData = JSON.parse(JSON.stringify(this.queryTabs));\r\n    if (this.originalFilterData.length > 0) {\r\n      this.filterIndex = 0;\r\n      this.filterType = \"original\";\r\n      for (let item of this.originalFilterData) {\r\n        item.conditions = \"eq\";\r\n      }\r\n    } else if (this.customFilterData.length > 0) {\r\n      this.filterIndex = 0;\r\n      this.filterType = \"custom\";\r\n    }\r\n  },\r\n  methods: {\r\n    searchFilter() {\r\n      let filter = this.customFilterData[this.filterIndex].filter;\r\n      if (!filter || filter.length == 0) {\r\n        return;\r\n      }\r\n      this.$parent.customQuery = JSON.stringify(filter);\r\n      this.$parent.search();\r\n    },\r\n    delFilterItem(index) {\r\n      this.customFilterData[this.filterIndex].filter.splice(index, 1);\r\n      this.$set(\r\n        this.customFilterData,\r\n        this.filterIndex,\r\n        this.customFilterData[this.filterIndex]\r\n      );\r\n    },\r\n    setFilter(data, index) {\r\n      this.customFilterData[this.filterIndex].filter[index] = data;\r\n    },\r\n    saveFilterData(type) {\r\n      if (this.showFilterNameDialog) {\r\n        this.$refs.filterNameForm.validate(valid => {\r\n          if (valid) {\r\n            this.customFilterData[\r\n              this.filterIndex\r\n            ].label = this.filterNameForm.name;\r\n            this.save();\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n      } else if (type == \"new\") {\r\n        this.save();\r\n        this.isNew = false;\r\n      } else if (this.isNew == true) {\r\n        this.showFilterNameDialog = true;\r\n      } else {\r\n        this.save();\r\n      }\r\n    },\r\n    save() {\r\n      let data = {\r\n        router: this.$route.path,\r\n        opNo: this.$store.getters.user.opNo,\r\n        customFilter: JSON.stringify(this.customFilterData)\r\n      };\r\n      api.save(data, res => {\r\n        if (res.code == 0) {\r\n          this.$set(\r\n            this.customFilterData,\r\n            this.filterIndex,\r\n            this.customFilterData[this.filterIndex]\r\n          );\r\n          this.showFilterNameDialog = false;\r\n          this.filterNameForm.name = \"\";\r\n          this.$message.success(res.msg);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    resetFilterData() {\r\n      this.customFilterData[this.filterIndex].filter = [];\r\n      this.addFilterContent();\r\n    },\r\n    deleteFilterData() {\r\n      this.customFilterData.splice(this.filterIndex, 1);\r\n      if (this.filterIndex > 0) {\r\n        this.filterIndex--;\r\n      }\r\n    },\r\n    addFilterContent() {\r\n      let filter = this.customFilterData[this.filterIndex].filter || [];\r\n      filter.push({\r\n        fieldName: \"\",\r\n        conditions: \"\",\r\n        value: \"\",\r\n        andor: \"and\"\r\n      });\r\n      this.customFilterData[this.filterIndex].filter = filter;\r\n      this.$set(\r\n        this.customFilterData,\r\n        this.filterIndex,\r\n        this.customFilterData[this.filterIndex]\r\n      );\r\n    },\r\n    filterSelected(item, index, type) {\r\n      this.filterIndex = index;\r\n      this.filterType = type;\r\n    },\r\n    changeSelected(index) {\r\n      this.showLengthError = false;\r\n      if (this.customFilterData[index].selected) {\r\n        this.customFilterData[index].selected = false;\r\n      } else {\r\n        let customFilterDataSelected = this.customFilterData.filter(item => {\r\n          if (item.selected) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n        if (\r\n          this.originalFilterData.length + customFilterDataSelected.length >=\r\n          5\r\n        ) {\r\n          this.showLengthError = true;\r\n          return;\r\n        }\r\n        this.customFilterData[index].selected = true;\r\n      }\r\n      this.$set(this.customFilterData, index, this.customFilterData[index]);\r\n    },\r\n    addNewFilter() {\r\n      this.isNew = true;\r\n      if (\r\n        this.customFilterData.length > 0 &&\r\n        !this.customFilterData[this.customFilterData.length - 1].label\r\n      ) {\r\n        this.$message.warning(\"请保存当前筛选条件后新增！\");\r\n        return;\r\n      }\r\n      // if (this.originalFilterData.length + this.customFilterData.length >= 5) {\r\n      //   this.$message.warning(\"只能展示5个常用条件！\");\r\n      //   return false;\r\n      // }\r\n      let item = {\r\n        id: \"custom_\" + new Date().getTime(),\r\n        label: \"\",\r\n        selected: false\r\n      };\r\n      this.customFilterData.push(item);\r\n      this.filterType = \"custom\";\r\n      this.filterIndex = this.customFilterData.length - 1;\r\n      this.addFilterContent();\r\n    }\r\n    // addFilter() {\r\n    //   this.$refs.popoverForm.validate((valid) => {\r\n    //     if (valid) {\r\n    //       if (this.originalFilterData.length + this.customFilterData.length >= 5) {\r\n    //         this.$message.warning(\"只能展示5个常用条件！\");\r\n    //         return false;\r\n    //       }\r\n    //       let item = {\r\n    //         id: \"custom_\" + new Date().getTime(),\r\n    //         label: this.popoverForm.name,\r\n    //         selected: true,\r\n    //       };\r\n    //       this.customFilterData.push(item);\r\n    //       this.filterType = \"custom\";\r\n    //       this.filterIndex = this.customFilterData.length - 1;\r\n    //       this.addFilterContent();\r\n    //       this.showPopover = false;\r\n    //     } else {\r\n    //       return false;\r\n    //     }\r\n    //   });\r\n    // },\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.filterHeader {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  flex-wrap: wrap;\r\n}\r\n.filterHeader .filterItem {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 12px;\r\n}\r\n.filterHeader .filterItemSelected {\r\n  width: 23px;\r\n  height: 24px;\r\n  font-size: 16px;\r\n  color: #409eff;\r\n  border: 1px solid #409eff;\r\n  border-radius: 4px 0px 0px 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n  cursor: pointer;\r\n}\r\n.filterHeader .original .filterItemSelected {\r\n  cursor: not-allowed;\r\n  color: #ccc;\r\n  border-color: #ccc;\r\n}\r\n.filterHeader .filterItemBtn.el-button {\r\n  height: 24px;\r\n  padding: 0 6px;\r\n  min-width: auto;\r\n  border-radius: 0px 4px 4px 0px;\r\n  margin-left: 4px;\r\n}\r\n.filterHeader .filterItemBtn.el-button.active {\r\n  background-color: #2c6bb7;\r\n}\r\n.filterFooter {\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #deecfa;\r\n}\r\n.filterContent {\r\n  padding-left: 60px;\r\n}\r\n.filterContent .el-col {\r\n  padding: 0 !important;\r\n}\r\n.filterNameDialog .el-dialog__body {\r\n  height: 350px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.filterNameDialog .el-dialog__body .el-form {\r\n  width: 70%;\r\n}\r\n.filterNameDialog .el-dialog__body .el-form .el-form-item__label {\r\n  height: 40px;\r\n  line-height: 40px;\r\n}\r\n.lengthError {\r\n  color: #f6766a;\r\n  line-height: 1;\r\n  margin-left: 20px;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.filterHeader {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  margin-bottom: 16px;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n}\r\n.filterHeader .filterItem {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  margin: 0 12px;\r\n}\r\n.filterHeader .filterItemSelected {\r\n  width: 23px;\r\n  height: 24px;\r\n  font-size: 16px;\r\n  color: #409eff;\r\n  border: 1px solid #409eff;\r\n  border-radius: 4px 0px 0px 4px;\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  cursor: pointer;\r\n}\r\n.filterHeader .original .filterItemSelected {\r\n  cursor: not-allowed;\r\n  color: #ccc;\r\n  border-color: #ccc;\r\n}\r\n.filterHeader .filterItemBtn.el-button {\r\n  height: 24px;\r\n  padding: 0 6px;\r\n  min-width: auto;\r\n  border-radius: 0px 4px 4px 0px;\r\n  margin-left: 4px;\r\n}\r\n.filterHeader .filterItemBtn.el-button.active {\r\n  background-color: #2c6bb7;\r\n}\r\n.filterFooter {\r\n  height: 48px;\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n  background: #deecfa;\r\n}\r\n.filterContent {\r\n  padding-left: 60px;\r\n}\r\n.filterContent .el-col {\r\n  padding: 0 !important;\r\n}\r\n.filterNameDialog .el-dialog__body {\r\n  height: 350px;\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n}\r\n.filterNameDialog .el-dialog__body .el-form {\r\n  width: 70%;\r\n}\r\n.filterNameDialog .el-dialog__body .el-form .el-form-item__label {\r\n  height: 40px;\r\n  line-height: 40px;\r\n}\r\n.lengthError {\r\n  color: #f6766a;\r\n  line-height: 1;\r\n  margin-left: 20px;\r\n}\r\n","<template>\r\n  <el-switch\r\n    v-model=\"compValue\"\r\n    :active-value=\"\r\n      isEmpty(props.switchValue.activeValue) ? 0 : props.switchValue.activeValue\r\n    \"\r\n    :inactive-value=\"\r\n      isEmpty(props.switchValue.inActiveValue)\r\n        ? 1\r\n        : props.switchValue.inActiveValue\r\n    \"\r\n    :active-text=\"props.switchValue.activeText\"\r\n    :inactive-text=\"props.switchValue.inActiveText\"\r\n    :placeholder=\"isEmpty(props.placeholder) ? '' : props.placeholder\"\r\n    :disabled=\"isEmpty(props.disabled) ? false : props.disabled\"\r\n    :readonly=\"isEmpty(props.readOnly) ? false : props.readOnly\"\r\n    :class=\"{\r\n      readonly: isEmpty(props.readOnly) ? false : props.readOnly,\r\n      'mf-switch': autoWidth\r\n    }\"\r\n    v-on=\"event\"\r\n    @change=\"changeSwitch\"\r\n  >\r\n  </el-switch>\r\n</template>\r\n<script>\r\nimport formUtil from \"../../utils/formUtil\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      isEmpty: formUtil.isEmpty,\r\n      autoWidth: false\r\n    };\r\n  },\r\n  computed: {\r\n    compValue: {\r\n      get() {\r\n        if (this.props.pkType === \"table\" && this.isSearch == false) {\r\n          this.props.disabled = this.props.switchValue.readOnly;\r\n        }\r\n        this.change(this.value);\r\n        return this.value;\r\n      },\r\n      set(val) {\r\n        if (this.props.pkType === \"table\") {\r\n          this.props.readOnly = this.props.switchValue.readOnly;\r\n          this.$emit(\"returnBack\", val);\r\n        } else if (!this.props.disabled && !this.props.readOnly) {\r\n          this.$emit(\"returnBack\", val);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  model: {\r\n    prop: \"value\", //值可以随意命名\r\n    event: \"returnBack\" //方法也可以随意命名\r\n  },\r\n  props: {\r\n    value: {},\r\n    event: Object,\r\n    props: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    isSearch: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    changeSwitch(value){\r\n      this.change(value);\r\n      this.$emit(\"change\", value);\r\n    },\r\n    change(value) {\r\n      if (\r\n        value == this.props.switchValue.activeValue &&\r\n        this.props.switchValue.activeText\r\n      ) {\r\n        this.autoWidth = true;\r\n      } else if (\r\n        value == this.props.switchValue.inActiveValue &&\r\n        this.props.switchValue.inActiveText\r\n      ) {\r\n        this.autoWidth = true;\r\n      } else {\r\n        this.autoWidth = false;\r\n      }\r\n      if (this.isSearch) {\r\n        this.props.disabled = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n/* switch按钮样式 */\r\n.el-switch__label {\r\n  display: none;\r\n  color: #fff !important;\r\n}\r\n/*打开时文字位置设置*/\r\n.mf-switch .el-switch__label--right {\r\n  z-index: 1;\r\n}\r\n/* 调整打开时文字的显示位子 */\r\n.mf-switch .el-switch__label--right span {\r\n  margin-right: 20px;\r\n  padding-left: 8px;\r\n}\r\n/*关闭时文字位置设置*/\r\n.mf-switch .el-switch__label--left {\r\n  z-index: 1;\r\n}\r\n/* 调整关闭时文字的显示位子 */\r\n.mf-switch .el-switch__label--left span {\r\n  margin-left: 20px;\r\n  padding-right: 8px;\r\n}\r\n/*显示文字*/\r\n.mf-switch .el-switch__label.is-active {\r\n  display: block;\r\n}\r\n/* 调整按钮的宽度 */\r\n.mf-switch.el-switch .el-switch__core {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n.mf-switch.el-switch .el-switch__core,\r\n.el-switch .el-switch__label {\r\n  width: auto !important;\r\n  margin: 0;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n/* switch按钮样式 */\r\n.el-switch__label {\r\n  display: none;\r\n  color: #fff !important;\r\n}\r\n/*打开时文字位置设置*/\r\n.mf-switch .el-switch__label--right {\r\n  z-index: 1;\r\n}\r\n/* 调整打开时文字的显示位子 */\r\n.mf-switch .el-switch__label--right span {\r\n  margin-right: 20px;\r\n  padding-left: 8px;\r\n}\r\n/*关闭时文字位置设置*/\r\n.mf-switch .el-switch__label--left {\r\n  z-index: 1;\r\n}\r\n/* 调整关闭时文字的显示位子 */\r\n.mf-switch .el-switch__label--left span {\r\n  margin-left: 20px;\r\n  padding-right: 8px;\r\n}\r\n/*显示文字*/\r\n.mf-switch .el-switch__label.is-active {\r\n  display: block;\r\n}\r\n/* 调整按钮的宽度 */\r\n.mf-switch.el-switch .el-switch__core {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n.mf-switch.el-switch .el-switch__core,\r\n.el-switch .el-switch__label {\r\n  width: auto !important;\r\n  margin: 0;\r\n}\r\n","<template>\r\n  <el-dialog\r\n    :visible.sync=\"visible\"\r\n    @close=\"$emit('update:show', false)\"\r\n    :show=\"show\"\r\n    class=\"mftcc-table-dialog\"\r\n    :width=\"doption.width\"\r\n    ref=\"dialog\"\r\n    @open=\"opened\"\r\n    append-to-body\r\n    :fullscreen=\"doption.fullscreen\"\r\n    :center=\"doption.center\"\r\n    :close-on-click-modal=\"false\"\r\n    :title=\"doption.title\"\r\n  >\r\n    <div v-if=\"option.search\" class=\"mftcc-form-tools\">\r\n      <div class=\"mftcc-form-tools-item\"></div>\r\n      <div class=\"mftcc-form-tools-item\">\r\n        <div class=\"dynamicQuery\">\r\n          <div class=\"el-input el-input--suffix\">\r\n            <input\r\n              type=\"text\"\r\n              v-model=\"searchCondi\"\r\n              autocomplete=\"off\"\r\n              placeholder=\"请输入查询条件\"\r\n              class=\"el-input__inner\"\r\n            />\r\n            <span class=\"el-input__suffix\">\r\n              <span class=\"el-input__suffix-inner\">\r\n                <i\r\n                  @click=\"searchTableData()\"\r\n                  class=\"el-input__icon el-icon-search\"\r\n                ></i>\r\n              </span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div style=\"flex-grow: 1;position: relative;\" class=\"mftcc-table\">\r\n      <div v-loading=\"loading\">\r\n        <el-table\r\n          :data=\"tableData\"\r\n          ref=\"modelTable\"\r\n          highlight-current-row\r\n          @current-change=\"handleCurrentChange\"\r\n          @row-click=\"getDetails\"\r\n          style=\"width: 100%;height:100%\"\r\n          row-key=\"depId\"\r\n          max-height=\"370\"\r\n          :tree-props=\"{ children: 'children' }\"\r\n        >\r\n          <template v-for=\"(col, index) in columns\">\r\n            <!--:fixed=\"col.fixed || false\"-->\r\n            <el-table-column\r\n              v-if=\"col.prop != '' ? col.isShow : true\"\r\n              :key=\"index\"\r\n              :prop=\"col.prop\"\r\n              :label=\"col.label\"\r\n              show-overflow-tooltip\r\n              :min-width=\"col.width\"\r\n              :width=\"col.prop == '' ? col.width : ''\"\r\n            >\r\n            </el-table-column>\r\n          </template>\r\n        </el-table>\r\n        <el-pagination\r\n          v-if=\"doption.isPagination\"\r\n          background\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrent\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          :page-size=\"pageSize\"\r\n          :current-page=\"pageNo\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"pageTotal\"\r\n        >\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"dialog-footer\" v-if=\"doption.footer\">\r\n      <el-button type=\"primary\" @click=\"submit\"\r\n        >{{ doption.confirmButtonText }}\r\n      </el-button>\r\n      <el-button @click=\"visible = false\">{{\r\n        doption.cancelButtonText\r\n      }}</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport api from \"../../../api/model\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      initData: {},\r\n      visible: this.show,\r\n      initSearchData: \"\",\r\n      tableShow: false,\r\n      tableData: [],\r\n      pageNo: 1,\r\n      pageSize: 10,\r\n      pageTotal: 0,\r\n      currentRow: null,\r\n      selectData: {},\r\n      searchCondi: \"\",\r\n      loading: false,\r\n      columns: [\r\n        {\r\n          prop: \"depName\",\r\n          label: \"规则名称\",\r\n          width: \"120px\",\r\n          isShow: true\r\n        },\r\n        {\r\n          prop: \"callName\",\r\n          label: \"调用标识\",\r\n          width: \"150px\",\r\n          isShow: true\r\n        },\r\n        {\r\n          prop: \"depVersion\",\r\n          label: \"版本号\",\r\n          width: \"50px\",\r\n          isShow: true\r\n        },\r\n        {\r\n          prop: \"memo\",\r\n          label: \"规则描述\",\r\n          width: \"250px\",\r\n          isShow: true\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  props: {\r\n    show: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    },\r\n    parentVm: {\r\n      type: Object,\r\n      default() {\r\n        return null;\r\n      }\r\n    },\r\n    option: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    doption() {\r\n      return Object.assign(\r\n        {\r\n          search: true,\r\n          width: \"1000px\",\r\n          height: \"600px\",\r\n          fullscreen: false,\r\n          center: false,\r\n          footer: true,\r\n          title: \"选择规则\",\r\n          isPagination: true,\r\n          confirmButtonText: \"确 定\",\r\n          cancelButtonText: \"取 消\"\r\n        },\r\n        this.option\r\n      );\r\n    }\r\n  },\r\n  watch: {\r\n    show() {\r\n      let _this = this;\r\n      this.visible = this.show;\r\n      if (this.visible === true) {\r\n        this.getTableData(this.pageNo, this.pageSize);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    searchTableData() {\r\n      this.getTableData(1, this.pageSize);\r\n    },\r\n    currentChange(pageNo) {\r\n      this.pageNo = pageNo;\r\n    },\r\n    getTableData(pageNo, pageSize) {\r\n      var _this = this;\r\n      this.searchData = this.searchData || {};\r\n      this.searchData.pageNo = pageNo;\r\n      this.searchData.pageSize = pageSize;\r\n      this.searchData.depName = this.searchCondi;\r\n\r\n      this.tableData = [];\r\n      api.getRuleTreeData(\r\n        this.searchData,\r\n        res => {\r\n          if (res.code == 0) {\r\n            let dataList = res.list;\r\n            _this.tableData = dataList.records;\r\n            _this.pageNo = dataList.current; // 当前页数\r\n            _this.pageSize = dataList.size; // 每页数量\r\n            _this.pageTotal = dataList.total; // 页面总数\r\n            _this.loading = false;\r\n          }\r\n        },\r\n        error => {\r\n          this.loading = false;\r\n        }\r\n      );\r\n    },\r\n    submit() {\r\n      this.$emit(\"callback\", this.selectData);\r\n      this.visible = false;\r\n    },\r\n    handleSizeChange(val) {\r\n      this.getTableData(1, val);\r\n    },\r\n    handleCurrent(val) {\r\n      this.getTableData(val, this.pageSize);\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.currentRow = val;\r\n    },\r\n    getDetails(row) {\r\n      this.selectData = row;\r\n    },\r\n    opened() {\r\n      this.$refs.dialog.$el.children[0].style.height =\r\n        this.option.height || \"600px\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.el-table__body tr.current-row > td {\r\n  background-color: #dff2ff !important;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.el-table__body tr.current-row > td {\r\n  background-color: #dff2ff !important;\r\n}\r\n","<template>\r\n    <ul v-show=\"visible\"\r\n        :style=\"{left:position.left+'px',top:position.top+'px'}\" class=\"contextmenu el-dropdown-menu \">\r\n        <li class=\"el-dropdown-menu__item\" \r\n            v-for=\"(item, index) in (items||[])\"\r\n            :key=\"index\"\r\n            @click=\"Fn(item)\">{{ item.text }}</li>\r\n    </ul>\r\n</template>\r\n<script>\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n          visible: this.show\r\n      }\r\n    },\r\n    props: [\"show\",\"position\",\"items\"],\r\n    watch: {\r\n        show (value) {\r\n            this.visible = this.show;\r\n            if (value) {\r\n                document.body.addEventListener('click', this.closeMenu)\r\n            } else {\r\n                document.body.removeEventListener('click', this.closeMenu)\r\n            }\r\n        }\r\n    },\r\n    created(){\r\n        \r\n    },\r\n    methods: {\r\n        Fn(item) {\r\n            this.$emit('callback', item);\r\n            this.closeMenu();\r\n        },\r\n        closeMenu(){\r\n            this.$emit('update:show', false);\r\n            this.visible = false;\r\n        }\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n.contextmenu{\r\n    position: absolute;\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.contextmenu{\r\n    position: absolute;\r\n}\r\n","<template>\r\n  <el-dialog\r\n    :visible.sync=\"visible\"\r\n    @close=\"$emit('update:show', false)\"\r\n    class=\"mftcc-checkbox-dialog\"\r\n    :width=\"option.width || '1000px'\"\r\n    @open=\"opened\"\r\n    ref=\"dialog\"\r\n    append-to-body\r\n    :close-on-click-modal=\"false\"\r\n    :show=\"show\"\r\n  >\r\n    <div\r\n      slot=\"title\"\r\n      class=\"dialog-header\"\r\n      style=\"display: flex; justify-content: flex-end\"\r\n    >\r\n      <label style=\"position: absolute; left: 20px\">{{\r\n        option.title || title\r\n      }}</label>\r\n      <el-input\r\n        autocomplete=\"off\"\r\n        placeholder=\"请输入关键字\"\r\n        suffix-icon=\"el-icon-search\"\r\n        v-if=\"option.search === undefined ? true : option.search\"\r\n        v-model=\"searchData\"\r\n        style=\"width: 200px; margin: 0px 65px 0px 0px\"\r\n      ></el-input>\r\n      <el-popover\r\n        placement=\"bottom\"\r\n        width=\"160\"\r\n        v-model=\"addVisible\"\r\n        v-if=\"option.insert === undefined ? true : option.insert\"\r\n      >\r\n        <el-form :model=\"addForm\" label-width=\"80px\" size=\"mini\">\r\n          <el-form-item label=\"真实值\">\r\n            <el-input v-model=\"addForm[option.realField || 'value']\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"显示值\">\r\n            <el-input v-model=\"addForm[option.showField || 'text']\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div style=\"text-align: right; margin: 0\">\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"addItem\"\r\n            >确定</el-button\r\n          >\r\n          <el-button size=\"mini\" type=\"text\" @click=\"addVisible = false\"\r\n            >取消</el-button\r\n          >\r\n        </div>\r\n        <el-button\r\n          type=\"primary\"\r\n          slot=\"reference\"\r\n          style=\"margin: 0px 65px 0px 0px\"\r\n          >新增\r\n        </el-button>\r\n      </el-popover>\r\n    </div>\r\n    <div class=\"dialog-content\">\r\n      <div class=\"data\">\r\n        <div v-if=\"option.group === true\">\r\n          <div v-for=\"(group, index) in filterData || []\" :key=\"index\">\r\n            <el-divider content-position=\"left\">{{ group.name }}</el-divider>\r\n            <el-checkbox-group v-model=\"option.value[index]\">\r\n              <el-checkbox\r\n                :border=\"border\"\r\n                v-for=\"(item, index) in group.data || []\"\r\n                :key=\"index\"\r\n                :label=\"item.value\"\r\n                >{{ item.text }}\r\n              </el-checkbox>\r\n            </el-checkbox-group>\r\n          </div>\r\n        </div>\r\n        <div v-else>\r\n          <el-checkbox-group v-model=\"option.value\">\r\n            <el-checkbox\r\n              :border=\"border\"\r\n              v-for=\"(item, index) in filterData || []\"\r\n              :key=\"index\"\r\n              :label=\"item.value\"\r\n              >{{ item.text }}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button @click=\"visible = false\">取 消</el-button>\r\n      <el-button type=\"primary\" @click=\"submit\">确 定</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { get, postJson } from \"../../axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: \"多选筛选器\",\r\n      searchData: \"\",\r\n      visible: this.show,\r\n      addVisible: false,\r\n      addForm: {}\r\n    };\r\n  },\r\n  props: {\r\n    show: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    },\r\n    option: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    show() {\r\n      this.visible = this.show;\r\n      if (this.visible) {\r\n        this.searchData = \"\";\r\n        let seaData = {};\r\n        seaData[\"tableId\"] = \"sys/sysUserList\";\r\n        seaData[\"pageNo\"] = 1;\r\n        seaData[\"pageSize\"] = -1;\r\n        if (\r\n          this.option.initPath !== undefined &&\r\n          this.option.initPath !== null &&\r\n          this.option.initPath !== \"\"\r\n        ) {\r\n          postJson(this.option.initPath, seaData, true, res => {\r\n            if (res.code == 0) {\r\n              let dataList = res.list;\r\n              this.option.data = dataList.records;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    addVisible() {\r\n      if (this.addVisible) {\r\n        this.addForm = {};\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  methods: {\r\n    addItem() {\r\n      if (this.option.group) {\r\n        this.$message.error(\"分组暂不支持\");\r\n        this.addVisible = false;\r\n      } else {\r\n        let _this = this;\r\n        postJson(this.option.insertPath, this.addForm, true, res => {\r\n          _this.option.data.push({\r\n            value: _this.addForm[_this.option.realField || \"value\"],\r\n            text: _this.addForm[_this.option.showField || \"text\"]\r\n          });\r\n          this.addVisible = false;\r\n        });\r\n      }\r\n    },\r\n    submit() {\r\n      let value = [];\r\n      if (this.option.group) {\r\n        for (let i in this.option.data) {\r\n          let dataArr = this.option.data[i].data;\r\n          let valueArr = this.option.value[i];\r\n          let valueData = [];\r\n          for (let v in valueArr) {\r\n            for (let d in dataArr) {\r\n              if (\r\n                dataArr[d][this.option.realField || \"value\"] === valueArr[v]\r\n              ) {\r\n                valueData.push(dataArr[d]);\r\n              }\r\n            }\r\n          }\r\n          value.push(valueData);\r\n        }\r\n      } else {\r\n        for (let v in this.option.value) {\r\n          for (let d in this.option.data) {\r\n            if (\r\n              this.option.data[d][this.option.realField || \"value\"] ===\r\n              this.option.value[v]\r\n            ) {\r\n              value.push(this.option.data[d]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.$emit(\"callback\", value);\r\n      this.visible = false;\r\n    },\r\n    opened() {\r\n      this.$refs.dialog.$el.children[0].style.height =\r\n        this.option.height || \"600px\";\r\n    }\r\n  },\r\n  computed: {\r\n    filterData() {\r\n      if (this.option.group) {\r\n        let data = [];\r\n        for (let i in this.option.data) {\r\n          let groupData = this.option.data[i].data;\r\n          let groupName = this.option.data[i].name;\r\n          let itemData = [];\r\n          for (let d in groupData) {\r\n            let value = groupData[d][this.option.realField || \"value\"];\r\n            let text = groupData[d][this.option.showField || \"text\"];\r\n            if (text.indexOf(this.searchData) != -1) {\r\n              itemData.push({\r\n                value: value,\r\n                text: text\r\n              });\r\n            }\r\n          }\r\n          let item = {\r\n            name: groupName,\r\n            data: itemData\r\n          };\r\n          data.push(item);\r\n        }\r\n        return data;\r\n      } else {\r\n        let data = [];\r\n        for (let i in this.option.data) {\r\n          let value = this.option.data[i][this.option.realField || \"value\"];\r\n          let text = this.option.data[i][this.option.showField || \"text\"];\r\n          if (text.indexOf(this.searchData) != -1) {\r\n            data.push({\r\n              value: value,\r\n              text: text\r\n            });\r\n          }\r\n        }\r\n        return data;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.mftcc-checkbox-dialog .el-dialog {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.mftcc-checkbox-dialog .el-dialog__body {\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n.mftcc-checkbox-dialog .el-checkbox-group {\r\n  width: 100%;\r\n}\r\n.mftcc-checkbox-dialog .el-checkbox {\r\n  width: calc(25% - 10px);\r\n  margin: 5px !important;\r\n}\r\n.mftcc-checkbox-dialog .el-checkbox .el-checkbox__label {\r\n  display: inline-grid;\r\n  white-space: pre-line;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n  line-height: 20px;\r\n  width: calc(100% - 24px);\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-checkbox-dialog .el-dialog {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n}\r\n\r\n.mftcc-checkbox-dialog .el-dialog__body {\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n\r\n.mftcc-checkbox-dialog .el-checkbox-group {\r\n  width: 100%;\r\n}\r\n\r\n.mftcc-checkbox-dialog .el-checkbox {\r\n  width: calc(25% - 10px);\r\n  margin: 5px !important;\r\n}\r\n\r\n.mftcc-checkbox-dialog .el-checkbox .el-checkbox__label {\r\n  display: inline-grid;\r\n  white-space: pre-line;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n  line-height: 20px;\r\n  width: calc(100% - 24px);\r\n}\r\n","<template>\r\n  <el-dialog\r\n    :visible.sync=\"visible\"\r\n    @close=\"$emit('update:show', false)\"\r\n    class=\"mftcc-radio-dialog\"\r\n    :width=\"option.width || '1000px'\"\r\n    @open=\"opened\"\r\n    ref=\"dialog\"\r\n    :close-on-click-modal=\"false\"\r\n    append-to-body\r\n    :show=\"show\"\r\n  >\r\n    <div\r\n      slot=\"title\"\r\n      class=\"dialog-header\"\r\n      style=\"display: flex; justify-content: flex-end\"\r\n    >\r\n      <label style=\"position: absolute; left: 20px\">{{\r\n        option.title || title\r\n      }}</label>\r\n      <el-input\r\n        autocomplete=\"off\"\r\n        placeholder=\"请输入关键字\"\r\n        suffix-icon=\"el-icon-search\"\r\n        v-if=\"option.search === undefined ? true : option.search\"\r\n        v-model=\"searchData\"\r\n        style=\"width: 200px; margin: 0px 65px 0px 0px\"\r\n      ></el-input>\r\n      <el-popover\r\n        placement=\"bottom\"\r\n        width=\"160\"\r\n        v-model=\"addVisible\"\r\n        v-if=\"option.insert === undefined ? true : option.insert\"\r\n      >\r\n        <el-form :model=\"addForm\" label-width=\"80px\" size=\"mini\">\r\n          <el-form-item label=\"真实值\">\r\n            <el-input v-model=\"addForm[option.realField || 'value']\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"显示值\">\r\n            <el-input v-model=\"addForm[option.showField || 'text']\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div style=\"text-align: right; margin: 0\">\r\n          <el-button size=\"mini\" type=\"text\" @click=\"addVisible = false\"\r\n            >取消</el-button\r\n          >\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"addItem\"\r\n            >确定</el-button\r\n          >\r\n        </div>\r\n        <el-button\r\n          type=\"primary\"\r\n          slot=\"reference\"\r\n          style=\"margin: 0px 65px 0px 0px\"\r\n          >新增\r\n        </el-button>\r\n      </el-popover>\r\n    </div>\r\n    <div class=\"dialog-content\">\r\n      <div class=\"data\">\r\n        <div v-if=\"option.group === true\">\r\n          <div v-for=\"(group, index) in filterData || []\" :key=\"index\">\r\n            <el-divider content-position=\"left\">{{ group.name }}</el-divider>\r\n            <el-radio-group v-model=\"option.value[index]\">\r\n              <el-radio\r\n                :border=\"border\"\r\n                v-for=\"(item, index) in group.data || []\"\r\n                :key=\"index\"\r\n                :label=\"item.value\"\r\n                >{{ item.text }}\r\n              </el-radio>\r\n            </el-radio-group>\r\n          </div>\r\n        </div>\r\n        <div v-else>\r\n          <el-radio-group v-model=\"option.value\">\r\n            <el-radio\r\n              :border=\"border\"\r\n              v-for=\"(item, index) in filterData || []\"\r\n              :key=\"index\"\r\n              :label=\"item.value\"\r\n              >{{ item.text }}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button type=\"primary\" @click=\"submit\">确 定</el-button>\r\n      <el-button @click=\"visible = false\">取 消</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { get, postJson } from \"../../axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: \"单选筛选器\",\r\n      searchData: \"\",\r\n      visible: this.show,\r\n      addVisible: false,\r\n      addForm: {}\r\n    };\r\n  },\r\n  props: {\r\n    show: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    },\r\n    option: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    show() {\r\n      this.visible = this.show;\r\n      if (this.visible) {\r\n        this.searchData = \"\";\r\n        let seaData = {};\r\n        seaData[\"tableId\"] = \"sys/sysUserList\";\r\n        seaData[\"pageNo\"] = 1;\r\n        seaData[\"pageSize\"] = -1;\r\n        if (\r\n          this.option.initPath !== undefined &&\r\n          this.option.initPath !== null &&\r\n          this.option.initPath !== \"\"\r\n        ) {\r\n          postJson(this.option.initPath, seaData, true, res => {\r\n            if (res.code == 0) {\r\n              let dataList = res.list;\r\n              this.option.data = dataList.records;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    addVisible() {\r\n      if (this.addVisible) {\r\n        this.addForm = {};\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  methods: {\r\n    addItem() {\r\n      if (this.option.group) {\r\n        this.$message.error(\"分组暂不支持\");\r\n      } else {\r\n        let _this = this;\r\n        postJson(this.option.insertPath, this.addForm, true, res => {\r\n          _this.option.data.push({\r\n            value: _this.addForm[_this.option.realField || \"value\"],\r\n            text: _this.addForm[_this.option.showField || \"text\"]\r\n          });\r\n          this.addVisible = false;\r\n        });\r\n      }\r\n    },\r\n    submit() {\r\n      if (this.option.group) {\r\n        let value = [];\r\n        for (let i in this.option.data) {\r\n          let dataArr = this.option.data[i].data;\r\n          let valueStr = this.option.value[i];\r\n          for (let d in dataArr) {\r\n            if (dataArr[d][this.option.realField || \"value\"] === valueStr) {\r\n              value.push(dataArr[d]);\r\n            }\r\n          }\r\n        }\r\n        this.$emit(\"callback\", value);\r\n      } else {\r\n        let value = {};\r\n        for (let d in this.option.data) {\r\n          if (\r\n            this.option.data[d][this.option.realField || \"value\"] ===\r\n            this.option.value\r\n          ) {\r\n            value = this.option.data[d];\r\n          }\r\n        }\r\n        this.$emit(\"callback\", value);\r\n      }\r\n      this.visible = false;\r\n    },\r\n    opened() {\r\n      this.$refs.dialog.$el.children[0].style.height =\r\n        this.option.height || \"600px\";\r\n    }\r\n  },\r\n  computed: {\r\n    filterData() {\r\n      if (this.option.group) {\r\n        let data = [];\r\n        for (let i in this.option.data) {\r\n          let groupData = this.option.data[i].data;\r\n          let groupName = this.option.data[i].name;\r\n          let itemData = [];\r\n          for (let d in groupData) {\r\n            let value = groupData[d][this.option.realField || \"value\"];\r\n            let text = groupData[d][this.option.showField || \"text\"];\r\n            if (text.indexOf(this.searchData) != -1) {\r\n              itemData.push({\r\n                value: value,\r\n                text: text\r\n              });\r\n            }\r\n          }\r\n          let item = {\r\n            name: groupName,\r\n            data: itemData\r\n          };\r\n          data.push(item);\r\n        }\r\n        return data;\r\n      } else {\r\n        let data = [];\r\n        for (let i in this.option.data) {\r\n          let value = this.option.data[i][this.option.realField || \"value\"];\r\n          let text = this.option.data[i][this.option.showField || \"text\"];\r\n          if (text.indexOf(this.searchData) != -1) {\r\n            data.push({\r\n              value: value,\r\n              text: text\r\n            });\r\n          }\r\n        }\r\n        return data;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.mftcc-radio-dialog .el-dialog {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.mftcc-radio-dialog .el-dialog__body {\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n.mftcc-radio-dialog .el-radio-group {\r\n  width: 100%;\r\n}\r\n.mftcc-radio-dialog .el-radio {\r\n  width: calc(25% - 10px);\r\n  margin: 5px !important;\r\n}\r\n.mftcc-radio-dialog .el-radio .el-radio__label {\r\n  display: inline-grid;\r\n  white-space: pre-line;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n  line-height: 20px;\r\n  width: calc(100% - 24px);\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-radio-dialog .el-dialog {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n}\r\n\r\n.mftcc-radio-dialog .el-dialog__body {\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n\r\n.mftcc-radio-dialog .el-radio-group {\r\n  width: 100%;\r\n}\r\n\r\n.mftcc-radio-dialog .el-radio {\r\n  width: calc(25% - 10px);\r\n  margin: 5px !important;\r\n}\r\n\r\n.mftcc-radio-dialog .el-radio .el-radio__label {\r\n  display: inline-grid;\r\n  white-space: pre-line;\r\n  word-wrap: break-word;\r\n  overflow: hidden;\r\n  line-height: 20px;\r\n  width: calc(100% - 24px);\r\n}\r\n","<template>\r\n  <el-dialog :visible.sync=\"visible\"\r\n             @close=\"$emit('update:show', false)\"\r\n             :show=\"show\"\r\n             class=\"mftcc-table-dialog\"\r\n             :width=\"doption.width\"\r\n             @open=\"opened\"\r\n             ref=\"dialog\"\r\n             append-to-body\r\n             :fullscreen=\"doption.fullscreen\"\r\n             :center=\"doption.center\"\r\n             :close-on-click-modal=\"false\"\r\n             :title=\"doption.title\">\r\n    <div class=\"dialog-content\">\r\n      <div class=\"mftcc-dialog-content\">\r\n        <mftcc-table v-if=\"tableShow\"\r\n                     :tableId=\"doption.tableId\"\r\n                     :parentVm=\"parentVm\"\r\n                     :initOption=\"initOption\"\r\n                     :initSearchData=\"initSearchData\"\r\n                     @current-change=\"currentChange\"\r\n                     @selection-change=\"$emit('selection-change', $event)\"\r\n                     ref=\"dialogList\"\r\n                     @initCallBack=\"initCallBack\">\r\n        </mftcc-table>\r\n      </div>\r\n    </div>\r\n    <div slot=\"footer\"\r\n         class=\"dialog-footer\"\r\n         v-if=\"doption.footer\">\r\n      <el-button type=\"primary\"\r\n                 @click=\"submit\">{{\r\n        doption.confirmButtonText\r\n      }}</el-button>\r\n      <el-button @click=\"visible = false\">{{\r\n        doption.cancelButtonText\r\n      }}</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        initOption: {},\r\n        visible: this.show,\r\n        initSearchData: \"\",\r\n        tableShow: false\r\n      };\r\n    },\r\n    props: {\r\n      show: {\r\n        type: Boolean,\r\n        default() {\r\n          return false;\r\n        }\r\n      },\r\n      parentVm: {\r\n        type: Object,\r\n        default() {\r\n          return null;\r\n        }\r\n      },\r\n      option: {\r\n        type: Object,\r\n        default() {\r\n          return {};\r\n        }\r\n      },\r\n      isClose: {\r\n        type: Boolean,\r\n        default() {\r\n          return true;\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      doption() {\r\n        return Object.assign(\r\n          {\r\n            width: \"1000px\",\r\n            height: \"600px\",\r\n            fullscreen: false,\r\n            center: false,\r\n            footer: true,\r\n            title: \"列表\",\r\n            confirmButtonText: \"确 定\",\r\n            cancelButtonText: \"取 消\"\r\n          },\r\n          this.option\r\n        );\r\n      }\r\n    },\r\n    watch: {\r\n      show() {\r\n        let _this = this;\r\n        _this.visible = _this.show;\r\n        if (_this.visible === true) {\r\n          if (_this.doption.type === \"radio\") {\r\n            _this.$set(_this.initOption, \"isSelect\", false);\r\n            _this.$set(_this.initOption, \"isRadio\", true);\r\n          } else {\r\n            _this.$set(_this.initOption, \"isSelect\", true);\r\n            if (_this.doption.selectKey) {\r\n              _this.$set(_this.initOption, \"selectKey\", _this.doption.selectKey);\r\n            }\r\n          }\r\n          _this.$set(_this.initOption, \"tableData\", _this.doption.data);\r\n          if (_this.doption.columns && _this.doption.columns.length > 0) {\r\n            _this.$set(_this.initOption, \"columns\", _this.doption.columns);\r\n          }\r\n          if (_this.doption.initSearchData) {\r\n            _this.$set(_this.initOption, \"initSearchData\", _this.doption.initSearchData);\r\n          }\r\n          _this.$set(_this.initOption, \"isPagination\", _this.doption.isPagination);\r\n          _this.$set(_this.initOption, \"url\", _this.doption.url);\r\n          _this.initSearchData = _this.doption.initSearchData || {};\r\n\r\n          _this.tableShow = true;\r\n        } else {\r\n          _this.tableShow = false;\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      getTableRef(callback) {\r\n        this.$nextTick(() => {\r\n          if (typeof callback === \"function\") {\r\n            callback(this.$refs.dialogList);\r\n          }\r\n        });\r\n      },\r\n      currentChange(currentRow, oldCurrentRow) {\r\n        this.$emit(\"current-change\", currentRow, oldCurrentRow);\r\n      },\r\n      submit() {\r\n        let value = [];\r\n        if (this.doption.type === \"radio\") {\r\n          // value = this.$refs.dialogList.getCurrentValue();\r\n          value = this.$refs.dialogList.templateSelection;\r\n        } else {\r\n          value = this.$refs.dialogList.getSelectValue();\r\n        }\r\n        // this.$nextTick(() => {\r\n        this.$emit(\"callback\", value);\r\n        // });\r\n        if (this.isClose) {\r\n          this.visible = false;\r\n        }\r\n      },\r\n      opened() {\r\n        this.$refs.dialog.$el.children[0].style.height = this.doption.height;\r\n      },\r\n      initCallBack() {\r\n        for (let i in this.doption.value) {\r\n          if (this.doption.type === \"radio\" && this.doption.value[i].key !== undefined) {\r\n            this.$refs.dialogList.setCurrentValue(this.doption.value[i].key, this.doption.value[i].value);\r\n          } else if (this.doption.value[i].key !== undefined) {\r\n            this.$refs.dialogList.setSelectValue(this.doption.value[i].key, this.doption.value[i].value);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n</script>\r\n<style>\r\n  .mftcc-table-dialog .mftcc-form-search {\r\n    padding: 0 20px;\r\n  }\r\n  .mftcc-table-dialog .search_form_div {\r\n    display: flex;\r\n    align-items: flex-start;\r\n  }\r\n  .mftcc-table-dialog .dialog-content {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n  }\r\n\r\n  .mftcc-table-dialog .mftcc-search-form .search-button button {\r\n    float: right;\r\n  }\r\n  .mftcc-table-dialog .mftcc-dialog-content {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    padding-top: 0px !important;\r\n  }\r\n  .mftcc-table-dialog .el-dialog {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .mftcc-table-dialog .el-dialog__body {\r\n    flex-grow: 1;\r\n    height: 100%;\r\n  }\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-table-dialog .search_form_div{\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-align: start;\r\n        -ms-flex-align: start;\r\n            align-items: flex-start;\r\n}\r\n.mftcc-table-dialog .dialog-content{\r\n    height: 100%;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n        -ms-flex-direction: column;\r\n            flex-direction: column;\r\n    -webkit-box-flex: 1;\r\n        -ms-flex-positive: 1;\r\n            flex-grow: 1;\r\n}\r\n.mftcc-table-dialog .mftcc-search-form .search-button button{\r\n    float: right;\r\n}\r\n.mftcc-table-dialog .mftcc-dialog-content{\r\n    -webkit-box-flex: 1;\r\n        -ms-flex-positive: 1;\r\n            flex-grow: 1;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n}\r\n.mftcc-table-dialog .el-dialog{\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n        -ms-flex-direction: column;\r\n            flex-direction: column;\r\n}\r\n.mftcc-table-dialog .el-dialog__body{\r\n    -webkit-box-flex: 1;\r\n        -ms-flex-positive: 1;\r\n            flex-grow: 1;\r\n    height: 100%;\r\n}\r\n","<template>\r\n  <el-dialog\r\n    :visible.sync=\"visible\"\r\n    @close=\"$emit('update:show', false)\"\r\n    :show=\"show\"\r\n    :width=\"option.width || '1000px'\"\r\n    @open=\"opened\"\r\n    ref=\"dialog\"\r\n    append-to-body\r\n    :close-on-click-modal=\"false\"\r\n    class=\"treeDialog\"\r\n  >\r\n    <div\r\n      slot=\"title\"\r\n      class=\"dialog-header\"\r\n      style=\"display: flex; justify-content: flex-end\"\r\n    >\r\n      <label style=\"position: absolute; left: 20px\">{{ option.title || title }}</label>\r\n      <el-input\r\n        autocomplete=\"off\"\r\n        placeholder=\"请输入关键字\"\r\n        suffix-icon=\"el-icon-search\"\r\n        v-if=\"option.search === undefined ? true : option.search\"\r\n        v-model=\"searchData\"\r\n        style=\"width: 200px; margin: 0px 65px 0px 0px\"\r\n      ></el-input>\r\n      <el-popover\r\n        placement=\"bottom\"\r\n        width=\"160\"\r\n        v-model=\"addVisible\"\r\n        v-if=\"option.insert === undefined ? true : option.insert\"\r\n      >\r\n        <el-form :model=\"addForm\" label-width=\"80px\" size=\"mini\">\r\n          <el-form-item label=\"真实值\">\r\n            <el-input v-model=\"addForm.id\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"显示值\">\r\n            <el-input\r\n              v-model=\"\r\n                addForm[option.defaultProps === undefined ? defaultProps.label : 'label']\r\n              \"\r\n            ></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div style=\"text-align: right; margin: 0\">\r\n          <el-button size=\"mini\" type=\"text\" @click=\"addVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" size=\"mini\" @click=\"addItem\">确定</el-button>\r\n        </div>\r\n        <el-button type=\"primary\" slot=\"reference\" style=\"margin: 0px 65px 0px 0px\"\r\n          >新增</el-button\r\n        >\r\n      </el-popover>\r\n    </div>\r\n    <div class=\"dialog-content\">\r\n      <el-tree\r\n        :data=\"treeData\"\r\n        node-key=\"id\"\r\n        highlight-current\r\n        check-strictly\r\n        :default-checked-keys=\"option.value || []\"\r\n        :default-expanded-keys=\"expandedKeys\"\r\n        :current-node-key=\"\r\n          option.value === undefined || option.value.length === 0 ? '' : option.value[0]\r\n        \"\r\n        :show-checkbox=\"option.type === 'single' ? false : true\"\r\n        :props=\"option.defaultProps || defaultProps\"\r\n        :filter-node-method=\"filterNode\"\r\n        @check=\"handleCheck\"\r\n        ref=\"tree\"\r\n      >\r\n      </el-tree>\r\n    </div>\r\n    <div slot=\"footer\" class=\"dialog-footer\">\r\n      <el-button type=\"primary\" @click=\"submit\">确 定</el-button>\r\n      <el-button @click=\"visible = false\">取 消</el-button>\r\n    </div>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { get, postJson } from \"../../axios\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: \"树形筛选器\",\r\n      searchData: \"\",\r\n      visible: this.show,\r\n      defaultProps: {\r\n        children: \"children\",\r\n        label: \"label\",\r\n      },\r\n      expandedKeys: [],\r\n      treeData: [],\r\n      addVisible: false,\r\n      addForm: {},\r\n    };\r\n  },\r\n  props: [\"show\", \"option\"],\r\n  watch: {\r\n    show() {\r\n      this.visible = this.show;\r\n      if (this.visible) {\r\n        this.searchData = \"\";\r\n        if (\r\n          this.option.initPath !== undefined &&\r\n          this.option.initPath !== null &&\r\n          this.option.initPath !== \"\"\r\n        ) {\r\n          get(this.option.initPath, null, true, (res) => {\r\n            this.treeData = res.list;\r\n          });\r\n        } else {\r\n          this.treeData = this.option.data;\r\n        }\r\n        this.expandedKeys = this.option.value || [];\r\n      }\r\n    },\r\n    addVisible() {\r\n      if (this.addVisible) {\r\n        this.addForm = {};\r\n      }\r\n    },\r\n    searchData(val) {\r\n      this.$refs.tree.filter(val);\r\n    },\r\n  },\r\n  created() {},\r\n  methods: {\r\n    addItem() {\r\n      let node = this.$refs.tree.getCurrentNode();\r\n      let pid = node.id;\r\n      this.addForm.pid = pid;\r\n      this.addForm.children = [];\r\n      postJson(this.option.insertPath, this.addForm, true, (res) => {\r\n        this.$refs.tree.append(this.addForm, pid);\r\n        this.expandedKeys = [this.addForm.id];\r\n        this.addVisible = false;\r\n      });\r\n    },\r\n    submit() {\r\n      let value = [];\r\n      if (this.option.type === \"single\") {\r\n        let cn = this.$refs.tree.getCurrentNode();\r\n        let node = this.$refs.tree.getNode(cn.id);\r\n        let parentNodes = [];\r\n        this.getParentNodes(node, parentNodes);\r\n        value = value.concat(parentNodes);\r\n        value.push(node.data);\r\n      } else {\r\n        let nodes = this.$refs.tree.getCheckedNodes();\r\n        let parentNodes = [];\r\n        let nodeArr = [];\r\n        for (let i in nodes) {\r\n          let node = this.$refs.tree.getNode(nodes[i].id);\r\n          if (i < nodes.length - 1) {\r\n            let nextNode = this.$refs.tree.getNode(nodes[Number(i) + 1].id);\r\n            if (node.level < nextNode.level) {\r\n              parentNodes.push(nodes[i]);\r\n            } else {\r\n              nodeArr.push(nodes[i]);\r\n            }\r\n          } else {\r\n            nodeArr.push(nodes[i]);\r\n          }\r\n        }\r\n        for (let n in nodeArr) {\r\n          let arr = [];\r\n          arr = arr.concat(parentNodes);\r\n          arr.push(nodeArr[n]);\r\n          value.push(arr);\r\n        }\r\n      }\r\n      this.$emit(\"callback\", value);\r\n      this.visible = false;\r\n    },\r\n    filterNode(value, data) {\r\n      if (!value) return true;\r\n      let dp = this.option.defaultProps || this.defaultProps;\r\n      return data[dp.label].indexOf(value) !== -1;\r\n    },\r\n    getParentNodes(node, nodeArr) {\r\n      if (node.parent && node.parent.key) {\r\n        nodeArr.push(node.parent.data);\r\n        this.getParentNodes(node.parent, nodeArr);\r\n      }\r\n    },\r\n    handleCheck(currentObj, treeStatus) {\r\n      // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\r\n      let selected = treeStatus.checkedKeys.indexOf(currentObj.id); // -1未选中\r\n      // 选中\r\n      if (selected !== -1) {\r\n        // 子节点只要被选中父节点就被选中\r\n        this.selectedParent(currentObj);\r\n        // 统一处理子节点为相同的勾选状态\r\n        this.uniteChildSame(currentObj, true);\r\n      } else {\r\n        // 未选中 处理子节点全部未选中\r\n        let dp = this.option.defaultProps || this.defaultProps;\r\n        if (currentObj[dp.children] && currentObj[dp.children].length !== 0) {\r\n          this.uniteChildSame(currentObj, false);\r\n        }\r\n      }\r\n    },\r\n    // 统一处理子节点为相同的勾选状态\r\n    uniteChildSame(treeList, isSelected) {\r\n      this.$refs.tree.setChecked(treeList.id, isSelected);\r\n      let dp = this.option.defaultProps || this.defaultProps;\r\n      if (treeList[dp.children]) {\r\n        for (let i = 0; i < treeList[dp.children].length; i++) {\r\n          this.uniteChildSame(treeList[dp.children][i], isSelected);\r\n        }\r\n      }\r\n    },\r\n    // 统一处理父节点为选中\r\n    selectedParent(currentObj) {\r\n      let currentNode = this.$refs.tree.getNode(currentObj);\r\n      if (currentNode.parent.key !== undefined) {\r\n        this.$refs.tree.setChecked(currentNode.parent, true);\r\n        this.selectedParent(currentNode.parent);\r\n      }\r\n    },\r\n    opened() {\r\n      this.$refs.dialog.$el.children[0].style.height = this.option.height || \"600px\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.treeDialog .el-tree {\r\n  height: 100%;\r\n  overflow: auto;\r\n}\r\n.treeDialog .el-dialog {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.treeDialog .el-dialog__body {\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.treeDialog .el-tree {\r\n  height: 100%;\r\n  overflow: auto;\r\n}\r\n.treeDialog .el-dialog {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n}\r\n.treeDialog .el-dialog__body {\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n  overflow: auto;\r\n}\r\n","<template>\r\n  <div class=\"mftcc-form-item\">\r\n    <template v-for=\"(group,index) in props.group\">\r\n      <el-col\r\n        :key=\"index + 'field'\"\r\n        :span=\"Math.floor((24-((props.group.length-1)*2))/props.group.length)\"\r\n      >\r\n      <template v-if=\"designer === true\">\r\n        <form-item\r\n          v-model=\"group.value\"\r\n          v-bind=\"{props:group}\"\r\n          :class=\"{'is-helper':showHelper===group, 'is-select':editField===group}\"\r\n          :designer=\"designer\"\r\n          @mouseenter.native=\"handleMouseEnter(group)\"\r\n          @mouseleave.native=\"handleMouseLeave(group)\"\r\n          @click.native.stop=\"handleClick(group)\"\r\n        >\r\n          <div slot=\"widgets-tools\" class=\"group-tools\">\r\n            <i class=\"el-icon-circle-plus-outline\" @click=\"addRow(index)\"></i>\r\n            <i class=\"el-icon-remove-outline\" @click=\"delRow(index)\"></i>\r\n          </div>\r\n        </form-item>\r\n      </template>\r\n      <template v-else>\r\n        <form-item\r\n          v-model=\"value\"\r\n          v-bind=\"{props:group}\"\r\n          :designer=\"designer\"\r\n        >\r\n        </form-item>\r\n      </template>  \r\n      </el-col>\r\n      <el-col\r\n        v-if=\"index !== (props.group.length-1)\"\r\n        :key=\"index + 'line'\"\r\n        :span=\"2\"\r\n        style=\"text-align: center;\"\r\n      >{{ isEmpty(props.separator)?'-':props.separator }}</el-col>\r\n    </template>\r\n  </div>\r\n</template>\r\n<script>\r\nimport formUtil from \"../../utils/formUtil\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      showHelper: null,\r\n      editField: null,\r\n      isEmpty: formUtil.isEmpty,\r\n      groupItem: {}\r\n    };\r\n  },\r\n  model: {\r\n    prop: \"value\", //值可以随意命名\r\n    event: \"returnBack\" //方法也可以随意命名\r\n  },\r\n  props: {\r\n    value:{},\r\n    designer: {\r\n      type: Boolean,\r\n      default() {\r\n        return false;\r\n      }\r\n    },\r\n    props: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleMouseEnter(item) {\r\n      if (this.$dragula.dragging) return;\r\n      this.showHelper = item;\r\n    },\r\n    handleMouseLeave(item) {\r\n      this.showHelper = null;\r\n    },\r\n    handleClick(item) {\r\n      this.editField = item;\r\n      this.$store.commit(\"set_editField\", item);\r\n    },\r\n    addRow(index) {\r\n      let groupItem = Object.assign({}, this.groupItem);\r\n      this.props.group.splice(index + 1, 0, groupItem);\r\n    },\r\n    delRow(index) {\r\n      this.props.group.splice(index, 1);\r\n    }\r\n  },\r\n  created() {\r\n    this.groupItem = Object.assign({}, this.props.group[0]);\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.group-tools {\r\n  position: absolute;\r\n  right: 0px;\r\n  top: 0px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n.group-tools i {\r\n  margin: 3px 0px;\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.group-tools {\r\n  position: absolute;\r\n  right: 0px;\r\n  top: 0px;\r\n  height: 100%;\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n}\r\n.group-tools i {\r\n  margin: 3px 0px;\r\n}\r\n","<template>\r\n  <!-- :class=\"\r\n      search === 'search'\r\n        ? 'mftcc-form-search'\r\n        : option.isExpand === true\r\n        ? option.query === 'query'\r\n          ? 'mftcc-form-expand query'\r\n          : 'mftcc-form-expand'\r\n        : option.query === 'query'\r\n        ? 'mftcc-form-query'\r\n        : 'mftcc-form'\r\n    \" -->\r\n  <el-form\r\n    :title=\"$show_title == false ? '' : formId || initOption.formId\"\r\n    :label-position=\"option.labelPosition\"\r\n    :model=\"formData\"\r\n    :rules=\"rules\"\r\n    :ref=\"formId || initOption.formId\"\r\n    :disabled=\"isEmpty(option.formDisabled) ? false : option.formDisabled\"\r\n    label-width=\"150px\"\r\n    :class=\"formClass()\"\r\n    @submit.native.prevent\r\n  >\r\n    <el-table\r\n      v-if=\"formFlag\"\r\n      :noScrollbar=\"true\"\r\n      :data=\"tableData\"\r\n      :show-header=\"false\"\r\n      :span-method=\"rowColMergeHandler\"\r\n      :row-style=\"rowStyleHandler\"\r\n      :border=\"this.option.query != 'query'\"\r\n      empty-text=\" \"\r\n      :class=\"isEmpty(option.formDisabled) ? '' : 'is-disabled'\"\r\n    >\r\n      <el-table-column\r\n        v-for=\"(item, index) in tableCol\"\r\n        :key=\"item.index\"\r\n        :prop=\"item.index\"\r\n      >\r\n        <template slot-scope=\"scope\">\r\n          <form-item\r\n            :props=\"scope.row[index + '']\"\r\n            v-model=\"formData\"\r\n            @click.native=\"\r\n              scope.row[index + ''] && clickFunc(scope.row[index + ''], $event)\r\n            \"\r\n            :event=\"scope.row[index + ''] && events[scope.row[index + ''].fieldName]\"\r\n            :pramDicItem=\"\r\n              scope.row[index + ''] && pramDicItem[scope.row[index + ''].fieldName]\r\n            \"\r\n            :query=\"option.query\"\r\n            :parentVm=\"parentVm\"\r\n          ></form-item>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <form-item\r\n      v-for=\"(item, index) in hiddenItem\"\r\n      :key=\"index\"\r\n      :props=\"item\"\r\n      v-model=\"formData\"\r\n      @click.native=\"clickFunc(item, $event)\"\r\n      :event=\"events[item.fieldName]\"\r\n      :pramDicItem=\"pramDicItem[item.fieldName]\"\r\n      :query=\"option.query\"\r\n      :parentVm=\"parentVm\"\r\n    ></form-item>\r\n  </el-form>\r\n</template>\r\n<script>\r\nimport { get, postJson, putJson, sync, getParameter } from \"../../../axios\";\r\nimport formUtil from \"../../../utils/formUtil\";\r\nexport default {\r\n  props: [\"formId\", \"parentVm\", \"initOption\", \"search\"],\r\n  data() {\r\n    return {\r\n      formFlag: false,\r\n      option: {},\r\n      formData: {},\r\n      formDataReal: {},\r\n      setFormData: {},\r\n      events: {},\r\n      pramDicItem: {},\r\n      rules: {},\r\n      isEmpty: formUtil.isEmpty,\r\n      dateFormat: formUtil.dateFormat,\r\n      hiddenItem: [],\r\n      waitData: {},\r\n      tableData: [],\r\n      originalTableData: [],\r\n      isLoad: false,\r\n      isSetFormValue: false,\r\n    };\r\n  },\r\n  provide() {\r\n    return {\r\n      getFormData: () => this.formData,\r\n      formItem: this.option.formItem,\r\n      getOption: () => this.option,\r\n    };\r\n  },\r\n  watch: {\r\n    formDataTemp: {\r\n      handler(val, oldVal) {\r\n        let fieldName = \"\";\r\n        for (let k in val) {\r\n          if (val[k] + \"\" != oldVal[k] + \"\") {\r\n            fieldName = k;\r\n            break;\r\n          }\r\n        }\r\n        /* let formItems = this.getFormItems(this.option.formItem);\r\n                                for (let j in formItems) {\r\n\r\n                                  // //将更新后的数据赋值到table数据中\r\n                                  // for (let i in this.tableData) {\r\n                                  //   let row = this.tableData[i];\r\n                                  //   for (let col in row) {\r\n                                  //     let item = row[col];\r\n                                  //     if (item.fieldName == formItems[j].fieldName) {\r\n                                  //       item.option = formItems[j].option;\r\n                                  //       item.library = formItems[j].library;\r\n                                  //       this.tableData[i][col] = item;\r\n                                  //     }\r\n                                  //   }\r\n                                  // }\r\n                                } */\r\n        //待表单初始化完成后 才可触发\r\n        if (this.isLoad) {\r\n          this.changeState(val, fieldName);\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    formId: {\r\n      handler(val, oldVal) {\r\n        if (val) {\r\n          this.resetFormData();\r\n          this.initForm();\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    initOption: {\r\n      handler(val, oldVal) {\r\n        if (val) {\r\n          this.resetFormData();\r\n          this.initForm();\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  computed: {\r\n    tableCol() {\r\n      let tableCol = [];\r\n      for (let i = 0; i < this.option.columns; i++) {\r\n        let index = i + \"\";\r\n        tableCol.push({ index: index });\r\n      }\r\n      return tableCol;\r\n    },\r\n    formDataTemp() {\r\n      return JSON.parse(JSON.stringify(this.formData));\r\n    },\r\n  },\r\n  methods: {\r\n    initTableData() {\r\n      let formItem = this.option.formItem.filter((item) => {\r\n        if (item.isShow) {\r\n          return true;\r\n        } else if (item.state && item.state.length > 0) {\r\n          for (let sts of item.state) {\r\n            if (sts.isShow !== false) {\r\n              return true;\r\n            }\r\n          }\r\n        } else if (item.fieldType == \"empty\" || item.fieldType == \"label\") {\r\n          return true;\r\n        }\r\n      });\r\n      this.tableData = new Array();\r\n      for (let item of formItem) {\r\n        let rowIndex = item.rowIndex;\r\n        let colIndex = item.colIndex;\r\n        if (!this.tableData[rowIndex]) {\r\n          this.tableData[rowIndex] = {};\r\n        }\r\n        if (item.useState) {\r\n          let active = item.state.find((i) => {\r\n            return item.useState === i.id;\r\n          });\r\n          item = Object.assign(item, active);\r\n        }\r\n        this.tableData[rowIndex][colIndex] = item;\r\n      }\r\n      this.originalTableData = this.tableData;\r\n    },\r\n    formClass() {\r\n      let clsStr = \"\";\r\n      if (this.search === \"search\") {\r\n        clsStr += \"mftcc-form-search\";\r\n      } else if (this.option.isExpand === true) {\r\n        if (this.option.query === \"query\") {\r\n          clsStr += \"mftcc-form-expand query\";\r\n        } else {\r\n          clsStr += \"mftcc-form-expand\";\r\n        }\r\n      } else if (this.option.query === \"query\") {\r\n        clsStr += \"mftcc-form-query\";\r\n      } else {\r\n        clsStr += \"mftcc-form\";\r\n      }\r\n      return clsStr;\r\n    },\r\n    resetFormData() {\r\n      this.formFlag = false;\r\n      this.option = {};\r\n      this.formData = {};\r\n      this.setFormData = {};\r\n      this.events = {};\r\n      this.pramDicItem = {};\r\n      this.rules = {};\r\n      this.hiddenItem = [];\r\n      this.state = {};\r\n    },\r\n    unique(arr1) {\r\n      const res = new Map();\r\n      return arr1.filter((a) => !res.has(a.optCode) && res.set(a.optCode, 1));\r\n    },\r\n    returnCol(\r\n      col = {},\r\n      { rowIndex, colIndex, rowspan, colspan, rm = true, belong } = {}\r\n    ) {\r\n      let self = this;\r\n      col.fieldType = col.fieldType || \"empty\";\r\n\r\n      if (rowspan != void 0) {\r\n        col.rowspan = rowspan;\r\n      } else if (col.rowspan == void 0) {\r\n        col.rowspan = 1;\r\n      }\r\n      if (colspan != void 0) {\r\n        col.colspan = colspan;\r\n      } else if (col.colspan == void 0) {\r\n        col.colspan = 1;\r\n      }\r\n      if (rowIndex != void 0) {\r\n        col.rowIndex = rowIndex;\r\n      }\r\n      if (colIndex != void 0) {\r\n        col.colIndex = colIndex;\r\n      }\r\n      if (belong) {\r\n        col.belong = belong;\r\n        rm = false;\r\n      }\r\n      rm && delete col.belong;\r\n      return col;\r\n    },\r\n    doBeforeForm(form) {\r\n      let len = form.columns;\r\n      let items = form.formItem;\r\n      let arr = [];\r\n      for (let col of items) {\r\n        if (col.hasOwnProperty(\"colspan\") && col.hasOwnProperty(\"rowspan\")) {\r\n          arr.push(col);\r\n          continue;\r\n        }\r\n        let type = col.fieldType;\r\n        if (col.isShow === false) {\r\n          col.rowspan = 1;\r\n          col.colspan = 1;\r\n          arr.push(col);\r\n        } else if (type == \"label\") {\r\n          col.rowspan = 1;\r\n          col.colspan = len;\r\n          arr.push(col);\r\n          for (let index = 1; index < len; index++) {\r\n            arr.push(this.returnCol({}, { colspan: 0, rowspan: 0 }));\r\n          }\r\n        } else {\r\n          col.rowspan = 1;\r\n          col.colspan = col.colspan || 1;\r\n          arr.push(col);\r\n          if (col.colspan && col.colspan > 1) {\r\n            for (let index = 1; index < col.colspan; index++) {\r\n              arr.push(this.returnCol({}, { colspan: 0, rowspan: 0 }));\r\n            }\r\n          }\r\n        }\r\n      }\r\n      form.formItem = arr;\r\n      return form;\r\n    },\r\n    rowColMergeHandler({ row, column, rowIndex, columnIndex }) {\r\n      let col = row[columnIndex + \"\"];\r\n      return col && [col.rowspan, col.colspan];\r\n    },\r\n    resetForm(callback) {\r\n      this.$refs[this.formId || this.option.formId].resetFields();\r\n      if (formUtil.isFunction(callback)) {\r\n        callback();\r\n      }\r\n    },\r\n    clickFunc(item, el) {\r\n      let events = item.events;\r\n      for (let i in events) {\r\n        if (\r\n          this.option.formDisabled !== true &&\r\n          item.disabled !== true &&\r\n          events[i].type === \"click\" &&\r\n          formUtil.parentVmExist(this, events[i].callback)\r\n        ) {\r\n          this.parentVm._self[events[i].callback](el);\r\n        }\r\n      }\r\n    },\r\n    validateForm(callback) {\r\n      this.$refs[this.formId || this.option.formId].validate((valid) => {\r\n        if (!valid) {\r\n          /* 获取校验失败项并定位到首个失败项 */\r\n          this.$nextTick(() => {\r\n            var isError = document.getElementsByClassName(\"is-error\");\r\n            isError[0].querySelector(\"input\").focus();\r\n          });\r\n        }\r\n        if (formUtil.isFunction(callback)) {\r\n          callback(valid);\r\n        }\r\n      });\r\n    },\r\n    validateField(parm, callback) {\r\n      this.$refs[this.formId || this.option.formId].validateField(parm, (valid) => {\r\n        if (formUtil.isFunction(callback)) {\r\n          callback(valid);\r\n        }\r\n      });\r\n    },\r\n    clearValidate() {\r\n      this.$nextTick(() => {\r\n        if (arguments.length === 0) {\r\n          this.$refs[this.formId || this.option.formId].clearValidate();\r\n        } else if (arguments.length >= 1) {\r\n          this.$refs[this.formId || this.option.formId].clearValidate(arguments[0]);\r\n        }\r\n      });\r\n    },\r\n    getFormItems(formItem) {\r\n      let formItems = [];\r\n      for (let i in formItem) {\r\n        if (formItem[i].fieldType === \"group\") {\r\n          let groupItem = formItem[i].group;\r\n          for (let j in groupItem) {\r\n            formItems.push(groupItem[j]);\r\n          }\r\n        } else {\r\n          formItems.push(formItem[i]);\r\n        }\r\n      }\r\n      return formItems;\r\n    },\r\n    dateFormatType(formField, value, type) {\r\n      try {\r\n        if (this.isEmpty(value)) {\r\n          return value;\r\n        }\r\n        let valueFormat = \"\";\r\n        let format = \"\";\r\n        if (type === \"date\" || type === \"dateGroup\") {\r\n          valueFormat = \"yyyyMMdd\";\r\n          format = \"yyyy-MM-dd\";\r\n        } else if (type === \"datetime\" || type === \"datetimeGroup\") {\r\n          valueFormat = \"yyyyMMdd HH:mm:ss\";\r\n          format = \"yyyy-MM-dd HH:mm:ss\";\r\n        } else {\r\n          return value;\r\n        }\r\n        if (!this.isEmpty(formField.dateFormat)) {\r\n          if (!this.isEmpty(formField.dateFormat.valueFormat)) {\r\n            valueFormat = formField.dateFormat.valueFormat;\r\n          }\r\n          if (!this.isEmpty(formField.dateFormat.format)) {\r\n            format = formField.dateFormat.format;\r\n          }\r\n        }\r\n        value = formUtil.dateFormat(formUtil.formatDate(value, valueFormat), format);\r\n        return value;\r\n      } catch (error) {\r\n        console.error(formField.fieldName + \"日期数据解析错误\");\r\n        return value;\r\n      }\r\n    },\r\n    async setFormValue(key, value) {\r\n      if (key instanceof Object) {\r\n        for (let i in key) {\r\n          this.setFormValue(i, key[i]);\r\n        }\r\n        this.isSetFormValue = true;\r\n      } else {\r\n        let tmp = {\r\n          key,\r\n          value,\r\n        };\r\n        if (!this.setWaitData(\"setFormValue\", tmp)) {\r\n          return;\r\n        }\r\n        if (value == null || typeof value == \"undefined\") {\r\n          if (this.formData[key] == null || typeof this.formData[key] == \"undefined\") {\r\n            value = \"\";\r\n          } else {\r\n            value = this.formData[key];\r\n          }\r\n        }\r\n        let formItem = this.option.formItem;\r\n        let formItems = this.getFormItems(formItem);\r\n        for (let i in formItems) {\r\n          let formField = formItems[i];\r\n          if (\r\n            formField !== null &&\r\n            (key === formField.fieldName ||\r\n              key === formField.endFieldName ||\r\n              key === formField.fieldDesc)\r\n          ) {\r\n            this.$set(this.formDataReal, key, value);\r\n            if (\r\n              formField.fieldType === \"checkbox\" ||\r\n              formField.fieldType === \"multipleSelection\"\r\n            ) {\r\n              let checkValue = [];\r\n              if (!this.isEmpty(value)) {\r\n                //防止value不是string类型报错\r\n                if (typeof value !== \"string\") {\r\n                  value = value.toString();\r\n                }\r\n                let checkArray = value.split(\"|\");\r\n                for (let k in checkArray) {\r\n                  if (!this.isEmpty(checkArray[k])) {\r\n                    checkValue.push(checkArray[k]);\r\n                  }\r\n                }\r\n              }\r\n              value = checkValue;\r\n            } else if (formField.fieldType === \"cascader\") {\r\n              // if (this.option.query === \"query\") {\r\n              //   let _this = formField;\r\n              //   if (formField.library.url) {\r\n              //     //从库中选择\r\n              //     value = await this.getCascaderData(value, formField);\r\n              //   } else {\r\n              //     value = this.getCascaderDefaultData(value, formField);\r\n              //   }\r\n              // } else {\r\n              value = value || \"\";\r\n              let checkValue = [];\r\n              if (formField.multiple) {\r\n                //多选\r\n                let checkArray = value.split(\"|\");\r\n                for (let k in checkArray) {\r\n                  if (!this.isEmpty(checkArray[k])) {\r\n                    checkValue.push(checkArray[k]);\r\n                  }\r\n                }\r\n              } else {\r\n                //单选\r\n                let checkArray = value.split(\",\");\r\n                for (let k in checkArray) {\r\n                  if (!this.isEmpty(checkArray[k])) {\r\n                    checkValue.push(checkArray[k]);\r\n                  }\r\n                }\r\n              }\r\n              value = checkValue;\r\n              // }\r\n            } else if (formField.fieldType === \"text\" && value) {\r\n              if (formField.dataType === \"money(yuan)\") {\r\n                value = formUtil.formatMoney(value);\r\n              } else if (formField.dataType === \"money(wan)\") {\r\n                value = formUtil.numDiv(value, 10000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (formField.dataType === \"money(baiwan)\") {\r\n                value = formUtil.numDiv(value, 1000000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (formField.dataType === \"money(yi)\") {\r\n                value = formUtil.numDiv(value, 100000000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (formField.dataType === \"percentile\") {\r\n                value = formUtil.numMulti(value, 100);\r\n              } else if (formField.dataType === \"thousand\") {\r\n                value = formUtil.numMulti(value, 1000);\r\n              } else if (formField.dataType === \"tenThousand\") {\r\n                value = formUtil.numMulti(value, 10000);\r\n              }\r\n            }\r\n            if (this.option.query === \"query\") {\r\n              let parmArray = this.pramDicItem[formField.fieldName];\r\n              if (\r\n                formField.fieldType === \"checkbox\" ||\r\n                formField.fieldType === \"multipleSelection\"\r\n              ) {\r\n                if (formField.optionType === \"1\" && value) {\r\n                  let checkBoxValue = \"\";\r\n                  const selectItem = this.unique(formField.dicItem);\r\n                  for (let h in value) {\r\n                    if (!this.isEmpty(value[h])) {\r\n                      for (let dic of selectItem) {\r\n                        if (dic.optCode == value[h]) {\r\n                          if (checkBoxValue === \"\") {\r\n                            checkBoxValue = dic.optName;\r\n                          } else {\r\n                            checkBoxValue = checkBoxValue + \"|\" + dic.optName;\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                  value = checkBoxValue;\r\n                } else if (formField.optionType == \"2\" && value) {\r\n                  let checkBoxValue = \"\";\r\n                  for (let h in value) {\r\n                    if (!this.isEmpty(value[h])) {\r\n                      for (let i in parmArray) {\r\n                        if (parmArray[i][\"optCode\"] === value[h]) {\r\n                          if (checkBoxValue === \"\") {\r\n                            checkBoxValue = parmArray[i][\"optName\"];\r\n                          } else {\r\n                            checkBoxValue = parmArray[i][\"optName\"] + \"|\" + checkBoxValue;\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                  value = checkBoxValue;\r\n                } else if (formField.optionType === \"3\" && value) {\r\n                  let checkBoxValue = \"\";\r\n                  let url = formField.library.url;\r\n                  url = formUtil.converUrl(url);\r\n                  const reponse = await sync.getParameter(\r\n                    url,\r\n                    formField.library.searchData,\r\n                    true\r\n                  );\r\n                  let options = [];\r\n                  if (reponse.code === 0) {\r\n                    let list = reponse.list;\r\n                    let realField = \"optCode\";\r\n                    let showField = \"optName\";\r\n                    if (\r\n                      formField.library.realField !== undefined &&\r\n                      formField.library.realField !== null &&\r\n                      formField.library.realField !== \"\"\r\n                    ) {\r\n                      realField = formField.library.realField;\r\n                    }\r\n                    if (\r\n                      formField.library.showField !== undefined &&\r\n                      formField.library.showField !== null &&\r\n                      formField.library.showField !== \"\"\r\n                    ) {\r\n                      showField = formField.library.showField;\r\n                    }\r\n                    for (let i in list) {\r\n                      let option = {\r\n                        value: list[i][realField] + \"\",\r\n                        label: list[i][showField],\r\n                      };\r\n                      options.push(option);\r\n                    }\r\n                  } else {\r\n                    console.error(reponse.msg);\r\n                  }\r\n                  for (let h in value) {\r\n                    if (!this.isEmpty(value[h])) {\r\n                      for (let i in options) {\r\n                        if (options[i].value === value[h]) {\r\n                          if (checkBoxValue === \"\") {\r\n                            checkBoxValue = options[i].label;\r\n                          } else {\r\n                            checkBoxValue = options[i].label + \"|\" + checkBoxValue;\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                  value = checkBoxValue;\r\n                }\r\n              } else if (formField.fieldType === \"switch\") {\r\n                if (formField.switchValue.activeValue === value) {\r\n                  value = formField.switchValue.activeText || \"是\";\r\n                } else {\r\n                  value = formField.switchValue.inActiveText || \"否\";\r\n                }\r\n              } else if (\r\n                formField.fieldType === \"date\" ||\r\n                formField.fieldType === \"datetime\" ||\r\n                formField.fieldType === \"dateGroup\" ||\r\n                formField.fieldType === \"datetimeGroup\" ||\r\n                formField.fieldType === \"timeGroup\"\r\n              ) {\r\n                value = this.dateFormatType(formField, value, formField.fieldType);\r\n              } else if (formField.fieldType === \"select\") {\r\n                if (formField.optionType === \"1\" && value) {\r\n                  // const selectItem = this.unique(formField.dicItem);\r\n                  // for (let dic of selectItem) {\r\n                  //   if (dic.optCode == value) {\r\n                  //     value = dic.optName;\r\n                  //     break;\r\n                  //   }\r\n                  // }\r\n                } else if (formField.optionType == \"2\" && value) {\r\n                  // let checkBoxValue = \"\";\r\n                  // for (let i in parmArray) {\r\n                  //   if (parmArray[i][\"optCode\"] === value) {\r\n                  //     value = parmArray[i][\"optName\"];\r\n                  //   }\r\n                  // }\r\n                } else if (formField.optionType === \"3\" && value) {\r\n                  let checkBoxValue = \"\";\r\n                  let url = formField.library.url;\r\n                  url = formUtil.converUrl(url);\r\n                  const reponse = await sync.getParameter(\r\n                    url,\r\n                    formField.library.searchData,\r\n                    true\r\n                  );\r\n                  let options = [];\r\n                  if (reponse.code === 0) {\r\n                    let list = reponse.list;\r\n                    let realField = \"optCode\";\r\n                    let showField = \"optName\";\r\n                    if (\r\n                      formField.library.realField !== undefined &&\r\n                      formField.library.realField !== null &&\r\n                      formField.library.realField !== \"\"\r\n                    ) {\r\n                      realField = formField.library.realField;\r\n                    }\r\n                    if (\r\n                      formField.library.showField !== undefined &&\r\n                      formField.library.showField !== null &&\r\n                      formField.library.showField !== \"\"\r\n                    ) {\r\n                      showField = formField.library.showField;\r\n                    }\r\n                    for (let i in list) {\r\n                      let option = {\r\n                        value: list[i][realField],\r\n                        label: list[i][showField],\r\n                      };\r\n                      options.push(option);\r\n                    }\r\n                  } else {\r\n                    console.error(reponse.msg);\r\n                  }\r\n                  for (let i in options) {\r\n                    if (options[i].value === value) {\r\n                      value = options[i].label;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                for (let i in parmArray) {\r\n                  if (parmArray[i][\"optCode\"] === value) {\r\n                    value = parmArray[i][\"optName\"];\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (\r\n              (this.option.query === \"query\" || this.option.formDisabled === true) &&\r\n              !this.isEmpty(formField.formatter) &&\r\n              formUtil.parentVmExist(this, formField.formatter)\r\n            ) {\r\n              value = this.parentVm._self[formField.formatter](value);\r\n            }\r\n            this.$set(this.formData, key, value);\r\n            this.$set(this.setFormData, key, value);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getFormValue() {\r\n      let formItem = this.option.formItem;\r\n      let data = JSON.parse(JSON.stringify(this.formData)); //深度copy\r\n      if (arguments.length === 0) {\r\n        for (let j in data) {\r\n          let formItems = this.getFormItems(formItem);\r\n          for (let i in formItems) {\r\n            let formField = formItems[i];\r\n            if (\r\n              formField !== null &&\r\n              (j === formField.fieldName || j === formField.endFieldName)\r\n            ) {\r\n              if (\r\n                formField.fieldType === \"checkbox\" ||\r\n                formField.fieldType === \"multipleSelection\"\r\n              ) {\r\n                if (this.option.query != \"query\") {\r\n                  data[j] = (data[j] || []).join(\"|\");\r\n                }\r\n              } else if (formField.fieldType === \"text\") {\r\n                let formTextValue = data[j];\r\n                if (formField.dataType === \"money(yuan)\") {\r\n                  formTextValue = formUtil.delcommafy(formTextValue);\r\n                } else if (formField.dataType === \"money(wan)\") {\r\n                  formTextValue = formUtil.delcommafy(formTextValue);\r\n                  formTextValue = formUtil.numMulti(formTextValue, 10000);\r\n                } else if (formField.dataType === \"money(baiwan)\") {\r\n                  formTextValue = formUtil.delcommafy(formTextValue);\r\n                  formTextValue = formUtil.numMulti(formTextValue, 1000000);\r\n                } else if (formField.dataType === \"money(yi)\") {\r\n                  formTextValue = formUtil.delcommafy(formTextValue);\r\n                  formTextValue = formUtil.numMulti(formTextValue, 100000000);\r\n                } else if (formField.dataType === \"percentile\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 100);\r\n                } else if (formField.dataType === \"thousand\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 1000);\r\n                } else if (formField.dataType === \"tenThousand\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 10000);\r\n                }\r\n                data[j] = formTextValue;\r\n              } else if (formField.fieldType === \"cascader\") {\r\n                if (this.option.query != \"query\") {\r\n                  if (formField.multiple) {\r\n                    //多选\r\n                    data[j] = data[formField.fieldName].join(\"|\");\r\n                  } else {\r\n                    //单选\r\n                    data[j] = data[formField.fieldName].join(\",\");\r\n                  }\r\n                }\r\n              } else if (formField.isDialog === true && formField.fieldDesc != \"\") {\r\n                if (formField.fieldDescValue) {\r\n                  data[formField.fieldDesc] = formField.fieldDescValue;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return data;\r\n      } else if (arguments.length >= 1) {\r\n        let result = this.getFormValue();\r\n        if (!this.isEmpty(result)) {\r\n          result = result[arguments[0]];\r\n        }\r\n        return result;\r\n      }\r\n    },\r\n    async getCascaderData(value, formField) {\r\n      let url = formField.library.url;\r\n      url = formUtil.converUrl(url);\r\n      const reponse = await sync.getParameter(url, formField.library.searchData, true);\r\n      if (reponse.code === 0) {\r\n        if (formField.multiple) {\r\n          //多选\r\n          let checkAllArray = value.split(\"|\");\r\n          var res = \"\";\r\n          for (let k in checkAllArray) {\r\n            let checkArray = checkAllArray[k].split(\",\");\r\n            if (k > 0) {\r\n              res += \"|\";\r\n            }\r\n            //是否显示全部\r\n            if (formField.showAll) {\r\n              var separator = \"/\";\r\n              if (formField.separator != null) {\r\n                separator = formField.separator;\r\n              }\r\n              res += this.getCascaderAllValueForDB(\r\n                checkArray,\r\n                reponse.list,\r\n                formField,\r\n                separator\r\n              );\r\n            } else {\r\n              res += this.getCascaderValueForDB(checkArray, reponse.list, formField);\r\n            }\r\n          }\r\n          return res;\r\n        } else {\r\n          //单选\r\n          let checkArray = value.split(\",\");\r\n          //是否显示全部\r\n          if (formField.showAll) {\r\n            var separator = \"/\";\r\n            if (formField.separator != null) {\r\n              separator = formField.separator;\r\n            }\r\n            return this.getCascaderAllValueForDB(\r\n              checkArray,\r\n              reponse.list,\r\n              formField,\r\n              separator\r\n            );\r\n          } else {\r\n            return this.getCascaderValueForDB(checkArray, reponse.list, formField);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getCascaderDefaultData(value, formField) {\r\n      if (formField.multiple) {\r\n        //多选\r\n        let checkAllArray = value.split(\"|\");\r\n        var res = \"\";\r\n        for (let k in checkAllArray) {\r\n          let checkArray = checkAllArray[k].split(\",\");\r\n          if (k > 0) {\r\n            res += \"|\";\r\n          }\r\n          //是否显示全部\r\n          if (formField.showAll) {\r\n            var separator = \"/\";\r\n            if (formField.separator != null) {\r\n              separator = formField.separator;\r\n            }\r\n            res += this.getCascaderAllValueByKey(\r\n              formField.dicItem,\r\n              checkArray[checkArray.length - 1],\r\n              separator\r\n            );\r\n          } else {\r\n            res += this.getCascaderValueByKey(\r\n              formField.dicItem,\r\n              checkArray[checkArray.length - 1]\r\n            );\r\n          }\r\n        }\r\n        return res;\r\n      } else {\r\n        //单选\r\n        let checkArray = value.split(\",\");\r\n        //是否显示全部\r\n        if (formField.showAll) {\r\n          var separator = \"/\";\r\n          if (formField.separator != null) {\r\n            separator = formField.separator;\r\n          }\r\n          return this.getCascaderAllValueByKey(\r\n            formField.dicItem,\r\n            checkArray[checkArray.length - 1],\r\n            separator\r\n          );\r\n        } else {\r\n          return this.getCascaderValueByKey(formField.dicItem, checkArray);\r\n        }\r\n      }\r\n    },\r\n    getCascaderValueForDB(checkArray, list, formField) {\r\n      for (var i = 0; i < list.length; i++) {\r\n        if (list[i][formField.library.realField] == checkArray[checkArray.length - 1]) {\r\n          return list[i][formField.library.showField];\r\n        }\r\n      }\r\n    },\r\n    getCascaderAllValueForDB(checkArray, list, formField, separator) {\r\n      var value = \"\";\r\n      for (var j = 0; j < checkArray.length; j++) {\r\n        for (var i = 0; i < list.length; i++) {\r\n          if (list[i][formField.library.realField] == checkArray[j]) {\r\n            if (value != \"\") {\r\n              value = value + separator + list[i][formField.library.showField];\r\n            } else {\r\n              value = list[i][formField.library.showField];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return value;\r\n    },\r\n    getCascaderValueByKey(data, field) {\r\n      var value = \"\";\r\n      for (let key in data) {\r\n        if (data[key].optCode === field) {\r\n          return data[key].optName;\r\n        } else {\r\n          if (data[key].children != null && data[key].children.length != 0) {\r\n            value = this.getCascaderValueByKey(data[key].children, field);\r\n            if (value != \"\" && value != null) {\r\n              return value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getCascaderAllValueByKey(data, field, separator) {\r\n      var value = \"\";\r\n      for (let key in data) {\r\n        if (data[key].optCode === field) {\r\n          return data[key].optName;\r\n        } else {\r\n          if (data[key].children != null && data[key].children.length != 0) {\r\n            value = this.getCascaderAllValueByKey(data[key].children, field, separator);\r\n            if (value != \"\" && value != null) {\r\n              return data[key].optName + separator + value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    attr() {\r\n      let formItem = this.option.formItem;\r\n      if (arguments.length === 2) {\r\n        let tmp = {\r\n          key: arguments[0],\r\n          value: arguments[1],\r\n        };\r\n        if (!this.setWaitData(\"attr\", tmp)) {\r\n          return;\r\n        }\r\n        let formField = null;\r\n        for (let i in formItem) {\r\n          if (formItem[i].fieldType === \"group\") {\r\n            let groupItem = formItem[i].group;\r\n            for (let j in groupItem) {\r\n              if (arguments[0] === groupItem[j].fieldName) {\r\n                formField = groupItem[j];\r\n              }\r\n            }\r\n          } else {\r\n            if (arguments[0] === formItem[i].fieldName) {\r\n              formField = formItem[i];\r\n            }\r\n          }\r\n        }\r\n        let value = \"\";\r\n        if (formField !== null) {\r\n          if (arguments[1] === \"dicItem\") {\r\n            value = this.pramDicItem[arguments[0]];\r\n          } else if (arguments[1] === \"events\") {\r\n            value = this.events[arguments[0]];\r\n          } else if (arguments[1] === \"rules\") {\r\n            value = this.rules[arguments[0]];\r\n          } else {\r\n            value = formField[arguments[1]];\r\n          }\r\n        }\r\n        return value;\r\n      } else if (arguments.length >= 3) {\r\n        let tmp = {\r\n          key: arguments[0] + \"_\" + arguments[1],\r\n          value: arguments[2],\r\n        };\r\n        if (!this.setWaitData(\"attr\", tmp)) {\r\n          return;\r\n        }\r\n        let formField = null;\r\n        for (let i in formItem) {\r\n          if (formItem[i].fieldType === \"group\") {\r\n            let groupItem = formItem[i].group;\r\n            for (let j in groupItem) {\r\n              if (arguments[0] === groupItem[j].fieldName) {\r\n                formField = groupItem[j];\r\n                formField[\"formItem\"] = formItem[i];\r\n              }\r\n            }\r\n          } else {\r\n            if (arguments[0] === formItem[i].fieldName) {\r\n              formField = formItem[i];\r\n            }\r\n          }\r\n        }\r\n        if (formField !== null) {\r\n          let label = formField.label;\r\n          if (arguments[1] === \"dicItem\") {\r\n            this.$set(this.pramDicItem, arguments[0], arguments[2]);\r\n          } else if (arguments[1] === \"events\") {\r\n            //解析事件\r\n            try {\r\n              let eventsArray = arguments[2];\r\n              let event = {};\r\n              for (let evetIndex in eventsArray) {\r\n                if (\r\n                  !this.isEmpty(eventsArray[evetIndex].type) &&\r\n                  eventsArray[evetIndex].type !== \"click\" &&\r\n                  formUtil.parentVmExist(this, eventsArray[evetIndex].callback)\r\n                ) {\r\n                  event[eventsArray[evetIndex].type] = this.parentVm._self[\r\n                    eventsArray[evetIndex].callback\r\n                  ];\r\n                }\r\n              }\r\n              this.$set(this.events, formField.fieldName, event);\r\n            } catch (error) {\r\n              console.error(\"事件解析错误：\" + error);\r\n              this.$set(this.events, formField.fieldName, {});\r\n            }\r\n          } else if (arguments[1] === \"rules\") {\r\n            //解析规则\r\n            try {\r\n              //解析规则\r\n              let formRules = arguments[2];\r\n              let fieldNameRules = [];\r\n              if (formField.fieldType === \"text\") {\r\n                let type = formField.dataType;\r\n                if (type === \"int\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateInt;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"long\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateLong;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (\r\n                  type == \"double(2)\" ||\r\n                  type == \"double(4)\" ||\r\n                  type == \"double(6)\" ||\r\n                  type == \"money(fen)\" ||\r\n                  type == \"money(jiao)\" ||\r\n                  type == \"percentile\" ||\r\n                  type === \"thousand\" ||\r\n                  type == \"tenThousand\"\r\n                ) {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateNumber;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"float\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateFloat;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"boolean\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateBoolean;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (\r\n                  type === \"money(yuan)\" ||\r\n                  type == \"money(wan)\" ||\r\n                  type == \"money(baiwan)\" ||\r\n                  type == \"money(yi)\"\r\n                ) {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateMoney;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                }\r\n              }\r\n\r\n              for (let k in formRules) {\r\n                let fieldNameRule = {};\r\n                let trigger = \"blur\";\r\n                let message = \"\";\r\n                let type = \"\";\r\n                if (formRules[k].type === \"required\") {\r\n                  if (!this.isEmpty(formField[\"formItem\"])) {\r\n                    formField[\"formItem\"].required = true;\r\n                  }\r\n                  fieldNameRule[\"required\"] = true;\r\n                  trigger = \"blur\";\r\n                  message = label + \"不能为空\";\r\n                } else if (formRules[k].type === \"validator\") {\r\n                  if (formUtil.parentVmExist(this, formRules[k].validator)) {\r\n                    fieldNameRule[\"validator\"] = this.parentVm._self[\r\n                      formRules[k].validator\r\n                    ];\r\n                  }\r\n                  trigger = \"blur\";\r\n                } else if (formRules[k].type === \"number\") {\r\n                  trigger = \"blur\";\r\n                  var ruleExpr = formRules[k].ruleExpr;\r\n                  fieldNameRule[\"validator\"] = (rule, value, callback) => {\r\n                    if (!value) {\r\n                      callback();\r\n                      return;\r\n                    }\r\n                    let item = null;\r\n                    for (let i in this.option.formItem) {\r\n                      if (this.option.formItem[i].fieldName == rule.field) {\r\n                        item = this.option.formItem[i];\r\n                      }\r\n                    }\r\n                    if (item.dataType == \"money(yuan)\") {\r\n                      value = formUtil.delcommafy(value);\r\n                    } else if (item.dataType == \"money(wan)\") {\r\n                      value = formUtil.delcommafy(value);\r\n                      value = formUtil.numMulti(value, 10000);\r\n                    } else if (item.dataType == \"money(baiwan)\") {\r\n                      value = formUtil.delcommafy(value);\r\n                      value = formUtil.numMulti(value, 1000000);\r\n                    } else if (item.dataType == \"money(yi)\") {\r\n                      value = formUtil.delcommafy(value);\r\n                      value = formUtil.numMulti(value, 100000000);\r\n                    }\r\n                    // console.log(ruleExpr);\r\n                    let formData = this.getFormValue();\r\n                    let expr = ruleExpr.replace(new RegExp(\"\\\\$\\\\{this\\\\}\", \"gm\"), value);\r\n                    for (let fieldName in formData) {\r\n                      if (expr.indexOf(fieldName) == -1) {\r\n                        continue;\r\n                      }\r\n                      let fieldValue = formData[fieldName];\r\n                      if (fieldValue == \"\" || isNaN(fieldValue)) {\r\n                        fieldValue = 0;\r\n                      }\r\n                      expr = expr.replace(\r\n                        new RegExp(\"\\\\$\\\\{\" + fieldName + \"\\\\}\", \"gm\"),\r\n                        fieldValue\r\n                      );\r\n                    }\r\n                    // console.log(expr);\r\n                    let validFlag = eval(expr);\r\n                    if (validFlag) {\r\n                      callback();\r\n                    } else {\r\n                      callback(new Error(rule.message));\r\n                    }\r\n                  };\r\n                } else if (formRules[k].type === \"date\") {\r\n                  trigger = \"blur\";\r\n                  // fieldNameRule[\"validator\"] = formUtil.validateDate;\r\n                  var ruleDateExpr = formRules[k].ruleExpr;\r\n                  var resDate = (fieldName, value) => {\r\n                    let formItem = this.option.formItem;\r\n                    for (let i in formItem) {\r\n                      let item = formItem[i];\r\n                      if (\r\n                        item.fieldName == fieldName &&\r\n                        (item.fieldType == \"date\" ||\r\n                          item.fieldType == \"time\" ||\r\n                          item.fieldType == \"datetime\")\r\n                      ) {\r\n                        let format = item.dateFormat.format;\r\n                        let valueFormat = item.dateFormat.valueFormat;\r\n                        let date = formUtil.formatDate(value, valueFormat);\r\n                        if (date && date instanceof Date && !isNaN(date.getTime())) {\r\n                          return date.getTime();\r\n                        } else {\r\n                          return value;\r\n                        }\r\n                      }\r\n                    }\r\n                  };\r\n                  fieldNameRule[\"validator\"] = (rule, value, callback) => {\r\n                    if (!value) {\r\n                      callback();\r\n                      return;\r\n                    }\r\n                    // console.log(ruleDateExpr);\r\n                    let formData = this.getFormValue();\r\n                    value = resDate(arguments[0], value);\r\n                    let expr = ruleDateExpr.replace(\r\n                      new RegExp(\"\\\\$\\\\{this\\\\}\", \"gm\"),\r\n                      value\r\n                    );\r\n                    for (let fieldName in formData) {\r\n                      if (expr.indexOf(fieldName) == -1) {\r\n                        continue;\r\n                      }\r\n\r\n                      let fieldValue = formData[fieldName];\r\n                      fieldValue = resDate(fieldName, fieldValue);\r\n                      expr = expr.replace(\r\n                        new RegExp(\"\\\\$\\\\{\" + fieldName + \"\\\\}\", \"gm\"),\r\n                        fieldValue\r\n                      );\r\n                    }\r\n                    try {\r\n                      // console.log(expr);\r\n                      let validFlag = eval(expr);\r\n                      if (validFlag) {\r\n                        callback();\r\n                      } else {\r\n                        callback(new Error(rule.message));\r\n                      }\r\n                    } catch (error) {}\r\n                  };\r\n                } else if (formRules[k].type === \"email\") {\r\n                  trigger = \"blur\";\r\n                  message = label + \"格式不正确\";\r\n                  type = \"email\";\r\n                } else if (formRules[k].type === \"phone\") {\r\n                  trigger = \"blur\";\r\n                  message = \"请输入正确的手机号码\";\r\n                  fieldNameRule[\r\n                    \"pattern\"\r\n                  ] = /^((13[0-9])|(14[5-9])|(15([0-3]|[5-9]))|(16[6-7])|(17[1-8])|(18[0-9])|(19[1|3])|(19[5|6])|(19[8|9]))\\d{8}$/;\r\n                } else if (formRules[k].type === \"mobile\") {\r\n                  trigger = \"blur\";\r\n                  message = \"请输入正确的电话\";\r\n                  fieldNameRule[\r\n                    \"pattern\"\r\n                  ] = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/;\r\n                } else if (formRules[k].type === \"idNo\") {\r\n                  trigger = \"blur\";\r\n                  fieldNameRule[\"validator\"] = formUtil.validateIdNo;\r\n                } else {\r\n                  //continue\r\n                }\r\n\r\n                if (\r\n                  formField.fieldType === \"checkbox\" ||\r\n                  formField.fieldType === \"multipleSelection\"\r\n                ) {\r\n                  type = \"array\";\r\n                }\r\n                if (!this.isEmpty(formRules[k].min) && !this.isEmpty(formRules[k].max)) {\r\n                  fieldNameRule[\"min\"] = formRules[k].min;\r\n                  fieldNameRule[\"max\"] = formRules[k].max;\r\n                  message =\r\n                    label +\r\n                    \"长度必须大于等于\" +\r\n                    formRules[k].min +\r\n                    \"并且小于等于\" +\r\n                    formRules[k].max;\r\n                } else if (!this.isEmpty(formRules[k].min)) {\r\n                  fieldNameRule[\"min\"] = formRules[k].min;\r\n                  message = label + \"长度必须大于等于\" + formRules[k].min;\r\n                } else if (!this.isEmpty(formRules[k].max)) {\r\n                  fieldNameRule[\"max\"] = formRules[k].max;\r\n                  message = label + \"长度必须小于等于\" + formRules[k].max;\r\n                }\r\n\r\n                if (!this.isEmpty(formRules[k].message)) {\r\n                  message = formRules[k].message;\r\n                }\r\n                fieldNameRule[\"message\"] = message;\r\n\r\n                if (!this.isEmpty(type)) {\r\n                  fieldNameRule[\"type\"] = type;\r\n                }\r\n\r\n                if (!this.isEmpty(formRules[k].trigger)) {\r\n                  trigger = formRules[k].trigger;\r\n                }\r\n                fieldNameRule[\"trigger\"] = trigger;\r\n\r\n                fieldNameRules.push(fieldNameRule);\r\n              }\r\n              this.$set(this.rules, formField.fieldName, fieldNameRules);\r\n            } catch (error) {\r\n              console.error(\"规则解析错误：\" + error);\r\n              this.$set(this.rules, formField.fieldName, []);\r\n            }\r\n          } else {\r\n            let td = this.tableData;\r\n            label: for (let r in td) {\r\n              let row = td[r];\r\n              for (let c in row) {\r\n                if (row[c].fieldName == formField.fieldName) {\r\n                  row[c][arguments[1]] = arguments[2];\r\n                  // if (arguments[1] == \"isShow\") {\r\n                  //   row[c][\"isOriginal\"] = true;\r\n                  // }\r\n                  break label;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async initForm(callback) {\r\n      if (this.formId) {\r\n        try {\r\n          let jsonData = await axios.get(\r\n            formUtil.getFormProfilePath() + \"/form/\" + this.formId + \".json\"\r\n          );\r\n          if (jsonData) {\r\n            this.option = JSON.parse(JSON.stringify(this.doBeforeForm(jsonData.data)));\r\n          } else {\r\n            this.option = JSON.parse(\r\n              JSON.stringify(this.doBeforeForm(this.$busDatas[this.formId]))\r\n            );\r\n          }\r\n        } catch (error) {\r\n          if (!this.initOption) {\r\n            this.$message.error(\r\n              \"未找到 [ \" + this.formId + \" ] 配置文件或配置文件格式错误\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n      if (this.initOption) {\r\n        this.initOption = this.doBeforeForm(this.initOption);\r\n        this.option = Object.assign(this.option, this.initOption);\r\n      }\r\n\r\n      this.initTableData();\r\n      //处理隐藏域\r\n      this.hiddenItem = this.option.formItem.filter((item) => {\r\n        if (item.state && item.state.length > 0) {\r\n          for (let sts of item.state) {\r\n            if (sts.isShow !== false) {\r\n              return false;\r\n            }\r\n          }\r\n          item.isHiddenField = true;\r\n          return true;\r\n        } else if (item.isShow === false) {\r\n          item.isHiddenField = true;\r\n          return true;\r\n        }\r\n      });\r\n\r\n      let formItem = this.option.formItem;\r\n      let dicKeyArray = [];\r\n      let formItems = this.getFormItems(formItem);\r\n      for (let i in formItems) {\r\n        let item = formItems[i];\r\n        if (item.fieldType === \"empty\" || item.isHiddenField === true) {\r\n          continue;\r\n        }\r\n        //处理状态\r\n        let state = item.state;\r\n        let use = item.useState;\r\n        if (state && use) {\r\n          for (let sts of state) {\r\n            if (sts.id == use) {\r\n              //将激活的状态和基础数据合并\r\n              item = Object.assign(item, sts);\r\n            } else {\r\n              //解析字典项\r\n              let dicKey = sts.dicKey;\r\n              if (!this.isEmpty(dicKey) && sts.optionType !== \"1\") {\r\n                // setFormValueFlag = true;\r\n                let dicKeyObject = {};\r\n                dicKeyObject.dicKey = dicKey;\r\n                dicKeyObject.fieldName = item.fieldName;\r\n                dicKeyObject.value = item.value;\r\n                dicKeyArray.push(dicKeyObject);\r\n              } else {\r\n                this.$set(this.pramDicItem, sts.fieldName, sts.dicItem);\r\n              }\r\n            }\r\n            //处理condition\r\n            let condition = sts.condition;\r\n            //处理条件，拿到具体的字段名称数组\r\n            let key = Array.from(formUtil.doExpression(condition));\r\n            //遍历字段名称，用于进行监听\r\n            for (let name of key) {\r\n              //都添加这个全局属性下\r\n              if (this.state[name]) {\r\n                this.state[name].push(Object.assign({}, item, sts));\r\n              } else {\r\n                this.state[name] = [Object.assign({}, item, sts)];\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (\r\n          Array.isArray(item.value) &&\r\n          (item.fieldType === \"checkbox\" || item.fieldType === \"multipleSelection\")\r\n        ) {\r\n          item.value = item.value.join(\"|\");\r\n        }\r\n        if (Array.isArray(item.value) && item.fieldType === \"cascader\") {\r\n          if (item.multiple) {\r\n            //多选\r\n            item.value = item.value.join(\"|\");\r\n          } else {\r\n            //单选\r\n            item.value = item.value.join(\",\");\r\n          }\r\n        }\r\n        //解析字典项\r\n        let dicKey = item.dicKey;\r\n        if (!this.isEmpty(dicKey) && item.optionType !== \"1\") {\r\n          // setFormValueFlag = true;\r\n          let dicKeyObject = {};\r\n          dicKeyObject.dicKey = dicKey;\r\n          dicKeyObject.fieldName = item.fieldName;\r\n          dicKeyObject.value = item.value;\r\n          dicKeyArray.push(dicKeyObject);\r\n        } else {\r\n          this.$set(this.pramDicItem, item.fieldName, item.dicItem);\r\n        }\r\n\r\n        //解析事件\r\n        this.attr(item.fieldName, \"events\", item.events);\r\n        //解析规则\r\n        this.attr(item.fieldName, \"rules\", item.rules);\r\n      }\r\n\r\n      //请求字典json文件\r\n      let keyArray = [];\r\n      for (let j in dicKeyArray) {\r\n        keyArray.push(dicKeyArray[j].dicKey);\r\n      }\r\n      keyArray = Array.from(new Set(keyArray));\r\n      if (keyArray.length > 0) {\r\n        this.dicKeyData = await formUtil.getParmDicSync(keyArray);\r\n        for (let k in dicKeyArray) {\r\n          this.$set(\r\n            this.pramDicItem,\r\n            dicKeyArray[k].fieldName,\r\n            this.dicKeyData[dicKeyArray[k].dicKey]\r\n          );\r\n        }\r\n      }\r\n      this.formFlag = true;\r\n\r\n      /* 表单初始化赋值 */\r\n      for (let i in formItems) {\r\n        let item = formItems[i];\r\n        if (item.fieldType === \"empty\") {\r\n          continue;\r\n        }\r\n        if (\r\n          item.fieldType === \"dateGroup\" ||\r\n          item.fieldType === \"datetimeGroup\" ||\r\n          item.fieldType === \"timeGroup\"\r\n        ) {\r\n          let value = [\"\", \"\"];\r\n          if (Array.isArray(item.value)) {\r\n            for (let d = 0; d < item.value.length; d++) {\r\n              value[d] = item.value[d];\r\n            }\r\n          }\r\n          if (!this.formData[item.fieldName]) {\r\n            await this.setFormValue(item.fieldName, value[0]);\r\n          }\r\n          if (!this.formData[item.endFieldName]) {\r\n            await this.setFormValue(item.endFieldName, value[1]);\r\n          }\r\n        } else {\r\n          if (!this.formData[item.fieldName]) {\r\n            await this.setFormValue(item.fieldName, item.value);\r\n          }\r\n        }\r\n      }\r\n      //表单初始化后将 页面中setFormValue的数据赋值\r\n      await this.getWaitData();\r\n      //初始化计算表单状态\r\n      this.changeState();\r\n      //清空校验\r\n      this.clearValidate();\r\n\r\n      this.$nextTick(() => {\r\n        //表单宽度适配, 单列 16栅格，双列 20 栅格\r\n        try {\r\n          let container = this.$refs[this.formId || this.option.formId].$parent.$parent\r\n            .$parent;\r\n          if (container && container.$el.className == \"el-container\") {\r\n            let clsStr = container.$el.className;\r\n            if (this.option.columns == 1) {\r\n              clsStr += \" mf-16\";\r\n            } else if (this.option.columns == 2) {\r\n              clsStr += \" mf-20\";\r\n            }\r\n            container.$el.className = clsStr;\r\n          }\r\n        } catch (err) {}\r\n        this.$emit(\"initCallBack\", this.$refs[this.formId || this.option.formId]);\r\n        if (typeof callback === \"function\") {\r\n          callback(this.$refs[this.formId || this.option.formId]);\r\n        }\r\n\r\n        this.isLoad = true;\r\n      });\r\n    },\r\n    changeState(val, key) {\r\n      //表单数据\r\n      let formData = val || this.formData;\r\n      //拷贝原始表格数据\r\n      let otd = this.clone(this.originalTableData);\r\n      //判断如果操作的当前字段是会触发状态则只刷新table数据\r\n      if (!this.isSetFormValue && key && !this.state[key]) {\r\n        return;\r\n      }\r\n      this.isSetFormValue = false;\r\n      //获取所有状态字段\r\n      let fieldNames = Object.keys(this.state);\r\n      for (let fieldName of fieldNames) {\r\n        //获取状态数组\r\n        let stateArr = this.state[fieldName];\r\n\r\n        for (let item of stateArr) {\r\n          //获取条件表达式\r\n          let condition = item.condition;\r\n          //获取条件的字段\r\n          let keys = formUtil.doExpression(condition);\r\n          //转换条件\r\n          for (let name of keys.values()) {\r\n            //字段真实值\r\n            let value = formData[name];\r\n            //判断是否综合视图页面\r\n            if (this.option.query == \"query\") {\r\n              //获取字段配置信息\r\n              value = this.formDataReal[name];\r\n            }\r\n            //数字\r\n            if (!isNaN(name)) {\r\n              condition = condition.replaceAll(\"${\" + name + \"}\", value);\r\n            }\r\n            //boolean\r\n            else if (\r\n              name === true ||\r\n              name === false ||\r\n              name === \"true\" ||\r\n              name === \"false\"\r\n            ) {\r\n              condition = condition.replaceAll(\"${\" + name + \"}\", value);\r\n            }\r\n            //string\r\n            else {\r\n              condition = condition.replaceAll(\"${\" + name + \"}\", `'${value}'`);\r\n            }\r\n          }\r\n          //判断条件是否触发\r\n          if (eval(condition)) {\r\n            //解析事件\r\n            this.attr(item.fieldName, \"events\", item.events);\r\n            //解析规则\r\n            this.attr(item.fieldName, \"rules\", item.rules);\r\n            //字典项替换\r\n            if (item.dicKey) {\r\n              this.$set(this.pramDicItem, item.fieldName, this.dicKeyData[item.dicKey]);\r\n            }\r\n            let formItem = this.option.formItem.find((field) => {\r\n              if (item.fieldName == field.fieldName) {\r\n                return true;\r\n              } else {\r\n                return false;\r\n              }\r\n            });\r\n            //重新给表单赋值，因为状态切换后会改变表单字段的数据类型\r\n            let value = this.formData[formItem.fieldName];\r\n            if (formItem.fieldType === \"text\") {\r\n              if (formItem.dataType === \"money(yuan)\") {\r\n                value = formUtil.delcommafy(value);\r\n              } else if (formItem.dataType === \"money(wan)\") {\r\n                value = formUtil.delcommafy(value);\r\n                value = formUtil.numMulti(value, 10000);\r\n              } else if (formItem.dataType === \"money(baiwan)\") {\r\n                value = formUtil.delcommafy(value);\r\n                value = formUtil.numMulti(value, 1000000);\r\n              } else if (formItem.dataType === \"money(yi)\") {\r\n                value = formUtil.delcommafy(value);\r\n                value = formUtil.numMulti(value, 100000000);\r\n              } else if (formItem.dataType === \"percentile\") {\r\n                value = formUtil.numDiv(value, 100);\r\n              } else if (formItem.dataType === \"thousand\") {\r\n                value = formUtil.numDiv(value, 1000);\r\n              } else if (formItem.dataType === \"tenThousand\") {\r\n                value = formUtil.numDiv(value, 10000);\r\n              }\r\n            }\r\n            Object.assign(formItem, item);\r\n            if (item.fieldType === \"text\") {\r\n              if (item.dataType === \"money(yuan)\") {\r\n                value = formUtil.formatMoney(value);\r\n              } else if (item.dataType === \"money(wan)\") {\r\n                value = formUtil.numDiv(value, 10000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (item.dataType === \"money(baiwan)\") {\r\n                value = formUtil.numDiv(value, 1000000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (item.dataType === \"money(yi)\") {\r\n                value = formUtil.numDiv(value, 100000000);\r\n                value = formUtil.formatMoney(value);\r\n              } else if (item.dataType === \"percentile\") {\r\n                value = formUtil.numMulti(value, 100);\r\n              } else if (item.dataType === \"thousand\") {\r\n                value = formUtil.numMulti(value, 1000);\r\n              } else if (item.dataType === \"tenThousand\") {\r\n                value = formUtil.numMulti(value, 10000);\r\n              }\r\n            }\r\n            this.$set(this.formData, item.fieldName, value);\r\n            this.$set(this.setFormData, item.fieldName, value);\r\n            //替换组件到表格数据中\r\n            otd[item.rowIndex][item.colIndex] = item;\r\n          }\r\n        }\r\n      }\r\n      otd = this.calcTable(otd);\r\n      this.$nextTick(() => {\r\n        this.tableData = otd;\r\n        this.clearValidate();\r\n      });\r\n    },\r\n    //计算表格\r\n    calcTable(otd) {\r\n      let td = otd || this.clone(this.originalTableData);\r\n      let len = td.length;\r\n      let columns = this.option.columns;\r\n      //对每一列从底部向上进行递归计算，判断需要上移不\r\n      for (let index = 0; index < columns; index++) {\r\n        let col = td[len - 1][index];\r\n        this.deep(td, col, len - 1, index, len - 1);\r\n      }\r\n      return td;\r\n    },\r\n    //递归计算每一个单元格\r\n    deep(td, col, rowIndex, colIndex, len) {\r\n      if (!col) {\r\n        return;\r\n      }\r\n      //如果涉及到跨列的 ，就修改计算的触发点，将最后一行的定位计算到跨列这里\r\n      if ((col.belong || col.colspan > 1) && col.isShow !== false) {\r\n        rowIndex >= 1 &&\r\n          this.deep(td, td[rowIndex - 1][colIndex], rowIndex - 1, colIndex, rowIndex);\r\n        return;\r\n      }\r\n      //如果当前格是隐藏的，就进行移动操作\r\n      if (col && col.isShow === false) {\r\n        //确保上一轮变化触发成功\r\n        for (let c = 0; c < col.colspan; c++) {\r\n          if (td[rowIndex][colIndex + c].fieldType == \"empty\") {\r\n            td[rowIndex][colIndex + c].isShow = false;\r\n          }\r\n        }\r\n        if (col.fieldType == \"empty\") {\r\n          delete td[rowIndex][colIndex].isShow;\r\n        }\r\n        //移单元格向上\r\n        this.modCol(td, col, rowIndex, colIndex, len);\r\n      }\r\n      rowIndex >= 1 &&\r\n        this.deep(td, td[rowIndex - 1][colIndex], rowIndex - 1, colIndex, len);\r\n    },\r\n    modCol(td, col, rowIndex, colIndex, len) {\r\n      //遍历当前向下的所有单元格往上一次\r\n      for (let index = rowIndex; index <= len; index++) {\r\n        //最后一行置空\r\n        if (index == len) {\r\n          td[index][colIndex] = this.returnCol(\r\n            {},\r\n            { rowIndex: index, colIndex: colIndex }\r\n          );\r\n          continue;\r\n        }\r\n        //变化\r\n        td[index][colIndex] = td[index + 1][colIndex];\r\n      }\r\n    },\r\n    rowStyleHandler(row) {\r\n      let rowData = row.row;\r\n      for (let cell in rowData) {\r\n        let cellData = rowData[cell];\r\n        if (cellData.fieldType != \"empty\") {\r\n          return null;\r\n        }\r\n      }\r\n      return { display: \"none\" };\r\n    },\r\n    setWaitData(state, data) {\r\n      if (JSON.stringify(this.option) == \"{}\") {\r\n        if (\"setFormValue\" == state) {\r\n          let oldData = this.waitData[state] || {};\r\n          oldData[data.key] = data.value;\r\n          this.waitData[state] = oldData;\r\n        } else if (\"attr\" == state) {\r\n          let oldData = this.waitData[state] || {};\r\n          oldData[data.key] = data.value;\r\n          this.waitData[state] = oldData;\r\n        }\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    },\r\n    async getWaitData() {\r\n      for (let key in this.waitData) {\r\n        if (\"setFormValue\" == key) {\r\n          await this[key](this.waitData[key]);\r\n        } else if (\"attr\" == key) {\r\n          let data = this.waitData[key];\r\n          for (let i in data) {\r\n            if (i.indexOf(\"_\") > -1) {\r\n              let arr = i.split(\"_\");\r\n              this[key](arr[0], arr[1], data[i]);\r\n            } else {\r\n              this[key](i, data[i]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.waitData = {};\r\n    },\r\n    clone(data) {\r\n      return JSON.parse(JSON.stringify(data));\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mftcc-form {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  transform: translate(-50%, 0);\r\n  left: 50%;\r\n  position: relative;\r\n}\r\n.mftcc-form .el-form-item__content,\r\n.mftcc-form-search .el-form-item__content {\r\n  width: auto;\r\n}\r\n.mftcc-form .el-form-item,\r\n.mftcc-form-search .el-form-item {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.mftcc-form .mftcc-form-group .el-form-item,\r\n.mftcc-form-search .mftcc-form-group .el-form-item {\r\n  padding: 0;\r\n}\r\n.mftcc-form .el-select,\r\n.mftcc-form-search .el-select {\r\n  width: 100%;\r\n}\r\n.mftcc-form .form-el-row,\r\n.mftcc-form-search .form-el-row {\r\n  width: 100%;\r\n}\r\n.mftcc-form .el-table td,\r\n.mftcc-form-search .el-table td,\r\n.mftcc-form-query .el-table td {\r\n  border-bottom: none;\r\n  padding: 0;\r\n  /* height: 50px; */\r\n}\r\n\r\n.mftcc-form .el-table--border::after,\r\n.mftcc-form .el-table::before,\r\n.mftcc-form-search .el-table--border::after,\r\n.mftcc-form-search .el-table::before,\r\n.mftcc-form-query .el-table--border::after,\r\n.mftcc-form-query .el-table::before,\r\n.mftcc-form-expand .el-table--border::after,\r\n.mftcc-form-expand .el-table::before {\r\n  content: none;\r\n}\r\n.mftcc-form .el-input.is-disabled.mftcc-input.success .el-input__inner,\r\n.mftcc-form .el-input.mftcc-input.success .el-input__inner,\r\n.mftcc-form .mftcc-input.success .el-input.is-disabled .el-input__inner,\r\n.mftcc-form .mftcc-input.success .el-input .el-input__inner,\r\n.mftcc-form-query .el-form-item__content span.success {\r\n  color: #67c23a;\r\n}\r\n.mftcc-form .el-input.is-disabled.mftcc-input.warning .el-input__inner,\r\n.mftcc-form .el-input.mftcc-input.warning .el-input__inner,\r\n.mftcc-form .mftcc-input.warning .el-input.is-disabled .el-input__inner,\r\n.mftcc-form .mftcc-input.warning .el-input .el-input__inner,\r\n.mftcc-form-query .el-form-item__content span.warning {\r\n  color: #e6a23c;\r\n}\r\n.mftcc-form .el-input.is-disabled.mftcc-input.danger .el-input__inner,\r\n.mftcc-form .el-input.mftcc-input.danger .el-input__inner,\r\n.mftcc-form .mftcc-input.danger .el-input.is-disabled .el-input__inner,\r\n.mftcc-form .mftcc-input.danger .el-input .el-input__inner,\r\n.mftcc-form-query .el-form-item__content span.danger {\r\n  color: #f56c6c;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-form,\r\n.mftcc-form-search {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n}\r\n.mftcc-form .el-form-item__content,\r\n.mftcc-form-search .el-form-item__content {\r\n  width: auto;\r\n}\r\n.mftcc-form .el-form-item,\r\n.mftcc-form-search .el-form-item {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.mftcc-form .mftcc-form-group .el-form-item,\r\n.mftcc-form-search .mftcc-form-group .el-form-item {\r\n  padding: 0;\r\n}\r\n.mftcc-form .el-select,\r\n.mftcc-form-search .el-select {\r\n  width: 100%;\r\n}\r\n.mftcc-form .form-el-row,\r\n.mftcc-form-search .form-el-row {\r\n  width: 100%;\r\n}\r\n","<template>\r\n    <el-upload\r\n    class=\"upload-demo\"\r\n    :action=\"this.props.uploadUrl\"\r\n    :multiple=\"this.props.multiple\"\r\n    :data=\"this.props.fileData\"\r\n    :name=\"this.props.fieldName\"\r\n    :show-file-list=\"this.props.showFileList\"\r\n    :drag=\"this.props.drag\"\r\n    :accept=\"this.props.accept\"\r\n    :auto-upload=\"this.props.autoUpload\"\r\n    :limit=\"this.props.limit\"\r\n    :file-list=\"fileList\"\r\n    :on-preview=\"handlePreview\"\r\n    :on-remove=\"handleRemove\"\r\n    :before-remove=\"beforeRemove\"\r\n    :before-upload=\"beforeupload\"\r\n    :on-change=\"onChange\"\r\n    >\r\n    <el-button size=\"small\" type=\"primary\" v-if=\"this.props.drag==false\">点击上传</el-button>\r\n    <div slot=\"tip\" class=\"el-upload__tip\">只能上传{{this.props.accept}}文件，且不超过500kb</div>\r\n    </el-upload>\r\n</template>\r\n<script>\r\nexport default {\r\n     data() {\r\n        return {\r\n            title:\"标题\",\r\n            fileList: [],\r\n            fileArr:[]\r\n        }\r\n    },\r\n    props: {\r\n        props: {\r\n            type: Object,\r\n            default() {\r\n                return {};\r\n            }\r\n        },\r\n        designer: {\r\n            type: Boolean,\r\n            default() {\r\n                return false;\r\n            }\r\n        }\r\n  },\r\n  computed: {\r\n    compValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(val) {\r\n        this.$emit(\"returnBack\", val);\r\n      },\r\n    },\r\n  },\r\n  model: {\r\n    prop: \"value\", //值可以随意命名\r\n    event: \"returnBack\", //方法也可以随意命名\r\n  },\r\n  methods: {\r\n      beforeupload(file){\r\n        return false;\r\n      },\r\n      onChange(file,fileList){\r\n        this.fileArr = [];\r\n        for ( var i = 0; i <fileList.length; i++){\r\n            this.fileArr.push(fileList[i])\r\n        }\r\n        this.compValue = this.fileArr;\r\n      },\r\n      handleRemove(file, fileList) {\r\n          this.fileArr = [];\r\n          for ( var i = 0; i <fileList.length; i++){\r\n              this.fileArr.push(fileList[i])\r\n          }\r\n          this.compValue = this.fileArr;\r\n      },\r\n      handlePreview(file) {\r\n        console.log(file);\r\n      },\r\n      beforeRemove(file, fileList) {\r\n        return this.$confirm(`确定移除 ${ file.name }？`);\r\n      },\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.title_label{\r\n    margin: 0 !important;\r\n    border-radius: 0;\r\n    background-color: #EDF2FA !important;\r\n    color: rgba(20,20,20,1) !important;\r\n    font-weight: 400;\r\n}\r\n.title_label .el-alert__title{\r\n    font-size: 16px;\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.title_label{\r\n    margin: 0 !important;\r\n    border-radius: 0;\r\n    background-color: #EDF2FA !important;\r\n    color: rgba(20,20,20,1) !important;\r\n    font-weight: 400;\r\n}\r\n.title_label .el-alert__title{\r\n    font-size: 16px;\r\n}\r\n","<template>\r\n  <div>\r\n    <el-collapse\r\n      v-model=\"activeNames\"\r\n      class=\"mftcc-collapse\"\r\n      @change=\"change\"\r\n      disabled\r\n      ref=\"mftccCollapse\"\r\n      :id=\"props.uuid\"\r\n    >\r\n      <el-collapse-item\r\n        name=\"mftcc-collapse\"\r\n        :disabled=\"props.alwaysOpen\"\r\n        :class=\"{ isAutoHeight: props.isAutoHeight === true }\"\r\n        :style=\"\r\n          'height:' + props.height + 'px;max-height:' + props.maxHeight + 'px;'\r\n        \"\r\n      >\r\n        <div slot=\"title\" class=\"mftcc-collapse-title\" ref=\"title\">\r\n          <div class=\"title\">\r\n            <i v-if=\"!props.icon\" class=\"el-icon-star-on\"></i>\r\n            <span>{{ this.title == \"\" ? props.title : this.title }}</span>\r\n          </div>\r\n          <div class=\"btnLeftShow\" style=\"margin-left: 10px\">\r\n            <template v-for=\"(btn, index) in props.optBtnLeft\">\r\n              <i\r\n                :key=\"index\"\r\n                :class=\"btn.icon\"\r\n                v-if=\"btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n              >\r\n              </i>\r\n              <el-button\r\n                :key=\"index\"\r\n                size=\"mini\"\r\n                type=\"text\"\r\n                v-if=\"!btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.native.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n                >{{ btn.key }}</el-button\r\n              >\r\n            </template>\r\n          </div>\r\n          <div class=\"btnRightShow\">\r\n            <template v-for=\"(btn, index) in props.optBtnRight\">\r\n              <i\r\n                :key=\"index\"\r\n                :class=\"btn.icon\"\r\n                v-if=\"btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n              >\r\n              </i>\r\n              <el-button\r\n                :key=\"index\"\r\n                size=\"mini\"\r\n                type=\"text\"\r\n                v-if=\"!btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.native.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n                >{{ btn.key }}</el-button\r\n              >\r\n            </template>\r\n          </div>\r\n        </div>\r\n        <div\r\n          slot=\"title\"\r\n          class=\"mftcc-collapse-title scroll\"\r\n          v-show=\"showScrollTitle\"\r\n          ref=\"scrollTitle\"\r\n        >\r\n          <div class=\"title\">\r\n            <i v-if=\"!props.icon\" class=\"el-icon-star-on\"></i>\r\n            <span>{{ this.title == \"\" ? props.title : this.title }}</span>\r\n          </div>\r\n          <div class=\"btnLeftShow\" style=\"margin-left: 10px\">\r\n            <template v-for=\"(btn, index) in props.optBtnLeft\">\r\n              <i\r\n                :key=\"index\"\r\n                :class=\"btn.icon\"\r\n                v-if=\"btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n              >\r\n              </i>\r\n              <el-button\r\n                :key=\"index\"\r\n                size=\"mini\"\r\n                type=\"text\"\r\n                v-if=\"!btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.native.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n                >{{ btn.key }}</el-button\r\n              >\r\n            </template>\r\n          </div>\r\n          <div class=\"btnRightShow\">\r\n            <template v-for=\"(btn, index) in props.optBtnRight\">\r\n              <i\r\n                :key=\"index\"\r\n                :class=\"btn.icon\"\r\n                v-if=\"btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n              >\r\n              </i>\r\n              <el-button\r\n                :key=\"index\"\r\n                size=\"mini\"\r\n                type=\"text\"\r\n                v-if=\"!btn.icon && layoutItemShow(btn)\"\r\n                v-on:click.native.stop=\"Fn(btn.callBackFunc, props.assemblyId)\"\r\n                >{{ btn.key }}</el-button\r\n              >\r\n            </template>\r\n          </div>\r\n        </div>\r\n        <div class=\"mftcc-collapse-info\">\r\n          <el-row v-if=\"props.preview === true || isPreview === true\">\r\n            <template v-if=\"props.importType == 'form'\">\r\n              <mftcc-form\r\n                :formId=\"props.formId\"\r\n                :parentVm=\"parentVm\"\r\n                ref=\"form\"\r\n                @initCallBack=\"initFormCallBack\"\r\n              ></mftcc-form>\r\n            </template>\r\n            <template v-else-if=\"props.importType == 'table'\">\r\n              <mftcc-table\r\n                :tableId=\"props.tableId\"\r\n                :initSearchData=\"initSearchData\"\r\n                :parentVm=\"parentVm\"\r\n                ref=\"table\"\r\n                @initCallBack=\"initTableCallBack\"\r\n              ></mftcc-table>\r\n            </template>\r\n            <template v-else-if=\"props.importType == 'bizComp'\">\r\n              <container\r\n                :props=\"props\"\r\n                :paramData=\"paramData\"\r\n                :isDesigner=\"isDesigner\"\r\n              >\r\n              </container>\r\n            </template>\r\n          </el-row>\r\n        </div>\r\n      </el-collapse-item>\r\n    </el-collapse>\r\n  </div>\r\n</template>\r\n<script>\r\nimport formUtil from \"../../utils/formUtil\";\r\nimport container from \"../layout/plugins/container\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeNames: [],\r\n      isRefreshPage: true,\r\n      showHelper: null,\r\n      title: \"\",\r\n      showScrollTitle: false,\r\n      initSearchData: {}\r\n    };\r\n  },\r\n  props: {\r\n    props: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    parentVm: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    isPreview: Boolean,\r\n    paramData: {\r\n      type: Object,\r\n      default: function() {\r\n        return {};\r\n      }\r\n    },\r\n    isDesigner: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    cells: {\r\n      type: Object,\r\n      default: []\r\n    }\r\n  },\r\n  components: {\r\n    container\r\n  },\r\n  inject: [\"root\"],\r\n  created() {\r\n    if (this.props.isOpen === true || this.props.alwaysOpen === true) {\r\n      this.changeOpen(true);\r\n    } else {\r\n      this.changeOpen(false);\r\n    }\r\n    this.initTableSearchData();\r\n  },\r\n  mounted() {\r\n    // debugger;\r\n    // dom.addEventListener(\"scroll\", function () {\r\n    //   const scrollDistance = dom.scrollHeight - dom.scrollTop - dom.clientHeight;\r\n    //   //如果表格高度小于或=0 继续请求数据\r\n    //   if (scrollDistance <= 0) {\r\n    //     //当前页数小于总页数继续请求\r\n    //     if (that.pageNo < that.total) {\r\n    //       that.pageNo++;\r\n    //       // that.pageSize = that.pageSize + 10;\r\n    //       that.loadData();\r\n    //     }\r\n    //   }\r\n    // });\r\n  },\r\n  computed: {\r\n    editField() {\r\n      if (this.$store.getters.editField) {\r\n        return this.$store.getters.editField.prop;\r\n      }\r\n      return null;\r\n    }\r\n  },\r\n  watch: {\r\n    root: {\r\n      deep: true,\r\n      handler(dom) {\r\n        if(this.props.isFixed === false){\r\n          return;\r\n        }\r\n        //布局滚动条高度\r\n        let scrollTop = dom.scrollTop;\r\n        let rootX = dom.x;\r\n        let rootY = dom.y;\r\n        //计算之前是否有固定的card\r\n        for (let cell of this.cells) {\r\n          if (cell.uuid == this.props.uuid) {\r\n            break;\r\n          }\r\n          if (cell.isFixedTop) {\r\n            let beforeDom = document.getElementById(cell.uuid);\r\n            let height = beforeDom.offsetHeight;\r\n            rootY += height;\r\n          }\r\n        }\r\n        //原始标题dom\r\n        let oldTitle = this.$refs.mftccCollapse.$children[0].$el.children[0];\r\n        let oldTop = oldTitle.offsetTop;\r\n        let oldHeight = oldTitle.offsetHeight;\r\n        let oldWidth = oldTitle.offsetWidth;\r\n        //原始标题根据屏幕的定位\r\n        let clientRect = oldTitle.getBoundingClientRect();\r\n        let oldX = clientRect.x;\r\n        let oldY = clientRect.y;\r\n        //当前折叠面板dom\r\n        let collapseDiv = this.$refs.mftccCollapse.$children[0].$el;\r\n        let collapseHeight = collapseDiv.offsetHeight;\r\n\r\n        let scrollTitleDiv = this.$refs.scrollTitle;\r\n        //超过标题\r\n        if (rootY >= oldY) {\r\n          scrollTitleDiv.style.display = \"flex\";\r\n          scrollTitleDiv.style.position = \"fixed\";\r\n          scrollTitleDiv.style.width = oldWidth + \"px\";\r\n          scrollTitleDiv.style.height = oldHeight + \"px\";\r\n          scrollTitleDiv.style.zIndex = 99;\r\n          scrollTitleDiv.style.left = oldX + \"px\";\r\n          scrollTitleDiv.style.top = rootY + \"px\";\r\n          scrollTitleDiv.style.boxSizing = \"border-box\";\r\n        } else {\r\n          scrollTitleDiv.style.display = \"none\";\r\n        }\r\n        //标题超过当前折叠面板底部并超过时，固定位置\r\n        if (rootY >= oldY + collapseHeight - oldHeight) {\r\n          scrollTitleDiv.style.position = \"absolute\";\r\n          scrollTitleDiv.style.left = 0;\r\n          scrollTitleDiv.style.top = collapseHeight - oldHeight + \"px\";\r\n        }\r\n\r\n        //折叠面板箭头位置跟随\r\n        let arrow = scrollTitleDiv.parentElement.children[2];\r\n        if (rootY >= oldY) {\r\n          arrow.style.position = \"fixed\";\r\n          arrow.style.left = oldX + oldWidth - 27 + \"px\";\r\n          arrow.style.top = rootY + oldHeight / 2 - 7 + \"px\";\r\n          arrow.style.right = \"auto\";\r\n        } else {\r\n          arrow.style.position = \"absolute\";\r\n          arrow.style.left = \"auto\";\r\n          arrow.style.top = \"auto\";\r\n          arrow.style.right = \"5px\";\r\n        }\r\n        if (rootY >= oldY + collapseHeight - oldHeight) {\r\n          arrow.style.position = \"absolute\";\r\n          arrow.style.left = \"auto\";\r\n          arrow.style.top = collapseHeight - oldHeight / 2 - 7 + \"px\";\r\n          arrow.style.right = \"5px\";\r\n        }\r\n      }\r\n    },\r\n    \"props.title\": {\r\n      handler(val, oldVal) {\r\n        var patt = \"\\\\$\\\\{(.*?)\\\\}\";\r\n        if (val.search(patt) != -1) {\r\n          this.title = this.paramData[val.substring(2, val.length - 1)];\r\n        } else {\r\n          this.title = val;\r\n        }\r\n      }\r\n    },\r\n    \"props.isOpen\": {\r\n      handler(val, oldVal) {\r\n        this.changeOpen(val);\r\n      }\r\n    },\r\n    \"props.alwaysOpen\": {\r\n      handler(val, oldVal) {\r\n        this.changeOpen(val);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    layoutItemShow(btn) {\r\n      let btnFlag = this.isDesigner || this.$hasPerm(btn.jurisdiction || true);\r\n      if (btnFlag && btn.showField) {\r\n        if (this.paramData[btn.showField] === false) {\r\n          btnFlag = false;\r\n        }\r\n      }\r\n      return btnFlag;\r\n    },\r\n    fixedTitle() {},\r\n    cancelFixedTitle() {},\r\n    getTitle() {\r\n      var patt = \"\\\\$\\\\{(.*?)\\\\}\";\r\n      var logTitle = this.props.title;\r\n      if (this.paramData && logTitle && logTitle.search(patt) != -1) {\r\n        this.title =\r\n          this.paramData[logTitle.substring(2, logTitle.length - 1)] ||\r\n          logTitle;\r\n      } else {\r\n        this.title = this.props.title;\r\n      }\r\n    },\r\n    initTableSearchData() {\r\n      if (typeof this.props.optBtnLeft == \"undefined\") {\r\n        this.$set(this.props, \"optBtnLeft\", []);\r\n      }\r\n      if (typeof this.props.optBtnRight == \"undefined\") {\r\n        this.$set(this.props, \"optBtnRight\", []);\r\n      }\r\n      if (typeof this.props.btnRight == \"undefined\") {\r\n        this.$set(this.props, \"btnRight\", false);\r\n      }\r\n      if (typeof this.props.btnLeft == \"undefined\") {\r\n        this.$set(this.props, \"btnLeft\", false);\r\n      }\r\n      this.initSearchData = {};\r\n      let isd = this.props.initSearchData;\r\n      for (let sd of isd) {\r\n        let value;\r\n        if (sd.value.startsWith(\"${\") && sd.value.endsWith(\"}\")) {\r\n          value = sd.value.substring(2, sd.value.length - 1);\r\n          if (this.paramData[value]) {\r\n            value = this.paramData[value];\r\n          } else {\r\n            console.error(\"变量 \" + value + \" 不存在\");\r\n            value = \"\";\r\n          }\r\n        } else {\r\n          value = sd.value;\r\n        }\r\n        this.initSearchData[sd.key] = value;\r\n      }\r\n    },\r\n    initLeft() {\r\n      this.btnDataRight = {};\r\n      console.log(this.props);\r\n      let isdd = this.props.btnDataRight;\r\n      for (let sd of isdd) {\r\n        let value;\r\n        if (sd.value.startsWith(\"${\") && sd.value.endsWith(\"}\")) {\r\n          value = sd.value.substring(2, sd.value.length - 1);\r\n          if (this.paramData[value]) {\r\n            value = this.paramData[value];\r\n          } else {\r\n            console.error(\"变量 \" + value + \" 不存在\");\r\n            value = \"\";\r\n          }\r\n        } else {\r\n          value = sd.value;\r\n        }\r\n        this.btnDataRight[sd.key] = value;\r\n      }\r\n    },\r\n    initRight() {\r\n      this.btnDataLeft = {};\r\n      let isd = this.props.btnDataLeft;\r\n      for (let sd of isd) {\r\n        let value;\r\n        if (sd.value.startsWith(\"${\") && sd.value.endsWith(\"}\")) {\r\n          value = sd.value.substring(2, sd.value.length - 1);\r\n          if (this.paramData[value]) {\r\n            value = this.paramData[value];\r\n          } else {\r\n            console.error(\"变量 \" + value + \" 不存在\");\r\n            value = \"\";\r\n          }\r\n        } else {\r\n          value = sd.value;\r\n        }\r\n        this.btnDataLeft[sd.key] = value;\r\n      }\r\n    },\r\n    change() {\r\n      // if (this.activeNames.length == 0) {\r\n      //   //当前浮动标题\r\n      //   let scrollTitleDiv = this.$refs.scrollTitle;\r\n      //   let clientRectNew = scrollTitleDiv.getBoundingClientRect();\r\n      //   let newY = clientRectNew.y;\r\n      //   if (scrollTitleDiv.style.display != \"none\") {\r\n      //     //原始标题dom\r\n      //     let oldTitle = this.$refs.mftccCollapse.$children[0].$el.children[0];\r\n      //     let clientRect = oldTitle.getBoundingClientRect();\r\n      //     let oldY = clientRect.y;\r\n      //     let scrollNum = newY - oldY;\r\n      //     this.$bus.$emit(\"setScroll\", scrollNum);\r\n      //   }\r\n      // }\r\n    },\r\n    changeOpen(val) {\r\n      if (val == true) {\r\n        this.activeNames = [\"mftcc-collapse\"];\r\n      } else {\r\n        this.activeNames = [];\r\n      }\r\n    },\r\n    initFormCallBack() {\r\n      this.$nextTick(() => {\r\n        if (\r\n          this.props.formInitMethod &&\r\n          formUtil.parentVmExist(this.parentVm, this.props.formInitMethod)\r\n        ) {\r\n          this.parentVm._self[this.props.formInitMethod](this.$refs.form);\r\n        }\r\n      });\r\n    },\r\n    initTableCallBack() {\r\n      this.$nextTick(() => {\r\n        if (\r\n          this.props.tableInitMethod &&\r\n          formUtil.parentVmExist(this.parentVm, this.props.tableInitMethod)\r\n        ) {\r\n          this.parentVm._self[this.props.tableInitMethod](this.$refs.table);\r\n        }\r\n      });\r\n    },\r\n    editFormM() {\r\n      this.$nextTick(() => {\r\n        if (formUtil.parentVmExist(this.parentVm, \"editFormM\")) {\r\n          this.parentVm._self[\"editFormM\"](this.$refs.form);\r\n        }\r\n      });\r\n    },\r\n    Fn(method, param) {\r\n      if (formUtil.parentVmExist(this, method)) {\r\n        this.parentVm._self[method](param);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.mftcc-collapse > .el-collapse-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.mftcc-collapse > .el-collapse-item > .el-collapse-item__wrap {\r\n  flex-grow: 1;\r\n}\r\n.isAutoHeight {\r\n  height: unset !important;\r\n  min-height: unset !important;\r\n  max-height: unset !important;\r\n}\r\n.buttonRightStyle {\r\n  margin-right: 20px;\r\n}\r\n.flowHidden {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.btnRightShow {\r\n  margin-right: 40px;\r\n  color: #409eff;\r\n}\r\n.btnRightShow button,\r\n.btnRightShow i,\r\n.btnLeftShow button,\r\n.btnLeftShow i {\r\n  margin-left: 10px;\r\n}\r\n.btnLeftShow {\r\n  margin: auto;\r\n  color: #409eff;\r\n}\r\n.btnLeftShow i,\r\n.btnRightShow i {\r\n  font-size: 16px;\r\n}\r\n.btnRightShow .el-button--text,\r\n.btnLeftShow .el-button--text {\r\n  font-size: 14px;\r\n}\r\n\r\n.mftcc-details .mftcc-collapse-title > div {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-collapse > .el-collapse-item {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: column;\r\n          flex-direction: column;\r\n}\r\n.mftcc-collapse > .el-collapse-item > .el-collapse-item__wrap {\r\n  -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n          flex-grow: 1;\r\n}\r\n.isAutoHeight {\r\n  height: unset !important;\r\n  min-height: unset !important;\r\n  max-height: unset !important;\r\n}\r\n.buttonRightStyle {\r\n  margin-right: 20px;\r\n}\r\n.flowHidden {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.btnRightShow {\r\n  margin-right: 40px;\r\n  color: #409eff;\r\n}\r\n.btnRightShow button,\r\n.btnRightShow i,\r\n.btnLeftShow button,\r\n.btnLeftShow i {\r\n  margin-left: 10px;\r\n}\r\n.btnLeftShow {\r\n  margin: auto;\r\n  color: #409eff;\r\n}\r\n.btnLeftShow i,\r\n.btnRightShow i {\r\n  font-size: 16px;\r\n}\r\n.btnRightShow .el-button--text,\r\n.btnLeftShow .el-button--text {\r\n  font-size: 14px;\r\n}\r\n.mftcc-details .mftcc-collapse-title > div {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n}\r\n","<template>\r\n  <el-card\r\n    shadow=\"never\"\r\n    :class=\"{\r\n      'mftcc-card': true,\r\n      isAutoHeight: props.isAutoHeight === true,\r\n      isDesigner: isDesigner,\r\n    }\"\r\n    :style=\"\r\n      'height:' +\r\n      props.height +\r\n      'px;min-height:' +\r\n      props.minHeight +\r\n      'px;max-height:' +\r\n      props.maxHeight +\r\n      'px;'\r\n    \"\r\n  >\r\n    <div\r\n      class=\"layout-page-item container\"\r\n      :style=\"\r\n        'padding:' +\r\n        props.paddingTop +\r\n        'px ' +\r\n        props.paddingRight +\r\n        'px ' +\r\n        props.paddingBottom +\r\n        'px ' +\r\n        props.paddingLeft +\r\n        'px'\r\n      \"\r\n    >\r\n      <template v-for=\"(cell, cellIndex) in props.content\">\r\n        <layout-item\r\n          v-if=\"isDesigner\"\r\n          :key=\"cell.uuid\"\r\n          :props=\"cell\"\r\n          :isDesigner=\"true\"\r\n          :class=\"{\r\n            'is-helper': showHelper === cell.uuid,\r\n            'is-select': editField === cell.uuid,\r\n          }\"\r\n          :style=\"'margin:0 0 ' + props.rowSpan + 'px 0'\"\r\n          @mouseenter.native=\"handleMouseEnter(cell)\"\r\n          @mouseleave.native=\"handleMouseLeave()\"\r\n          @click.native.stop=\"handleClick(cell)\"\r\n        >\r\n          <div slot=\"widgets-tools\" class=\"widgets-tools\">\r\n            <i\r\n              v-if=\"showHelper === cell.uuid\"\r\n              class=\"el-icon-delete\"\r\n              @click.stop=\"delLayout(cellIndex)\"\r\n            ></i>\r\n          </div>\r\n        </layout-item>\r\n        <layout-item\r\n          v-else-if=\"layoutItemShow(cell)\"\r\n          :style=\"'margin:0 0 ' + props.rowSpan + 'px 0'\"\r\n          :key=\"cell.uuid\"\r\n          :props=\"cell\"\r\n          :isPreview=\"isPreview\"\r\n          :paramData=\"paramData\"\r\n          :parentVm=\"parentVm\"\r\n          :cells=\"props.content\"\r\n        ></layout-item>\r\n      </template>\r\n    </div>\r\n  </el-card>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      showHelper: null,\r\n    };\r\n  },\r\n  props: {\r\n    props: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      },\r\n    },\r\n    parentVm: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    isPreview: Boolean,\r\n    paramData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {};\r\n      },\r\n    },\r\n    isDesigner: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    editField() {\r\n      if (this.$store.getters.editField) {\r\n        return this.$store.getters.editField.uuid;\r\n      }\r\n      return null;\r\n    },\r\n  },\r\n  created() {\r\n    for (let cell of this.props.content) {\r\n      cell.preview = true;\r\n    }\r\n  },\r\n  methods: {\r\n    layoutItemShow(cell) {\r\n      let btnFlag = this.$hasPerm(cell.perm || true);\r\n      if (btnFlag && cell.showField) {\r\n        if (this.paramData[cell.showField] === false) {\r\n          btnFlag = false;\r\n        }\r\n      }\r\n      return btnFlag;\r\n    },\r\n    handleMouseEnter(item) {\r\n      if (this.$dragula.dragging) return;\r\n      this.showHelper = item.uuid;\r\n    },\r\n    handleMouseLeave() {\r\n      this.showHelper = null;\r\n    },\r\n    handleClick(item) {\r\n      this.$store.commit(\"set_editField\", item);\r\n    },\r\n    delLayout(index) {\r\n      this.props.content.splice(index, 1);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.isAutoHeight {\r\n  height: unset !important;\r\n  min-height: unset !important;\r\n  max-height: unset !important;\r\n}\r\n.mftcc-card.isDesigner {\r\n  padding: 10px;\r\n  background-image: -webkit-gradient(\r\n    linear,\r\n    0 0,\r\n    100% 100%,\r\n    color-stop(0.25, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.25, transparent),\r\n    color-stop(0.5, transparent),\r\n    color-stop(0.5, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.75, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.75, transparent),\r\n    to(transparent)\r\n  );\r\n  background-size: 20px 20px;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.isAutoHeight {\r\n  height: unset !important;\r\n  min-height: unset !important;\r\n  max-height: unset !important;\r\n}\r\n.mftcc-card.isDesigner {\r\n  padding: 10px;\r\n  background-image: -webkit-gradient(\r\n    linear,\r\n    0 0,\r\n    100% 100%,\r\n    color-stop(0.25, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.25, transparent),\r\n    color-stop(0.5, transparent),\r\n    color-stop(0.5, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.75, rgba(0, 0, 0, 0.08)),\r\n    color-stop(0.75, transparent),\r\n    to(transparent)\r\n  );\r\n  background-size: 20px 20px;\r\n}\r\n","<template>\r\n  <el-form\r\n    :label-position=\"option.labelPosition\"\r\n    :model=\"formData\"\r\n    :rules=\"rules\"\r\n    :ref=\"option.formId\"\r\n    :disabled=\"isEmpty(option.formDisabled) ? false : option.formDisabled\"\r\n    label-width=\"150px\"\r\n    :class=\"\r\n      search === 'search'\r\n        ? 'mftcc-form-search'\r\n        : option.query === 'query'\r\n        ? 'mftcc-form-query'\r\n        : 'mftcc-form'\r\n    \"\r\n    @submit.native.prevent\r\n  >\r\n    <el-row class=\"form-el-row\">\r\n      <template v-for=\"(item, index) in option.formItem\">\r\n        <template v-if=\"item.fieldType === 'label'\">\r\n          <el-col :span=\"24\" :key=\"index\">\r\n            <el-alert\r\n              :title=\"item.label\"\r\n              type=\"success\"\r\n              effect=\"dark\"\r\n              :closable=\"false\"\r\n              style=\"margin-bottom: 22px\"\r\n            >\r\n            </el-alert>\r\n          </el-col>\r\n        </template>\r\n        <template v-else>\r\n          <el-col\r\n            :span=\"\r\n              isEmpty(option.columns)\r\n                ? 24\r\n                : Math.floor(24 / option.columns) *\r\n                  Math.floor(\r\n                    isEmpty(item.colspan)\r\n                      ? 1\r\n                      : item.colspan > option.columns\r\n                      ? option.columns\r\n                      : item.colspan\r\n                  )\r\n            \"\r\n            :key=\"item.fieldName\"\r\n          >\r\n            <template v-if=\"item.fieldType === 'group'\">\r\n              <el-form-item\r\n                :label=\"item.label\"\r\n                :required=\"item.required\"\r\n                v-show=\"isEmpty(item.isShow) ? true : item.isShow\"\r\n                class=\"mftcc-form-group\"\r\n              >\r\n                <template v-for=\"(grouItem, groupIndex) in item.group\">\r\n                  <el-col\r\n                    :key=\"grouItem.fieldName + 'field'\"\r\n                    :span=\"\r\n                      Math.floor((24 - (item.group.length - 1) * 2) / item.group.length)\r\n                    \"\r\n                    v-show=\"isEmpty(grouItem.isShow) ? true : grouItem.isShow\"\r\n                  >\r\n                    <el-form-item :prop=\"grouItem.fieldName\">\r\n                      <template v-if=\"option.query === 'query'\">\r\n                        <span :title=\"formData[grouItem.fieldName]\">\r\n                          <template v-if=\"!isEmpty(grouItem.prepend)\">\r\n                            {{ grouItem.prepend }}\r\n                          </template>\r\n                          {{ formData[grouItem.fieldName] }}\r\n                          <template v-if=\"!isEmpty(grouItem.suffix)\">\r\n                            {{ grouItem.suffix }}\r\n                          </template>\r\n                        </span>\r\n                      </template>\r\n                      <template v-else-if=\"grouItem.fieldType === 'text'\">\r\n                        <template v-if=\"grouItem.dataType === 'money(yuan)'\">\r\n                          <el-input\r\n                            :ref=\"grouItem.fieldName\"\r\n                            type=\"text\"\r\n                            v-model=\"formData[grouItem.fieldName]\"\r\n                            :placeholder=\"\r\n                              isEmpty(grouItem.placeholder) ? '' : grouItem.placeholder\r\n                            \"\r\n                            :disabled=\"\r\n                              isEmpty(grouItem.disabled) ? false : grouItem.disabled\r\n                            \"\r\n                            :readonly=\"\r\n                              isEmpty(grouItem.readOnly) ? false : grouItem.readOnly\r\n                            \"\r\n                            v-on=\"events[grouItem.fieldName]\"\r\n                            @blur=\"blurFunc(grouItem.dataType, $event)\"\r\n                            @keyup.native=\"toMoney\"\r\n                            @click.native=\"clickFunc(grouItem, $event)\"\r\n                            :maxlength=\"grouItem.maxlength\"\r\n                            :show-word-limit=\"\r\n                              isEmpty(grouItem['show-word-limit'])\r\n                                ? false\r\n                                : grouItem['show-word-limit']\r\n                            \"\r\n                          >\r\n                            <!-- <template slot=\"append\">元</template> -->\r\n                            <template slot=\"suffix\">元</template>\r\n                            <template v-if=\"!isEmpty(grouItem.prepend)\">\r\n                              <template slot=\"prepend\">{{ grouItem.prepend }}</template>\r\n                            </template>\r\n                          </el-input>\r\n                        </template>\r\n                        <template v-else>\r\n                          <el-input\r\n                            :ref=\"grouItem.fieldName\"\r\n                            type=\"text\"\r\n                            v-model=\"formData[grouItem.fieldName]\"\r\n                            :placeholder=\"\r\n                              isEmpty(grouItem.placeholder) ? '' : grouItem.placeholder\r\n                            \"\r\n                            :disabled=\"\r\n                              isEmpty(grouItem.disabled) ? false : grouItem.disabled\r\n                            \"\r\n                            :readonly=\"\r\n                              isEmpty(grouItem.readOnly) ? false : grouItem.readOnly\r\n                            \"\r\n                            v-on=\"events[grouItem.fieldName]\"\r\n                            @blur=\"blurFunc(grouItem.dataType, $event)\"\r\n                            @click.native=\"clickFunc(grouItem, $event)\"\r\n                            :maxlength=\"grouItem.maxlength\"\r\n                            :show-word-limit=\"\r\n                              isEmpty(grouItem['show-word-limit'])\r\n                                ? false\r\n                                : grouItem['show-word-limit']\r\n                            \"\r\n                          >\r\n                            <template v-if=\"!isEmpty(grouItem.prepend)\">\r\n                              <template slot=\"prepend\">{{ grouItem.prepend }}</template>\r\n                            </template>\r\n                            <template v-if=\"grouItem.dataType === 'money(jiao)'\">\r\n                              <template slot=\"suffix\">角</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'money(fen)'\">\r\n                              <template slot=\"suffix\">分</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'money(wan)'\">\r\n                              <template slot=\"suffix\">万元</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'money(yi)'\">\r\n                              <template slot=\"suffix\">亿元</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'percentile'\">\r\n                              <template slot=\"suffix\">%</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'thousand'\">\r\n                              <template slot=\"suffix\">‰</template>\r\n                            </template>\r\n                            <template v-else-if=\"grouItem.dataType === 'tenThousand'\">\r\n                              <template slot=\"suffix\">‱</template>\r\n                            </template>\r\n                            <template v-else-if=\"!isEmpty(grouItem.suffix)\">\r\n                              <template slot=\"suffix\">{{ grouItem.suffix }}</template>\r\n                            </template>\r\n                          </el-input>\r\n                        </template>\r\n                      </template>\r\n                      <template v-else-if=\"grouItem.fieldType === 'number'\">\r\n                        <el-input\r\n                          :ref=\"grouItem.fieldName\"\r\n                          type=\"number\"\r\n                          v-model.number=\"formData[grouItem.fieldName]\"\r\n                          :placeholder=\"\r\n                            isEmpty(grouItem.placeholder) ? '' : grouItem.placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(grouItem.disabled) ? false : grouItem.disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(grouItem.readOnly) ? false : grouItem.readOnly\r\n                          \"\r\n                          v-on=\"events[grouItem.fieldName]\"\r\n                          @click.native=\"clickFunc(grouItem, $event)\"\r\n                        >\r\n                        </el-input>\r\n                      </template>\r\n                      <template v-else-if=\"grouItem.fieldType === 'date'\">\r\n                        <el-date-picker\r\n                          :ref=\"grouItem.fieldName\"\r\n                          v-model=\"formData[grouItem.fieldName]\"\r\n                          :format=\"\r\n                            formData[grouItem.fieldName] ===\r\n                            dateFormat(\r\n                              new Date('9999/12/31'),\r\n                              isEmpty(grouItem.dateFormat.valueFormat)\r\n                                ? 'yyyyMMdd'\r\n                                : grouItem.dateFormat.valueFormat\r\n                            )\r\n                              ? '长期'\r\n                              : isEmpty(grouItem.dateFormat.format)\r\n                              ? 'yyyy-MM-dd'\r\n                              : grouItem.dateFormat.format\r\n                          \"\r\n                          :value-format=\"\r\n                            isEmpty(grouItem.dateFormat.valueFormat)\r\n                              ? 'yyyyMMdd'\r\n                              : grouItem.dateFormat.valueFormat\r\n                          \"\r\n                          type=\"date\"\r\n                          :placeholder=\"\r\n                            isEmpty(grouItem.placeholder) ? '' : grouItem.placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(grouItem.disabled) ? false : grouItem.disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(grouItem.readOnly) ? false : grouItem.readOnly\r\n                          \"\r\n                          :picker-options=\"\r\n                            !isEmpty(grouItem.dateOption) &&\r\n                            grouItem.dateOption.isLong === true\r\n                              ? pickerOptions\r\n                              : {}\r\n                          \"\r\n                          v-on=\"events[grouItem.fieldName]\"\r\n                          @click.native=\"clickFunc(grouItem, $event)\"\r\n                        >\r\n                        </el-date-picker>\r\n                      </template>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                  <template v-if=\"groupIndex !== item.group.length - 1\">\r\n                    <el-col\r\n                      :key=\"grouItem.fieldName + 'line'\"\r\n                      class=\"line\"\r\n                      :span=\"2\"\r\n                      style=\"text-align: center\"\r\n                      v-show=\"isEmpty(grouItem.isShow) ? true : grouItem.isShow\"\r\n                      >{{\r\n                        isEmpty(grouItem.separator) ? \"-\" : grouItem.separator\r\n                      }}</el-col\r\n                    >\r\n                  </template>\r\n                </template>\r\n              </el-form-item>\r\n            </template>\r\n            <template v-else-if=\"item.fieldType === 'empty'\">\r\n              <el-form-item>\r\n                <span slot=\"label\">&nbsp;</span>\r\n              </el-form-item>\r\n            </template>\r\n            <template v-else>\r\n              <el-form-item\r\n                :label=\"item.label\"\r\n                :prop=\"item.fieldName\"\r\n                v-show=\"isEmpty(item.isShow) ? true : item.isShow\"\r\n              >\r\n                <template v-if=\"option.query === 'query'\">\r\n                  <span :title=\"formData[item.fieldName]\">\r\n                    <template v-if=\"!isEmpty(item.prepend)\">\r\n                      {{ item.prepend }}\r\n                    </template>\r\n                    {{ formData[item.fieldName] }}\r\n                    <template v-if=\"!isEmpty(item.suffix)\">\r\n                      {{ item.suffix }}\r\n                    </template>\r\n                  </span>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'text'\">\r\n                  <template v-if=\"item.dataType === 'money(yuan)'\">\r\n                    <el-input\r\n                      :ref=\"item.fieldName\"\r\n                      type=\"text\"\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      @blur=\"blurFunc(item.dataType, $event)\"\r\n                      @keyup.native=\"toMoney\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                      :maxlength=\"item.maxlength\"\r\n                      :show-word-limit=\"\r\n                        isEmpty(item['show-word-limit']) ? false : item['show-word-limit']\r\n                      \"\r\n                    >\r\n                      <!-- <template slot=\"append\">元</template> -->\r\n                      <template slot=\"suffix\">元</template>\r\n                      <template v-if=\"!isEmpty(item.prepend)\">\r\n                        <template slot=\"prepend\">{{ item.prepend }}</template>\r\n                      </template>\r\n                    </el-input>\r\n                  </template>\r\n                  <template v-else>\r\n                    <el-input\r\n                      :ref=\"item.fieldName\"\r\n                      type=\"text\"\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      @blur=\"blurFunc(item.dataType, $event)\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                      :maxlength=\"item.maxlength\"\r\n                      :show-word-limit=\"\r\n                        isEmpty(item['show-word-limit']) ? false : item['show-word-limit']\r\n                      \"\r\n                    >\r\n                      <template v-if=\"!isEmpty(item.prepend)\">\r\n                        <template slot=\"prepend\">{{ item.prepend }}</template>\r\n                      </template>\r\n                      <template v-if=\"item.dataType === 'money(jiao)'\">\r\n                        <template slot=\"suffix\">角</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'money(fen)'\">\r\n                        <template slot=\"suffix\">分</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'money(wan)'\">\r\n                        <template slot=\"suffix\">万元</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'money(yi)'\">\r\n                        <template slot=\"suffix\">亿元</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'percentile'\">\r\n                        <template slot=\"suffix\">%</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'thousand'\">\r\n                        <template slot=\"suffix\">‰</template>\r\n                      </template>\r\n                      <template v-else-if=\"item.dataType === 'tenThousand'\">\r\n                        <template slot=\"suffix\">‱</template>\r\n                      </template>\r\n                      <template v-else-if=\"!isEmpty(item.suffix)\">\r\n                        <template slot=\"suffix\">{{ item.suffix }}</template>\r\n                      </template>\r\n                    </el-input>\r\n                  </template>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'password'\">\r\n                  <el-input\r\n                    :ref=\"item.fieldName\"\r\n                    type=\"password\"\r\n                    autocomplete=\"off\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @blur=\"blurFunc(item.dataType, $event)\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                  </el-input>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'checkbox'\">\r\n                  <el-checkbox-group\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                    <el-checkbox\r\n                      v-for=\"boxItem in pramDicItem[item.fieldName]\"\r\n                      :key=\"boxItem.optCode\"\r\n                      :label=\"boxItem.optCode\"\r\n                    >\r\n                      {{ boxItem.optName }}</el-checkbox\r\n                    >\r\n                  </el-checkbox-group>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'select'\">\r\n                  <template v-if=\"item.dataType === 'library'\">\r\n                    <mftcc-library-select\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :url=\"item.library.url\"\r\n                      :realField=\"item.library.realField\"\r\n                      :showField=\"item.library.showField\"\r\n                      :multiple=\"false\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                    >\r\n                    </mftcc-library-select>\r\n                  </template>\r\n                  <template v-else>\r\n                    <el-select\r\n                      autocomplete=\"off\"\r\n                      clearable\r\n                      filterable\r\n                      :ref=\"item.fieldName\"\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                    >\r\n                      <el-option\r\n                        v-for=\"selectItem in pramDicItem[item.fieldName]\"\r\n                        :key=\"selectItem.optCode\"\r\n                        :label=\"selectItem.optName\"\r\n                        :value=\"selectItem.optCode\"\r\n                      >\r\n                      </el-option>\r\n                    </el-select>\r\n                  </template>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'multipleSelection'\">\r\n                  <template v-if=\"item.dataType === 'library'\">\r\n                    <mftcc-library-select\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :url=\"item.library.url\"\r\n                      :realField=\"item.library.realField\"\r\n                      :showField=\"item.library.showField\"\r\n                      :multiple=\"true\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                    >\r\n                    </mftcc-library-select>\r\n                  </template>\r\n                  <template v-else>\r\n                    <el-select\r\n                      multiple\r\n                      autocomplete=\"off\"\r\n                      :ref=\"item.fieldName\"\r\n                      v-model=\"formData[item.fieldName]\"\r\n                      :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                      :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                      :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                      v-on=\"events[item.fieldName]\"\r\n                      @click.native=\"clickFunc(item, $event)\"\r\n                    >\r\n                      <el-option\r\n                        v-for=\"selectItem in pramDicItem[item.fieldName]\"\r\n                        :key=\"selectItem.optCode\"\r\n                        :label=\"selectItem.optName\"\r\n                        :value=\"selectItem.optCode\"\r\n                      ></el-option>\r\n                    </el-select>\r\n                  </template>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'radio'\">\r\n                  <el-radio-group\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                    <el-radio\r\n                      v-for=\"radioItem in pramDicItem[item.fieldName]\"\r\n                      :key=\"radioItem.optCode\"\r\n                      :label=\"radioItem.optCode\"\r\n                    >\r\n                      {{ radioItem.optName }}</el-radio\r\n                    >\r\n                  </el-radio-group>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'switch'\">\r\n                  <el-switch\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :active-value=\"\r\n                      isEmpty(item.switchValue.activeValue)\r\n                        ? 0\r\n                        : item.switchValue.activeValue\r\n                    \"\r\n                    :inactive-value=\"\r\n                      isEmpty(item.switchValue.inActiveValue)\r\n                        ? 1\r\n                        : item.switchValue.inActiveValue\r\n                    \"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  ></el-switch>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'date'\">\r\n                  <el-date-picker\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :format=\"\r\n                      formData[item.fieldName] ===\r\n                      dateFormat(\r\n                        new Date('9999/12/31'),\r\n                        isEmpty(item.dateFormat.valueFormat)\r\n                          ? 'yyyyMMdd'\r\n                          : item.dateFormat.valueFormat\r\n                      )\r\n                        ? '长期'\r\n                        : isEmpty(item.dateFormat.format)\r\n                        ? 'yyyy-MM-dd'\r\n                        : item.dateFormat.format\r\n                    \"\r\n                    :value-format=\"\r\n                      isEmpty(item.dateFormat.valueFormat)\r\n                        ? 'yyyyMMdd'\r\n                        : item.dateFormat.valueFormat\r\n                    \"\r\n                    type=\"date\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    :picker-options=\"\r\n                      !isEmpty(item.dateOption) && item.dateOption.isLong === true\r\n                        ? pickerOptions\r\n                        : {}\r\n                    \"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                  </el-date-picker>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'time'\">\r\n                  <el-time-picker\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :format=\"\r\n                      isEmpty(item.dateFormat.format)\r\n                        ? 'HH:mm:ss'\r\n                        : item.dateFormat.format\r\n                    \"\r\n                    :value-format=\"\r\n                      isEmpty(item.dateFormat.valueFormat)\r\n                        ? 'HH:mm:ss'\r\n                        : item.dateFormat.valueFormat\r\n                    \"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    :picker-options=\"isEmpty(item.dateOption) ? {} : item.dateOption\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                  </el-time-picker>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'datetime'\">\r\n                  <el-date-picker\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :format=\"\r\n                      isEmpty(item.dateFormat.format)\r\n                        ? 'yyyy-MM-dd HH:mm:ss'\r\n                        : item.dateFormat.format\r\n                    \"\r\n                    :value-format=\"\r\n                      isEmpty(item.dateFormat.valueFormat)\r\n                        ? 'yyyyMMdd HH:mm:ss'\r\n                        : item.dateFormat.valueFormat\r\n                    \"\r\n                    type=\"datetime\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                  </el-date-picker>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'number'\">\r\n                  <el-input\r\n                    :ref=\"item.fieldName\"\r\n                    type=\"number\"\r\n                    v-model.number=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  >\r\n                  </el-input>\r\n                </template>\r\n                <template v-else-if=\"item.fieldType === 'textarea'\">\r\n                  <el-input\r\n                    :ref=\"item.fieldName\"\r\n                    type=\"textarea\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                    :maxlength=\"item.maxlength\"\r\n                    :show-word-limit=\"\r\n                      isEmpty(item['show-word-limit']) ? true : item['show-word-limit']\r\n                    \"\r\n                  >\r\n                  </el-input>\r\n                </template>\r\n                <template v-else>\r\n                  <el-input\r\n                    :ref=\"item.fieldName\"\r\n                    v-model=\"formData[item.fieldName]\"\r\n                    :placeholder=\"isEmpty(item.placeholder) ? '' : item.placeholder\"\r\n                    :disabled=\"isEmpty(item.disabled) ? false : item.disabled\"\r\n                    :readonly=\"isEmpty(item.readOnly) ? false : item.readOnly\"\r\n                    v-on=\"events[item.fieldName]\"\r\n                    @click.native=\"clickFunc(item, $event)\"\r\n                  ></el-input>\r\n                </template>\r\n              </el-form-item>\r\n            </template>\r\n          </el-col>\r\n        </template>\r\n      </template>\r\n    </el-row>\r\n  </el-form>\r\n</template>\r\n<script>\r\nimport { get, postJson, putJson } from \"../axios\";\r\nimport formUtil from \"../utils/formUtil\";\r\nexport default {\r\n  props: [\"formId\", \"parentVm\", \"initData\", \"search\"],\r\n  data() {\r\n    return {\r\n      option: {},\r\n      formData: {},\r\n      events: {},\r\n      pramDicItem: {},\r\n      rules: {},\r\n      isEmpty: formUtil.isEmpty,\r\n      toMoney: formUtil.toMoney,\r\n      dateFormat: formUtil.dateFormat,\r\n      pickerOptions: {\r\n        shortcuts: [\r\n          {\r\n            text: \"今天\",\r\n            onClick(picker) {\r\n              picker.$emit(\"pick\", new Date());\r\n            },\r\n          },\r\n          {\r\n            text: \"长期\",\r\n            onClick(picker) {\r\n              picker.$emit(\"pick\", new Date(\"9999/12/31\"));\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  watch: {\r\n    formId: {\r\n      handler(val, oldVal) {\r\n        this.initForm();\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n    initData() {\r\n      this.initForm();\r\n    },\r\n  },\r\n  methods: {\r\n    resetForm(callback) {\r\n      this.$refs[this.option.formId].resetFields();\r\n      if (formUtil.isFunction(callback)) {\r\n        callback();\r\n      }\r\n    },\r\n    blurFunc(dataType, el) {\r\n      formUtil.func_uior_valTypeImm(el, dataType);\r\n    },\r\n    clickFunc(item, el) {\r\n      let events = item.events;\r\n      for (let i in events) {\r\n        if (\r\n          this.option.formDisabled !== true &&\r\n          item.disabled !== true &&\r\n          events[i].type === \"click\" &&\r\n          formUtil.parentVmExist(this, events[i].callback)\r\n        ) {\r\n          this.parentVm._self[events[i].callback](el);\r\n        }\r\n      }\r\n    },\r\n    validateForm(callback) {\r\n      this.$refs[this.option.formId].validate((valid) => {\r\n        if (formUtil.isFunction(callback)) {\r\n          callback(valid);\r\n        }\r\n      });\r\n    },\r\n    validateField(parm, callback) {\r\n      this.$refs[this.option.formId].validateField(parm, (valid) => {\r\n        if (formUtil.isFunction(callback)) {\r\n          callback(valid);\r\n        }\r\n      });\r\n    },\r\n    clearValidate() {\r\n      this.$nextTick(() => {\r\n        if (arguments.length === 0) {\r\n          this.$refs[this.option.formId].clearValidate();\r\n        } else if (arguments.length >= 1) {\r\n          this.$refs[this.option.formId].clearValidate(arguments[1]);\r\n        }\r\n      });\r\n    },\r\n    getFormItems(formItem) {\r\n      let formItems = [];\r\n      for (let i in formItem) {\r\n        if (formItem[i].fieldType === \"group\") {\r\n          let groupItem = formItem[i].group;\r\n          for (let j in groupItem) {\r\n            formItems.push(groupItem[j]);\r\n          }\r\n        } else {\r\n          formItems.push(formItem[i]);\r\n        }\r\n      }\r\n      return formItems;\r\n    },\r\n    setFormValue() {\r\n      let formItem = this.option.formItem;\r\n      if (arguments.length === 1) {\r\n        for (let i in arguments[0]) {\r\n          this.setFormValue(i, arguments[0][i]);\r\n        }\r\n      } else if (arguments.length >= 2) {\r\n        if (this.formData.hasOwnProperty(arguments[0]) || arguments[2] === true) {\r\n          let formItems = this.getFormItems(formItem);\r\n          for (let i in formItems) {\r\n            let formField = formItems[i];\r\n            if (formField !== null && arguments[0] === formField.fieldName) {\r\n              let value = arguments[1];\r\n              if (\r\n                formField.fieldType === \"checkbox\" ||\r\n                formField.fieldType === \"multipleSelection\"\r\n              ) {\r\n                let checkValue = [];\r\n                if (!this.isEmpty(value)) {\r\n                  let checkArray = value.split(\"|\");\r\n                  for (let k in checkArray) {\r\n                    if (!this.isEmpty(checkArray[k])) {\r\n                      checkValue.push(checkArray[k]);\r\n                    }\r\n                  }\r\n                }\r\n                value = checkValue;\r\n              } else if (formField.fieldType === \"text\") {\r\n                if (formField.dataType === \"money(yuan)\") {\r\n                  value = formUtil.formatMoney(value);\r\n                } else if (formField.dataType === \"money(wan)\") {\r\n                  value = formUtil.numDiv(value, 10000);\r\n                } else if (formField.dataType === \"money(baiwan)\") {\r\n                  value = formUtil.numDiv(value, 1000000);\r\n                } else if (formField.dataType === \"money(yi)\") {\r\n                  value = formUtil.numDiv(value, 100000000);\r\n                } else if (formField.dataType === \"percentile\") {\r\n                  value = formUtil.numMulti(value, 100);\r\n                } else if (formField.dataType === \"thousand\") {\r\n                  value = formUtil.numMulti(value, 1000);\r\n                } else if (formField.dataType === \"tenThousand\") {\r\n                  value = formUtil.numMulti(value, 10000);\r\n                }\r\n              }\r\n              if (this.option.query === \"query\") {\r\n                let parmArray = this.pramDicItem[formField.fieldName];\r\n                if (\r\n                  formField.fieldType === \"checkbox\" ||\r\n                  formField.fieldType === \"multipleSelection\"\r\n                ) {\r\n                  let checkBoxValue = \"\";\r\n                  for (let h in value) {\r\n                    if (!this.isEmpty(value[h])) {\r\n                      for (let i in parmArray) {\r\n                        if (parmArray[i][\"optCode\"] === value[h]) {\r\n                          if (checkBoxValue === \"\") {\r\n                            checkBoxValue = parmArray[i][\"optName\"];\r\n                          } else {\r\n                            checkBoxValue = parmArray[i][\"optName\"] + \"|\" + checkBoxValue;\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                  value = checkBoxValue;\r\n                } else if (formField.fieldType === \"switch\") {\r\n                  if (formField.switchValue.activeValue === value) {\r\n                    value = \"是\";\r\n                  } else {\r\n                    value = \"否\";\r\n                  }\r\n                } else if (formField.fieldType === \"date\") {\r\n                  try {\r\n                    let valueFormat = \"yyyyMMdd\";\r\n                    let format = \"yyyy-MM-dd\";\r\n                    if (!this.isEmpty(formField.dateFormat)) {\r\n                      if (!this.isEmpty(formField.dateFormat.valueFormat)) {\r\n                        valueFormat = formField.dateFormat.valueFormat;\r\n                      }\r\n                      if (!this.isEmpty(formField.dateFormat.format)) {\r\n                        format = formField.dateFormat.format;\r\n                      }\r\n                    }\r\n                    value = formUtil.dateFormat(\r\n                      formUtil.formatDate(value, valueFormat),\r\n                      format\r\n                    );\r\n                  } catch (error) {\r\n                    console.error(formField.fieldName + \"日期数据解析错误\");\r\n                  }\r\n                } else if (formField.fieldType === \"datetime\") {\r\n                  try {\r\n                    let valueFormat = \"yyyyMMdd HH:mm:ss\";\r\n                    let format = \"yyyy-MM-dd HH:mm:ss\";\r\n                    if (!this.isEmpty(formField.dateFormat)) {\r\n                      if (!this.isEmpty(formField.dateFormat.valueFormat)) {\r\n                        valueFormat = formField.dateFormat.valueFormat;\r\n                      }\r\n                      if (!this.isEmpty(formField.dateFormat.format)) {\r\n                        format = formField.dateFormat.format;\r\n                      }\r\n                    }\r\n                    value = formUtil.dateFormat(\r\n                      formUtil.formatDate(value, valueFormat),\r\n                      format\r\n                    );\r\n                  } catch (error) {\r\n                    console.error(formField.fieldName + \"日期数据解析错误\");\r\n                  }\r\n                } else {\r\n                  for (let i in parmArray) {\r\n                    if (parmArray[i][\"optCode\"] === value) {\r\n                      value = parmArray[i][\"optName\"];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (\r\n                this.option.formDisabled === true &&\r\n                !this.isEmpty(formField.formatter) &&\r\n                formUtil.parentVmExist(this, formField.formatter)\r\n              ) {\r\n                value = this.parentVm._self[formField.formatter](value);\r\n              }\r\n              this.$set(this.formData, arguments[0], value);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getFormValue() {\r\n      let formItem = this.option.formItem;\r\n      let data = JSON.parse(JSON.stringify(this.formData)); //深度copy\r\n      if (arguments.length === 0) {\r\n        for (let j in data) {\r\n          let formItems = this.getFormItems(formItem);\r\n          for (let i in formItems) {\r\n            let formField = formItems[i];\r\n            if (formField !== null && j === formField.fieldName) {\r\n              if (\r\n                formField.fieldType === \"checkbox\" ||\r\n                formField.fieldType === \"multipleSelection\"\r\n              ) {\r\n                data[j] = data[j].join(\"|\");\r\n              } else if (formField.fieldType === \"text\") {\r\n                let formTextValue = data[j];\r\n                if (formField.dataType === \"money(yuan)\") {\r\n                  formTextValue = formUtil.delcommafy(formTextValue);\r\n                } else if (formField.dataType === \"money(wan)\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 10000);\r\n                } else if (formField.dataType === \"money(baiwan)\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 1000000);\r\n                } else if (formField.dataType === \"money(yi)\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 100000000);\r\n                } else if (formField.dataType === \"percentile\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 100);\r\n                } else if (formField.dataType === \"thousand\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 1000);\r\n                } else if (formField.dataType === \"tenThousand\") {\r\n                  formTextValue = formUtil.numDiv(formTextValue, 10000);\r\n                }\r\n                data[j] = formTextValue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return data;\r\n      } else if (arguments.length >= 1) {\r\n        let result = this.getFormValue();\r\n        if (!this.isEmpty(result)) {\r\n          result = result[arguments[0]];\r\n        }\r\n        return result;\r\n      }\r\n    },\r\n    attr() {\r\n      let formItem = this.option.formItem;\r\n      if (arguments.length === 2) {\r\n        let formField = null;\r\n        for (let i in formItem) {\r\n          if (formItem[i].fieldType === \"group\") {\r\n            let groupItem = formItem[i].group;\r\n            for (let j in groupItem) {\r\n              if (arguments[0] === groupItem[j].fieldName) {\r\n                formField = groupItem[j];\r\n              }\r\n            }\r\n          } else {\r\n            if (arguments[0] === formItem[i].fieldName) {\r\n              formField = formItem[i];\r\n            }\r\n          }\r\n        }\r\n        let value = \"\";\r\n        if (formField !== null) {\r\n          if (arguments[1] === \"dicItem\") {\r\n            value = this.pramDicItem[arguments[0]];\r\n          } else if (arguments[1] === \"events\") {\r\n            value = this.events[arguments[0]];\r\n          } else if (arguments[1] === \"rules\") {\r\n            value = this.rules[arguments[0]];\r\n          } else {\r\n            value = formField[arguments[1]];\r\n          }\r\n        }\r\n        return value;\r\n      } else if (arguments.length >= 3) {\r\n        let formField = null;\r\n        for (let i in formItem) {\r\n          if (formItem[i].fieldType === \"group\") {\r\n            let groupItem = formItem[i].group;\r\n            for (let j in groupItem) {\r\n              if (arguments[0] === groupItem[j].fieldName) {\r\n                formField = groupItem[j];\r\n                formField[\"formItem\"] = formItem[i];\r\n                formField[\"label\"] = formItem[i].label;\r\n              }\r\n            }\r\n          } else {\r\n            if (arguments[0] === formItem[i].fieldName) {\r\n              formField = formItem[i];\r\n            }\r\n          }\r\n        }\r\n        if (formField !== null) {\r\n          if (arguments[1] === \"dicItem\") {\r\n            this.$set(this.pramDicItem, arguments[0], arguments[2]);\r\n          } else if (arguments[1] === \"events\") {\r\n            //解析事件\r\n            try {\r\n              let eventsArray = arguments[2];\r\n              let event = {};\r\n              for (let evetIndex in eventsArray) {\r\n                if (\r\n                  !this.isEmpty(eventsArray[evetIndex].type) &&\r\n                  eventsArray[evetIndex].type !== \"click\" &&\r\n                  formUtil.parentVmExist(this, eventsArray[evetIndex].callback)\r\n                ) {\r\n                  event[eventsArray[evetIndex].type] = this.parentVm._self[\r\n                    eventsArray[evetIndex].callback\r\n                  ];\r\n                }\r\n              }\r\n              this.$set(this.events, formField.fieldName, event);\r\n            } catch (error) {\r\n              console.error(\"事件解析错误：\" + error);\r\n              this.$set(this.events, formField.fieldName, {});\r\n            }\r\n          } else if (arguments[1] === \"rules\") {\r\n            //解析规则\r\n            try {\r\n              //解析规则\r\n              let formRules = arguments[2];\r\n              let fieldNameRules = [];\r\n              if (formField.fieldType === \"text\") {\r\n                let type = formField.dataType;\r\n                if (type === \"int\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateInt;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"long\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateLong;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (\r\n                  type == \"double(2)\" ||\r\n                  type == \"double(4)\" ||\r\n                  type == \"double(6)\" ||\r\n                  type == \"money(fen)\" ||\r\n                  type == \"money(jiao)\" ||\r\n                  type == \"money(wan)\" ||\r\n                  type == \"money(yi)\" ||\r\n                  type == \"percentile\" ||\r\n                  type === \"thousand\" ||\r\n                  type == \"tenThousand\"\r\n                ) {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateNumber;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"float\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateFloat;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type == \"boolean\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateBoolean;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                } else if (type === \"money(yuan)\") {\r\n                  let fieldNameRule = {};\r\n                  fieldNameRule[\"validator\"] = formUtil.validateMoney;\r\n                  fieldNameRule[\"trigger\"] = \"blur\";\r\n                  fieldNameRules.push(fieldNameRule);\r\n                }\r\n              }\r\n\r\n              for (let k in formRules) {\r\n                let fieldNameRule = {};\r\n                let trigger = \"blur\";\r\n                let message = \"\";\r\n                let type = \"\";\r\n                if (formRules[k].type === \"required\") {\r\n                  if (!this.isEmpty(formField[\"formItem\"])) {\r\n                    formField[\"formItem\"].required = true;\r\n                  }\r\n                  fieldNameRule[\"required\"] = true;\r\n                  trigger = \"blur\";\r\n                  message = formField.label + \"不能为空\";\r\n                } else if (formRules[k].type === \"validator\") {\r\n                  if (formUtil.parentVmExist(this, formRules[k].validator)) {\r\n                    fieldNameRule[\"validator\"] = this.parentVm._self[\r\n                      formRules[k].validator\r\n                    ];\r\n                  }\r\n                  trigger = \"blur\";\r\n                } else if (formRules[k].type === \"number\") {\r\n                  trigger = \"blur\";\r\n                  message = formField.label + \"必须为数字\";\r\n                  type = \"number\";\r\n                } else if (formRules[k].type === \"email\") {\r\n                  trigger = \"blur\";\r\n                  message = formField.label + \"格式不正确\";\r\n                  type = \"email\";\r\n                } else if (formRules[k].type === \"phone\") {\r\n                  trigger = \"blur\";\r\n                  message = \"请输入正确的手机号码\";\r\n                  fieldNameRule[\"pattern\"] = /^((13[0-9])|(14[5-9])|(15([0-3]|[5-9]))|(16[6-7])|(17[1-8])|(18[0-9])|(19[1|3])|(19[5|6])|(19[8|9]))\\d{8}$/;\r\n                } else if (formRules[k].type === \"mobile\") {\r\n                  trigger = \"blur\";\r\n                  message = \"请输入正确的电话\";\r\n                  fieldNameRule[\"pattern\"] = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/;\r\n                } else if (formRules[k].type === \"idNo\") {\r\n                  trigger = \"blur\";\r\n                  fieldNameRule[\"validator\"] = formUtil.validateIdNo;\r\n                } else {\r\n                  //continue\r\n                }\r\n\r\n                if (\r\n                  formField.fieldType === \"checkbox\" ||\r\n                  formField.fieldType === \"multipleSelection\"\r\n                ) {\r\n                  type = \"array\";\r\n                }\r\n\r\n                if (!this.isEmpty(formRules[k].min) && !this.isEmpty(formRules[k].max)) {\r\n                  fieldNameRule[\"min\"] = formRules[k].min;\r\n                  fieldNameRule[\"max\"] = formRules[k].max;\r\n                  message =\r\n                    formField.label +\r\n                    \"长度必须大于等于\" +\r\n                    formRules[k].min +\r\n                    \"并且小于等于\" +\r\n                    formRules[k].max;\r\n                } else if (!this.isEmpty(formRules[k].min)) {\r\n                  fieldNameRule[\"min\"] = formRules[k].min;\r\n                  message = formField.label + \"长度必须大于等于\" + formRules[k].min;\r\n                } else if (!this.isEmpty(formRules[k].max)) {\r\n                  fieldNameRule[\"max\"] = formRules[k].max;\r\n                  message = formField.label + \"长度必须小于等于\" + formRules[k].max;\r\n                }\r\n\r\n                if (!this.isEmpty(formRules[k].message)) {\r\n                  message = formRules[k].message;\r\n                }\r\n                fieldNameRule[\"message\"] = message;\r\n\r\n                if (!this.isEmpty(type)) {\r\n                  fieldNameRule[\"type\"] = type;\r\n                }\r\n\r\n                if (!this.isEmpty(formRules[k].trigger)) {\r\n                  trigger = formRules[k].trigger;\r\n                }\r\n                fieldNameRule[\"trigger\"] = trigger;\r\n\r\n                fieldNameRules.push(fieldNameRule);\r\n              }\r\n              this.$set(this.rules, formField.fieldName, fieldNameRules);\r\n            } catch (error) {\r\n              console.error(\"规则解析错误：\" + error);\r\n              this.$set(this.rules, formField.fieldName, []);\r\n            }\r\n          } else {\r\n            formField[arguments[1]] = arguments[2];\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async initForm() {\r\n      let _this = this;\r\n      _this.option = {};\r\n      _this.formData = {};\r\n      _this.events = {};\r\n      _this.pramDicItem = {};\r\n      _this.rules = {};\r\n      let formData;\r\n      if (_this.formId) {\r\n        try {\r\n          let formData = await axios.get(\r\n            formUtil.getFormProfilePath() + \"/form/\" + this.formId + \".json\"\r\n          );\r\n          _this.option = JSON.parse(JSON.stringify(formData.data));\r\n        } catch (error) {\r\n          _this.$message.error(\r\n            \"未找到 [ \" + _this.formId + \" ] 配置文件或配置文件格式错误\"\r\n          );\r\n        }\r\n      }\r\n      if (_this.initData !== undefined) {\r\n        _this.option = Object.assign(_this.option, _this.initData);\r\n      }\r\n      let formItem = _this.option.formItem;\r\n      let dicKeyArray = [];\r\n      let formItems = this.getFormItems(formItem);\r\n      for (let i in formItems) {\r\n        //解析字典项\r\n        let dicKey = formItems[i].dicKey;\r\n        if (!_this.isEmpty(dicKey) && formItems[i].optionType !== \"1\") {\r\n          let dicKeyObject = {};\r\n          dicKeyObject.dicKey = dicKey;\r\n          dicKeyObject.fieldName = formItems[i].fieldName;\r\n          dicKeyArray.push(dicKeyObject);\r\n        } else {\r\n          _this.$set(_this.pramDicItem, formItems[i].fieldName, formItems[i].dicItem);\r\n        }\r\n\r\n        if (\r\n          Array.isArray(formItems[i].value) &&\r\n          (formItems[i].fieldType === \"checkbox\" ||\r\n            formItems[i].fieldType === \"multipleSelection\")\r\n        ) {\r\n          formItems[i].value = formItems[i].value.join(\"|\");\r\n        }\r\n\r\n        _this.setFormValue(formItems[i].fieldName, formItems[i].value, true);\r\n\r\n        //解析事件\r\n        _this.attr(formItems[i].fieldName, \"events\", formItems[i].events);\r\n\r\n        //解析规则\r\n        _this.attr(formItems[i].fieldName, \"rules\", formItems[i].rules);\r\n      }\r\n\r\n      //请求字典json文件\r\n      let keyArray = [];\r\n      for (let j in dicKeyArray) {\r\n        keyArray.push(dicKeyArray[j].dicKey);\r\n      }\r\n      formUtil.getParmDic(keyArray, (dicKeyData) => {\r\n        for (let k in dicKeyArray) {\r\n          _this.$set(\r\n            _this.pramDicItem,\r\n            dicKeyArray[k].fieldName,\r\n            dicKeyData[dicKeyArray[k].dicKey]\r\n          );\r\n        }\r\n      });\r\n\r\n      _this.clearValidate();\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mftcc-form,\r\n.mftcc-form-search {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n.mftcc-form .el-form-item__content,\r\n.mftcc-form-search .el-form-item__content {\r\n  width: auto;\r\n}\r\n.mftcc-form .el-form-item,\r\n.mftcc-form-search .el-form-item {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.mftcc-form .mftcc-form-group .el-form-item,\r\n.mftcc-form-search .mftcc-form-group .el-form-item {\r\n  padding: 0;\r\n}\r\n.mftcc-form .el-select,\r\n.mftcc-form-search .el-select {\r\n  width: 100%;\r\n}\r\n.mftcc-form .form-el-row,\r\n.mftcc-form-search .form-el-row {\r\n  width: 100%;\r\n}\r\n</style>\r\n","<template>\r\n    <el-dialog \r\n        :visible.sync=\"visible\"\r\n        @close=\"$emit('update:show', false)\"\r\n        :show=\"show\"\r\n        class=\"form-dialog\"\r\n        :width=\"width||'1000px'\"\r\n        @open=\"opened\"\r\n        ref=\"dialog\"\r\n        :fullscreen=\"fullscreen||false\"\r\n        :close-on-click-modal=\"false\"\r\n        :center=\"center||false\">\r\n        <div slot=\"title\" class=\"dialog-header\">\r\n           {{ title||\"form表单\" }}\r\n        </div>\r\n        <div class=\"dialog-content\">\r\n            <mftcc-form :formId=\"formId\" :parentVm=\"parentVm\" ref=\"dialogForm\"></mftcc-form> \r\n        </div>\r\n        <div slot=\"footer\" class=\"dialog-footer\" v-if=\"footer === false?false:true\">  \r\n            <el-button type=\"primary\" @click=\"submit\">{{confirmButtonText||\"确 定\"}}</el-button>\r\n            <el-button @click=\"visible = false\">{{cancelButtonText||\"取 消\"}}</el-button>\r\n        </div>\r\n    </el-dialog>\r\n</template>\r\n<script>\r\nimport mftccForm from '../components/mftccForm'\r\n  export default {\r\n    data() {\r\n      return {\r\n          visible: this.show\r\n      }\r\n    },\r\n    props: [\"show\",\"width\",\"height\",\"fullscreen\",\"center\",\"formId\",\"parentVm\",\"footer\",\"title\",\"confirmButtonText\",\"cancelButtonText\"],\r\n    watch: {\r\n        show () {\r\n            this.visible = this.show;\r\n        },\r\n    },\r\n    created(){\r\n        \r\n    },\r\n    methods: {\r\n        getFormRef(callback){\r\n           this.$nextTick(() => {\r\n               if(typeof callback === 'function'){\r\n                    callback(this.$refs.dialogForm)\r\n                }\r\n           })\r\n        },\r\n        submit(){\r\n            var value = this.$refs.dialogForm.getFormValue();\r\n            this.$emit('callback', value);\r\n        },\r\n        opened(){\r\n            this.$refs.dialog.$el.children[0].style.height = this.height||'600px';\r\n        }\r\n    },\r\n    components: {\r\n        mftccForm\r\n    }\r\n  }\r\n</script>\r\n<style>\r\n.form-dialog .el-dialog{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.form-dialog .el-dialog__body{\r\n    flex-grow: 1;\r\n    overflow: auto;\r\n    padding-top: 10px;\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.form-dialog .el-dialog{\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n        -ms-flex-direction: column;\r\n            flex-direction: column;\r\n}\r\n.form-dialog .el-dialog__body{\r\n    -webkit-box-flex: 1;\r\n        -ms-flex-positive: 1;\r\n            flex-grow: 1;\r\n    overflow: auto;\r\n    padding-top: 10px;\r\n}\r\n","<template>\r\n  <div\r\n    ref=\"mftccTable\"\r\n    style=\"flex-grow: 1; position: relative\"\r\n    :class=\"option.query === 'query' ? 'mftcc-table-query' : 'mftcc-table'\"\r\n  >\r\n    <div class=\"tableTools\">\r\n      <el-dropdown\r\n        size=\"small\"\r\n        v-if=\"option.isDColumn\"\r\n        :hide-on-click=\"false\"\r\n        class=\"el-dropdown-DColumn\"\r\n        trigger=\"click\"\r\n      >\r\n        <el-button\r\n          icon=\"el-icon-setting\"\r\n          type=\"primary\"\r\n          class=\"mftcc-table-dropdown\"\r\n        >\r\n        </el-button>\r\n        <el-dropdown-menu slot=\"dropdown\" style=\"text-align: center\">\r\n          <div style=\"text-align: left\">\r\n            <template v-for=\"(col, index) in option.columns\">\r\n              <el-dropdown-item :key=\"index\" v-if=\"col.prop != ''\">\r\n                <el-checkbox\r\n                  :checked=\"col.isShow\"\r\n                  v-model=\"col.isShow\"\r\n                  @change=\"checkChange(col)\"\r\n                  >{{ col.label }}</el-checkbox\r\n                >\r\n              </el-dropdown-item>\r\n            </template>\r\n          </div>\r\n        </el-dropdown-menu>\r\n      </el-dropdown>\r\n      <el-button\r\n        v-if=\"option.isExport && $hasPerm(option.isExportPerm || true)\"\r\n        type=\"primary\"\r\n        class=\"exportBtn\"\r\n        icon=\"el-icon-download\"\r\n        @click=\"exportTable\"\r\n      ></el-button>\r\n    </div>\r\n    <div v-loading=\"option.loading\">\r\n      <el-table\r\n        :data=\"option.tableData\"\r\n        :max-height=\"maxHeight\"\r\n        :height=\"height\"\r\n        highlight-current-row\r\n        :ref=\"option.tableId\"\r\n        style=\"width: 100%\"\r\n        empty-text=\"暂无数据\"\r\n        :row-style=\"rowStyle\"\r\n        :row-class-name=\"rowClassName\"\r\n        :cell-style=\"cellStyle\"\r\n        :cell-class-name=\"cellClassName\"\r\n        @current-change=\"currentChange\"\r\n        @selection-change=\"$emit('selection-change', $event)\"\r\n      >\r\n        <template\r\n          v-if=\"\r\n            option.isSelect != '' && option.isSelect ? option.isSelect : false\r\n          \"\r\n        >\r\n          <el-table-column type=\"selection\" width=\"55\"> </el-table-column>\r\n        </template>\r\n        <template v-for=\"(col, index) in option.columns\">\r\n          <el-table-column\r\n            v-if=\"col.prop != '' ? col.isShow : true\"\r\n            :key=\"index\"\r\n            :prop=\"col.prop\"\r\n            :label=\"col.label\"\r\n            :show-overflow-tooltip=\"\r\n              col['show-overflow-tooltip'] === true ? true : false\r\n            \"\r\n            :min-width=\"col.width\"\r\n            :fixed=\"col.fixed || false\"\r\n            :align=\"col.align || 'left'\"\r\n            :width=\"col.prop == '' ? col.width : ''\"\r\n          >\r\n            <template slot-scope=\"scope\">\r\n              <div v-if=\"col.prop == ''\">\r\n                <template v-for=\"(btn, key) in col.data\">\r\n                  <el-button\r\n                    :key=\"key\"\r\n                    size=\"mini\"\r\n                    :disabled=\"buttonAuth(btn, scope.row)\"\r\n                    v-if=\"$hasPerm(btn.perm || true)\"\r\n                    @click=\"Fn(btn.type, scope.$index, scope.row)\"\r\n                    >{{ btn.label }}</el-button\r\n                  >\r\n                </template>\r\n              </div>\r\n              <div v-else-if=\"col.href != undefined\">\r\n                <div v-if=\"col.href.path != undefined\">\r\n                  <a\r\n                    href=\"javascript:void(0)\"\r\n                    @click=\"router(col.href, scope.row)\"\r\n                    >{{ tableFormatter(scope.row[col.prop], col) }}</a\r\n                  >\r\n                </div>\r\n                <div v-else-if=\"col.href.callbackType != undefined\">\r\n                  <a\r\n                    href=\"javascript:void(0)\"\r\n                    @click=\"Fn(col.href.callbackType, scope.$index, scope.row)\"\r\n                    >{{ tableFormatter(scope.row[col.prop], col) }}</a\r\n                  >\r\n                </div>\r\n                <div v-else>\r\n                  <span>{{ tableFormatter(scope.row[col.prop], col) }}</span>\r\n                </div>\r\n              </div>\r\n              <div v-else-if=\"col.fieldType === 'switch'\">\r\n                <el-switch\r\n                  v-model=\"scope.row[col.prop]\"\r\n                  :active-value=\"\r\n                    isEmpty(col.switchAttr) ||\r\n                    isEmpty(col.switchAttr.activeValue)\r\n                      ? 0\r\n                      : col.switchAttr.activeValue\r\n                  \"\r\n                  :inactive-value=\"\r\n                    isEmpty(col.switchAttr) ||\r\n                    isEmpty(col.switchAttr.inActiveValue)\r\n                      ? 1\r\n                      : col.switchAttr.inActiveValue\r\n                  \"\r\n                  :disabled=\"\r\n                    isEmpty(col.switchAttr) || isEmpty(col.switchAttr.disabled)\r\n                      ? false\r\n                      : col.switchAttr.disabled\r\n                  \"\r\n                  :readonly=\"\r\n                    isEmpty(col.switchAttr) || isEmpty(col.switchAttr.readOnly)\r\n                      ? false\r\n                      : col.switchAttr.readOnly\r\n                  \"\r\n                  @change=\"\r\n                    Fn(col.switchAttr.changeEvent, scope.$index, scope.row)\r\n                  \"\r\n                ></el-switch>\r\n              </div>\r\n              <div v-else>\r\n                <span>{{ tableFormatter(scope.row[col.prop], col) }}</span>\r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n        </template>\r\n        <!-- <el-table-column\r\n                label=\"操作\"\r\n                :min-width=\"option.buttons.width\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button v-for=\"(btn,index) in option.buttons.data\"\r\n                        :key=\"index\"\r\n                        size=\"mini\"\r\n                        v-if=\"$hasPerm(btn.perm||true)\"\r\n                        @click=\"Fn(btn.type, scope.$index, scope.row)\">{{ btn.label }}</el-button>\r\n                </template>\r\n            </el-table-column> -->\r\n      </el-table>\r\n    </div>\r\n    <el-pagination\r\n      v-if=\"option.isPagination\"\r\n      background\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      :page-sizes=\"[10, 20, 50, 100]\"\r\n      :page-size=\"pageSize\"\r\n      :current-page=\"pageNo\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"pageTotal\"\r\n    >\r\n    </el-pagination>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { findByPage, getParameter } from \"../axios\";\r\nimport formUtil from \"../utils/formUtil\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      option: {},\r\n      searchData: {},\r\n      maxHeight: null,\r\n      height: null,\r\n      pageNo: 1,\r\n      pageSize: 10,\r\n      pageTotal: 0,\r\n      currentRow: null,\r\n\r\n      isEmpty: formUtil.isEmpty,\r\n      pramDicItem: {},\r\n      exportHeader: [],\r\n      exportField: []\r\n    };\r\n  },\r\n  props: [\"tableId\", \"initData\", \"initSearchData\", \"parentVm\"],\r\n  watch: {\r\n    tableId: {\r\n      handler(val, oldVal) {\r\n        this.initTable(() => {\r\n          this.$emit(\"callback\");\r\n        });\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.tableResize();\r\n    });\r\n  },\r\n  methods: {\r\n    rowStyle(obj) {\r\n      let event = this.option[\"row-style\"];\r\n      if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n        return event;\r\n      } else if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      }\r\n    },\r\n    rowClassName(obj) {\r\n      let event = this.option[\"row-class-style\"];\r\n      if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      } else {\r\n        return event;\r\n      }\r\n    },\r\n    cellStyle(obj) {\r\n      let event = this.option[\"cell-style\"];\r\n      if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n        return event;\r\n      } else if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      }\r\n    },\r\n    cellClassName(obj) {\r\n      let event = this.option[\"cell-class-style\"];\r\n      if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      } else {\r\n        return event;\r\n      }\r\n    },\r\n    buttonAuth(btn, row) {\r\n      let buttonAuth = false;\r\n      let auth = btn.auth || \"\";\r\n      let authArray = auth.split(\";\");\r\n      for (let i in authArray) {\r\n        if (!this.isEmpty(authArray[i])) {\r\n          let authObj = authArray[i].split(\"-\");\r\n          if (authObj.length === 2) {\r\n            if (this.$store.getters.buttonAuth[authObj[0]] == authObj[1]) {\r\n              buttonAuth = true;\r\n            } else if (row[authObj[0]] == authObj[1]) {\r\n              buttonAuth = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return buttonAuth;\r\n    },\r\n    tableFormatter(cellValue, item) {\r\n      let _this = this;\r\n      let value = \"\";\r\n      if (_this.isEmpty(cellValue)) {\r\n        return cellValue;\r\n      } else {\r\n        value = cellValue;\r\n      }\r\n      let parmArray = _this.pramDicItem[item.prop];\r\n      if (\r\n        item.fieldType === \"checkbox\" ||\r\n        item.fieldType === \"multipleSelection\"\r\n      ) {\r\n        let checkBoxValue = \"\";\r\n        let checkArray = cellValue.split(\"|\");\r\n        for (let h in checkArray) {\r\n          if (!_this.isEmpty(checkArray[h])) {\r\n            for (let i in parmArray) {\r\n              if (parmArray[i][\"optCode\"] === checkArray[h]) {\r\n                if (checkBoxValue === \"\") {\r\n                  checkBoxValue = parmArray[i][\"optName\"];\r\n                } else {\r\n                  checkBoxValue = parmArray[i][\"optName\"] + \"|\" + checkBoxValue;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        value = checkBoxValue;\r\n      } else if (item.fieldType === \"text\") {\r\n        if (item.dataType === \"money(yuan)\") {\r\n          value = formUtil.formatMoney(cellValue);\r\n        } else if (item.dataType === \"percentile\") {\r\n          value = formUtil.numMulti(cellValue, 100);\r\n        } else if (item.dataType === \"thousand\") {\r\n          value = formUtil.numMulti(cellValue, 1000);\r\n        } else if (item.dataType === \"tenThousand\") {\r\n          value = formUtil.numMulti(cellValue, 10000);\r\n        }\r\n      } else if (item.fieldType === \"date\") {\r\n        try {\r\n          let valueFormat = \"yyyyMMdd\";\r\n          let format = \"yyyy-MM-dd\";\r\n          if (!this.isEmpty(item.dateFormat)) {\r\n            if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n              valueFormat = item.dateFormat.valueFormat;\r\n            }\r\n            if (!this.isEmpty(item.dateFormat.format)) {\r\n              format = item.dateFormat.format;\r\n            }\r\n          }\r\n          value = formUtil.dateFormat(\r\n            formUtil.formatDate(value, valueFormat),\r\n            format\r\n          );\r\n        } catch (error) {\r\n          console.error(item.fieldName + \"日期数据解析错误\");\r\n        }\r\n      } else if (item.fieldType === \"datetime\") {\r\n        try {\r\n          let valueFormat = \"yyyyMMdd HH:mm:ss\";\r\n          let format = \"yyyy-MM-dd HH:mm:ss\";\r\n          if (!this.isEmpty(item.dateFormat)) {\r\n            if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n              valueFormat = item.dateFormat.valueFormat;\r\n            }\r\n            if (!this.isEmpty(item.dateFormat.format)) {\r\n              format = item.dateFormat.format;\r\n            }\r\n          }\r\n          value = formUtil.dateFormat(\r\n            formUtil.formatDate(value, valueFormat),\r\n            format\r\n          );\r\n        } catch (error) {\r\n          console.error(item.fieldName + \"日期数据解析错误\");\r\n        }\r\n      } else {\r\n        for (let i in parmArray) {\r\n          if (parmArray[i][\"optCode\"] === cellValue) {\r\n            value = parmArray[i][\"optName\"];\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        !_this.isEmpty(item.formatter) &&\r\n        formUtil.parentVmExist(this, item.formatter)\r\n      ) {\r\n        value = this.parentVm._self[item.formatter](value);\r\n      } else if (!_this.isEmpty(item.desensitization)) {\r\n        value = formUtil.desensitization(value, item.desensitization);\r\n      }\r\n      return value;\r\n    },\r\n    Fn(method, index, row) {\r\n      // this[method](index, row);\r\n      //this.$emit('callback', method, index, row);\r\n      if (formUtil.parentVmExist(this, method)) {\r\n        this.parentVm._self[method](index, row);\r\n      }\r\n    },\r\n    router(href, row) {\r\n      let path = href.path;\r\n      let query = {};\r\n      for (let queryKey of href.query) {\r\n        query[queryKey] = row[queryKey];\r\n      }\r\n      this.$router.push({ path: path, query: query });\r\n    },\r\n    tableResize() {\r\n      if (!this.option.height || this.option.height == \"auto\") {\r\n        if (this.option.maxHeight) {\r\n          this.maxHeight = this.option.maxHeight;\r\n        } else {\r\n          this.maxHeight = this.$refs.mftccTable.offsetHeight;\r\n        }\r\n        this.option.maxHeight = this.maxHeight;\r\n        if (this.option.isPagination === true) {\r\n          if ((this.maxHeight + \"\").endsWith(\"px\")) {\r\n            this.maxHeight =\r\n              Number(this.maxHeight.substring(0, this.maxHeight.length - 2)) -\r\n              40;\r\n          } else {\r\n            this.maxHeight = Number(this.maxHeight) - 40;\r\n          }\r\n        }\r\n        if (this.maxHeight <= 0) {\r\n          this.maxHeight = null;\r\n        }\r\n      } else {\r\n        this.height = this.option.height;\r\n      }\r\n    },\r\n    getTableData(pageNo, pageSize, callback) {\r\n      var _this = this;\r\n      this.searchData = this.searchData || {};\r\n      this.searchData.pageNo = pageNo;\r\n      this.searchData.pageSize = pageSize;\r\n      _this.option.tableData = [];\r\n      let url = this.option.url;\r\n      url = formUtil.converUrl(url);\r\n      findByPage(\r\n        url,\r\n        this.searchData,\r\n        true,\r\n        res => {\r\n          if (res.code == 0) {\r\n            let dataList = res.list;\r\n            if (_this.option.isPagination === true || pageSize == -1) {\r\n              _this.option.tableData = dataList.records;\r\n              _this.pageNo = dataList.current; // 当前页数\r\n              _this.pageSize = dataList.size; // 每页数量\r\n              _this.pageTotal = dataList.total; // 页面总数\r\n              let colList = res.colList;\r\n              if (colList && colList.length > 0) {\r\n                _this.option.columns = colList;\r\n              }\r\n            } else {\r\n              _this.option.tableData = dataList;\r\n            }\r\n          }\r\n          _this.option.loading = false;\r\n          _this.$nextTick(() => {\r\n            _this.tableResize();\r\n          });\r\n          if (typeof callback === \"function\") {\r\n            _this.$nextTick(() => {\r\n              callback();\r\n            });\r\n          }\r\n        },\r\n        error => {\r\n          _this.option.loading = false;\r\n          _this.$nextTick(() => {\r\n            _this.tableResize();\r\n          });\r\n          if (typeof callback === \"function\") {\r\n            _this.$nextTick(() => {\r\n              callback();\r\n            });\r\n          }\r\n        }\r\n      );\r\n    },\r\n    refresh() {\r\n      this.getTableData(this.pageNo, this.pageSize);\r\n    },\r\n    search(searchData) {\r\n      this.pageNo = 1;\r\n      this.pageSize = 10;\r\n      this.pageTotal = 0;\r\n      this.currentRow = null;\r\n      this.searchData = this.initSearchData || {};\r\n      if (!this.isEmpty(searchData)) {\r\n        for (let i in searchData) {\r\n          this.searchData[i] = searchData[i];\r\n        }\r\n      }\r\n      this.getTableData(this.pageNo, this.pageSize);\r\n    },\r\n    // handleRowChange(val) {\r\n    //     this.currentRow = val;\r\n    // },\r\n    handleSizeChange(val) {\r\n      this.getTableData(1, val);\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.getTableData(val, this.pageSize);\r\n    },\r\n    checkChange(col) {\r\n      console.log(col);\r\n    },\r\n    setSelectValue() {\r\n      if (arguments.length === 0) {\r\n        this.$refs[this.option.tableId].clearSelection();\r\n      } else if (arguments.length === 1) {\r\n        this.setSelectValue(this.option.selectKey, arguments[0]);\r\n      } else if (arguments.length === 2) {\r\n        let selectKey = arguments[0];\r\n        let tableDatas = this.option.tableData;\r\n        let value = arguments[1];\r\n        if (!(arguments[1] instanceof Array)) {\r\n          value = [arguments[1]];\r\n        }\r\n        for (let i in tableDatas) {\r\n          if (\r\n            tableDatas[i][selectKey] !== undefined &&\r\n            value.indexOf(tableDatas[i][selectKey]) > -1\r\n          ) {\r\n            this.$refs[this.option.tableId].toggleRowSelection(tableDatas[i]);\r\n          }\r\n        }\r\n      } else {\r\n        let selectKey = arguments[0];\r\n        let tableDatas = this.option.tableData;\r\n        let value = arguments[1];\r\n        if (!(arguments[1] instanceof Array)) {\r\n          value = [arguments[1]];\r\n        }\r\n        for (let i in tableDatas) {\r\n          if (\r\n            tableDatas[i][selectKey] !== undefined &&\r\n            value.indexOf(tableDatas[i][selectKey]) > -1\r\n          ) {\r\n            this.$refs[this.option.tableId].toggleRowSelection(\r\n              tableDatas[i],\r\n              arguments[2]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getSelectValue() {\r\n      let parmKeyArray = this.$refs[this.option.tableId].store.states.selection;\r\n      return parmKeyArray;\r\n    },\r\n    setCurrentValue() {\r\n      if (arguments.length === 0) {\r\n        this.$refs[this.option.tableId].setCurrentRow();\r\n      } else if (arguments.length === 1) {\r\n        this.setCurrentValue(this.option.selectKey, arguments[0]);\r\n      } else {\r\n        let selectKey = arguments[0];\r\n        let tableDatas = this.option.tableData;\r\n        for (let i in tableDatas) {\r\n          if (\r\n            tableDatas[i][selectKey] !== undefined &&\r\n            tableDatas[i][selectKey] === arguments[1]\r\n          ) {\r\n            this.$refs[this.option.tableId].setCurrentRow(tableDatas[i]);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getCurrentValue() {\r\n      return this.currentRow;\r\n    },\r\n    currentChange(currentRow, oldCurrentRow) {\r\n      this.currentRow = currentRow;\r\n      this.$emit(\"current-change\", currentRow, oldCurrentRow);\r\n    },\r\n    async initTable(callback) {\r\n      let _this = this;\r\n      _this.option = {};\r\n      _this.searchData = _this.initSearchData || {};\r\n      _this.maxHeight = null;\r\n      _this.height = null;\r\n      _this.pageNo = 1;\r\n      _this.pageSize = 10;\r\n      _this.pageTotal = 0;\r\n      _this.currentRow = null;\r\n      let tableData;\r\n      try {\r\n        if (this.tableId) {\r\n          let jsonData = await axios.get(\r\n            formUtil.getFormProfilePath() + \"/table/\" + this.tableId + \".json\"\r\n          );\r\n          tableData = jsonData.data;\r\n        }\r\n      } catch (error) {\r\n        _this.$message.error(\r\n          \"未找到 [ \" + this.tableId + \" ] 配置文件或配置文件格式错误\"\r\n        );\r\n      }\r\n      _this.option = JSON.parse(JSON.stringify(tableData));\r\n      if (_this.initData !== undefined) {\r\n        for (let i in _this.initData) {\r\n          _this.option[i] = _this.initData[i];\r\n        }\r\n      }\r\n\r\n      let formItem = _this.option.columns;\r\n      let dicKeyArray = [];\r\n      for (let i in formItem) {\r\n        if (formItem[i].prop !== \"\") {\r\n          //解析字典项\r\n          let dicKey = formItem[i].dicKey;\r\n          if (!_this.isEmpty(dicKey)) {\r\n            let dicKeyObject = {};\r\n            dicKeyObject.dicKey = dicKey;\r\n            dicKeyObject.fieldName = formItem[i].prop;\r\n            dicKeyArray.push(dicKeyObject);\r\n          } else {\r\n            _this.$set(\r\n              _this.pramDicItem,\r\n              formItem[i].prop,\r\n              formItem[i].dicItem\r\n            );\r\n          }\r\n\r\n          //获取库中选择字典\r\n          if (\r\n            (formItem[i].fieldType === \"select\" ||\r\n              formItem[i].fieldType === \"multipleSelection\") &&\r\n            formItem[i].dataType === \"library\"\r\n          ) {\r\n            getParameter(formItem[i].library.url, { query: \"\" }, true, function(\r\n              reponse\r\n            ) {\r\n              if (reponse.code === 0) {\r\n                let parmArray = [];\r\n                let list = reponse.list;\r\n                let realField = \"optCode\";\r\n                let showField = \"optName\";\r\n                if (!_this.isEmpty(formItem[i].library.realField)) {\r\n                  realField = formItem[i].library.realField;\r\n                }\r\n                if (!_this.isEmpty(formItem[i].library.showField)) {\r\n                  showField = formItem[i].library.showField;\r\n                }\r\n                for (let i in list) {\r\n                  let option = {\r\n                    optCode: list[i][realField],\r\n                    optName: list[i][showField]\r\n                  };\r\n                  parmArray.push(option);\r\n                }\r\n                _this.$set(_this.pramDicItem, formItem[i].prop, parmArray);\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      //请求字典json文件\r\n      let keyArray = [];\r\n      for (let j in dicKeyArray) {\r\n        keyArray.push(dicKeyArray[j].dicKey);\r\n      }\r\n      formUtil.getParmDic(keyArray, dicKeyData => {\r\n        for (let k in dicKeyArray) {\r\n          _this.$set(\r\n            _this.pramDicItem,\r\n            dicKeyArray[k].fieldName,\r\n            dicKeyData[dicKeyArray[k].dicKey]\r\n          );\r\n        }\r\n      });\r\n\r\n      let url = _this.option.url;\r\n      if (url !== undefined && url !== null && url !== \"\") {\r\n        _this.getTableData(_this.pageNo, _this.pageSize, callback);\r\n      } else {\r\n        if (typeof callback === \"function\") {\r\n          _this.$nextTick(() => {\r\n            callback();\r\n          });\r\n        }\r\n      }\r\n      // _this.$nextTick(() => {\r\n      //     _this.tableResize();\r\n      // })\r\n    },\r\n    exportTable() {\r\n      this.$confirm(\"确定要导出当前列表全部数据？\", \"提示\", {\r\n        dangerouslyUseHTMLString: true,\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\"\r\n      })\r\n        .then(() => {\r\n          this.getExpportData();\r\n        })\r\n        .catch(() => {});\r\n    },\r\n    getExpportData() {\r\n      let loading = this.$loading({\r\n        lock: true,\r\n        text: \"正在拼命导出......\",\r\n        spinner: \"el-icon-loading\",\r\n        background: \"rgba(0, 0, 0, 0.7)\"\r\n      });\r\n      this.searchData = this.searchData || {};\r\n      this.searchData.pageNo = 1;\r\n      this.searchData.pageSize = -1;\r\n\r\n      findByPage(\r\n        this.option.url,\r\n        this.searchData,\r\n        true,\r\n        res => {\r\n          if (res.code == 0 && res.list.records.length > 0) {\r\n            require.ensure([], () => {\r\n              /* eslint-disable */\r\n              // 这里的径路要修改正确\r\n              const {\r\n                export_json_to_excel\r\n              } = require(\"../plugins/Export2Excel.js\");\r\n              /* eslint-enable  */\r\n              for (let c in this.option.columns) {\r\n                if (this.option.columns[c].prop != \"\") {\r\n                  this.exportField.push(this.option.columns[c].prop);\r\n                  this.exportHeader.push(this.option.columns[c].label);\r\n                }\r\n              }\r\n              let tableData = res.list.records;\r\n              const data = this.formatJson(this.option.columns, tableData);\r\n              export_json_to_excel(this.exportHeader, data, this.tableId);\r\n              loading.close();\r\n            });\r\n          } else {\r\n            this.$alert(res.msg, this.$alertTitle, {\r\n              type: res.msgType,\r\n              dangerouslyUseHTMLString: true\r\n            });\r\n            loading.close();\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          loading.close();\r\n        }\r\n      );\r\n    },\r\n    formatJson(columns, tableData) {\r\n      let data = tableData.map(data => {\r\n        return columns.map(col => {\r\n          if (col.prop != \"\" && col.isShow) {\r\n            let value = data[col.prop];\r\n            if (\r\n              col.dataType === \"money(yuan)\" ||\r\n              col.dataType === \"money(wan)\" ||\r\n              col.dataType === \"percentile\" ||\r\n              col.dataType === \"thousand\" ||\r\n              col.dataType === \"tenThousand\"\r\n            ) {\r\n              return value;\r\n            } else {\r\n              return this.tableFormatter(value, col);\r\n            }\r\n          } else {\r\n            return null;\r\n          }\r\n        });\r\n      });\r\n      return data;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.mftcc-table .el-checkbox__label {\r\n  font-size: 12px;\r\n}\r\n.mftcc-table .tableTools {\r\n  position: absolute;\r\n  z-index: 1;\r\n  top: 8px;\r\n  right: 8px;\r\n}\r\n.mftcc-table .exportBtn,\r\n.mftcc-table .mftcc-table-dropdown {\r\n  border: 1px solid rgb(64 158 255 / 45%);\r\n  background: #fff;\r\n  color: #409eff;\r\n  border-radius: 2px;\r\n  width: 68px;\r\n  padding: 0;\r\n}\r\n.mftcc-table .el-pagination {\r\n  margin-top: 5px;\r\n}\r\n.mftcc-table-query .el-table__body,\r\n.mftcc-table .el-table__body {\r\n  width: calc(100% - 4px) !important;\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-table .el-checkbox__label {\r\n  font-size: 12px;\r\n}\r\n\r\n.mftcc-table .el-pagination {\r\n  margin-top: 5px;\r\n}\r\n\r\n.mftcc-table-query .el-table__body,\r\n.mftcc-table .el-table__body {\r\n  width: calc(100% - 4px) !important;\r\n}\r\n\r\n.errorMessage .el-message__content {\r\n  line-height: 20px;\r\n}\r\n\r\n.errorMessage .el-message__closeBtn {\r\n  top: 24px;\r\n}\r\n\r\n.mftcc-table .el-table th > .cell {\r\n  display: block;\r\n  padding-left: 14px;\r\n  padding-right: 14px;\r\n  white-space: nowrap;\r\n  overflow: visible;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.el-table .caret-wrapper {\r\n  display: -webkit-inline-box;\r\n  display: -ms-inline-flexbox;\r\n  display: inline-flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  height: 34px;\r\n  width: 24px;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  overflow: initial;\r\n  position: absolute;\r\n  left: 84%;\r\n  bottom: -30%;\r\n}\r\n\r\n.btnPage {\r\n  margin-top: 2%;\r\n}\r\n\r\n.mftcc-table .el-table__body tr td.success {\r\n  color: #67c23a;\r\n}\r\n\r\n.mftcc-table .el-table__body tr td.warning {\r\n  color: #e6a23c;\r\n}\r\n\r\n.mftcc-table .el-table__body tr td.danger {\r\n  color: #f56c6c;\r\n}\r\n\r\n.expandBtn {\r\n  background: url(\"../../../assets/common/trapezoidal.png\") center center no-repeat;\r\n}\r\n","<template>\r\n    <el-dialog \r\n        :visible.sync=\"visible\"\r\n        @close=\"$emit('update:show', false)\"\r\n        :show=\"show\"\r\n        class=\"mftcc-table-dialog\"\r\n        :width=\"option.width||'1000px'\"\r\n        @open=\"opened\"\r\n        ref=\"dialog\"\r\n        :close-on-click-modal=\"false\"\r\n        :title=\"option.title||title\">\r\n        <div class=\"dialog-content\">\r\n            <template v-if=\"(option.formId && option.search !== false)?true:false\">\r\n                <div class=\"mftcc-search-form\">\r\n                    <el-row>\r\n                        <el-col :span=\"20\">\r\n                        <div class=\"custom-search\">\r\n                            <mftcc-search-form \r\n                                :formId=\"option.formId\" \r\n                                :parentVm=\"parentVm\"  \r\n                                ref=\"searchForm\">\r\n                            </mftcc-search-form> \r\n                        </div>\r\n                        </el-col>\r\n                        <el-col :span=\"4\">\r\n                        <div class=\"search-button\">\r\n                            <el-button type=\"primary\" @click=\"onSearch\">查询</el-button>\r\n                        </div>\r\n                        </el-col>\r\n                    </el-row>\r\n                </div>\r\n            </template>\r\n            <div class=\"mftcc-dialog-content\">\r\n                <mftcc-table \r\n                    :tableId=\"option.tableId\" \r\n                    :parentVm=\"parentVm\" \r\n                    :initData=\"initData\" \r\n                    :initSearchData=\"initSearchData\" \r\n                    @current-change=\"currentChange\"\r\n                    @selection-change=\"$emit('selection-change', $event)\"\r\n                    ref=\"dialogList\">\r\n                </mftcc-table> \r\n            </div>\r\n        </div>\r\n        <div slot=\"footer\" class=\"dialog-footer\" v-if=\"option.footer === false?false:true\">\r\n            <el-button type=\"primary\" @click=\"submit\">确 定</el-button>\r\n            <el-button @click=\"visible = false\">取 消</el-button>\r\n        </div>\r\n    </el-dialog>\r\n</template>\r\n<script>\r\nimport {postJson} from '../axios'\r\nimport mftccTable from '../components/mftccTable'\r\nimport formUtil from '../utils/formUtil'\r\nimport mftccSearchForm from '../components/mftccSearchForm'\r\n  export default {\r\n    data() {\r\n      return {\r\n          title: \"列表筛选器\",\r\n          initData: {},\r\n          visible: this.show,\r\n          initSearchData: \"\",\r\n          isEmpty: formUtil.isEmpty\r\n      }\r\n    },\r\n    props: [\"show\",\"option\",\"parentVm\"],\r\n    watch: {\r\n        show () {\r\n            let _this = this\r\n            _this.visible = _this.show;\r\n            if(_this.visible === true){\r\n                if(_this.option.type === \"radio\"){\r\n                    _this.$set(_this.initData,\"isSelect\",false)\r\n                }else{\r\n                    _this.$set(_this.initData,\"isSelect\",true)\r\n                }\r\n                _this.$set(_this.initData,\"tableData\",_this.option.data)\r\n                _this.$set(_this.initData,\"isPagination\",_this.option.isPagination)\r\n                _this.$set(_this.initData,\"url\",_this.option.url)\r\n                _this.initSearchData = _this.option.initSearchData || {}\r\n                \r\n                 _this.$nextTick(() => {\r\n                     if(_this.option.search !== false && !_this.isEmpty(_this.option.formId)){\r\n                        _this.$refs.searchForm.initForm()\r\n                        let searchData = _this.$refs.searchForm.getFormValue() || {};\r\n                        for(let i in searchData){\r\n                            _this.initSearchData[i] = searchData[i]\r\n                        }\r\n                     }\r\n                    _this.$refs.dialogList.initTable(function(){\r\n                        setTimeout(function() {\r\n                            for(let i in _this.option.value){\r\n                                if(_this.option.type === \"radio\" && _this.option.value[i].key !== undefined){\r\n                                    _this.$refs.dialogList.setCurrentValue(_this.option.value[i].key,_this.option.value[i].value)\r\n                                }else if(_this.option.value[i].key !== undefined){\r\n                                    _this.$refs.dialogList.setSelectValue(_this.option.value[i].key,_this.option.value[i].value)\r\n                                }\r\n                            }\r\n                        },0)\r\n                    })\r\n                })\r\n            }\r\n        },\r\n        option:{//深度监听，可监听到对象、数组的变化\r\n            handler(val, oldVal){\r\n                \r\n            },\r\n            deep:true //true 深度监听\r\n        }\r\n    },\r\n    created(){\r\n        \r\n    },\r\n    methods: {\r\n        getFormRef(callback){\r\n           this.$nextTick(() => {\r\n               if(typeof callback === 'function'){\r\n                    callback(this.$refs.searchForm)\r\n                }\r\n           })\r\n        },\r\n        currentChange(currentRow, oldCurrentRow){\r\n            this.$emit(\"current-change\", currentRow, oldCurrentRow);\r\n        },\r\n        onSearch(){\r\n            let data = this.$refs.searchForm.getFormValue()\r\n            this.$refs.dialogList.search(data);\r\n        },\r\n        submit(){\r\n            let value = [];\r\n            if(this.option.type === \"radio\"){\r\n                value = this.$refs.dialogList.getCurrentValue()\r\n            }else{\r\n                value = this.$refs.dialogList.getSelectValue()\r\n            }\r\n            this.$emit('callback', value);\r\n            this.visible = false;\r\n        },\r\n        opened(){\r\n            this.$refs.dialog.$el.children[0].style.height = this.option.height||'600px';\r\n        }\r\n    },\r\n    components: {\r\n        mftccTable,\r\n        mftccSearchForm\r\n    }\r\n  }\r\n</script>\r\n<style>\r\n.mftcc-table-dialog .search_form_div{\r\n    display: flex;\r\n    align-items: flex-start;\r\n}\r\n.mftcc-table-dialog .dialog-content{\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n}\r\n\r\n.mftcc-table-dialog .mftcc-search-form .search-button button{\r\n    float: right;\r\n}\r\n.mftcc-table-dialog .mftcc-dialog-content{\r\n    flex-grow: 1;\r\n    display: flex;\r\n}\r\n.mftcc-table-dialog .el-dialog{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mftcc-table-dialog .el-dialog__body{\r\n    flex-grow: 1;\r\n    height: 100%;\r\n}\r\n</style>","<template>\r\n  <div\r\n    ref=\"mftccEditTable\"\r\n    style=\"width: 100%; flex-grow: 1; position: relative\"\r\n    class=\"mftcc-edit-table\"\r\n  >\r\n    <el-dropdown\r\n      size=\"small\"\r\n      v-if=\"option.isDColumn\"\r\n      :hide-on-click=\"false\"\r\n      class=\"el-dropdown-DColumn\"\r\n      trigger=\"click\"\r\n    >\r\n      <el-button icon=\"el-icon-setting\" type=\"primary\" class=\"mftcc-edit-table-dropdown\">\r\n      </el-button>\r\n      <el-dropdown-menu slot=\"dropdown\" style=\"text-align: center\">\r\n        <div style=\"text-align: left\">\r\n          <template v-for=\"(col, index) in option.columns\">\r\n            <el-dropdown-item :key=\"index\" v-if=\"col.fieldName != ''\">\r\n              <el-checkbox\r\n                :checked=\"col.isShow\"\r\n                v-model=\"col.isShow\"\r\n                @change=\"checkChange(col)\"\r\n              >{{ col.label }}</el-checkbox\r\n              >\r\n            </el-dropdown-item>\r\n          </template>\r\n        </div>\r\n      </el-dropdown-menu>\r\n    </el-dropdown>\r\n    <div v-loading=\"option.loading\">\r\n      <el-form\r\n        :model=\"formData\"\r\n        :rules=\"rules\"\r\n        :ref=\"option.formId\"\r\n        @submit.native.prevent\r\n      >\r\n        <el-table\r\n          :data=\"option.tableData\"\r\n          :max-height=\"maxHeight\"\r\n          :height=\"height\"\r\n          highlight-current-row\r\n          :ref=\"option.tableId\"\r\n          style=\"width: 100%\"\r\n          @current-change=\"currentChange\"\r\n          @selection-change=\"$emit('selection-change', $event)\"\r\n          @row-click=\"rowClick\"\r\n          @row-dblclick=\"rowDblclick\"\r\n          empty-text=\"暂无数据\"\r\n          :row-style=\"rowStyle\"\r\n          :row-class-name=\"rowClassName\"\r\n          :cell-style=\"cellStyle\"\r\n          :cell-class-name=\"cellClassName\"\r\n        >\r\n          <template\r\n            v-if=\"option.isSelect != '' && option.isSelect ? option.isSelect : false\"\r\n          >\r\n            <el-table-column type=\"selection\" width=\"55\"> </el-table-column>\r\n          </template>\r\n          <template v-for=\"(item, index) in option.columns\">\r\n            <el-table-column\r\n              v-if=\"item.fieldName != '' ? item.isShow : true\"\r\n              :key=\"index\"\r\n              :prop=\"item.fieldName\"\r\n              :label=\"item.label\"\r\n              :show-overflow-tooltip=\"\r\n                item['show-overflow-tooltip'] === true ? true : false\r\n              \"\r\n              :min-width=\"item.width\"\r\n              :fixed=\"item.fixed || false\"\r\n              :align=\"item.align || 'left'\"\r\n              :width=\"item.fieldName == '' ? item.width : ''\"\r\n            >\r\n              <template slot-scope=\"scope\">\r\n                <div v-if=\"item.fieldName == ''\">\r\n                  <template v-for=\"(btn, key) in item.data\">\r\n                    <el-button\r\n                      :key=\"key\"\r\n                      type=\"text\"\r\n                      size=\"mini\"\r\n                      :disabled=\"buttonAuth(btn, scope.row)\"\r\n                      v-if=\"$hasPerm(btn.perm || true)\"\r\n                      @click=\"Fn(btn.type, scope.$index, scope.row)\"\r\n                    >{{ btn.label }}</el-button\r\n                    >\r\n                  </template>\r\n                </div>\r\n                <div v-else>\r\n                  <el-form-item\r\n                    :prop=\"item.fieldName + '_' + scope.$index\"\r\n                    v-show=\"editFlag[scope.$index] === true\"\r\n                    size=\"small\"\r\n                    style=\"margin-top: 20px\"\r\n                  >\r\n                    <template v-if=\"item.fieldType === 'text'\">\r\n                      <template v-if=\"item.dataType === 'money(yuan)'\">\r\n                        <el-input\r\n                          :ref=\"item.fieldName\"\r\n                          type=\"text\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          @blur=\"blurFunc(item.dataType, $event)\"\r\n                          @keyup.native=\"toMoney\"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                          :maxlength=\"item.maxlength\"\r\n                          :show-word-limit=\"\r\n                            isEmpty(item['show-word-limit'])\r\n                              ? false\r\n                              : item['show-word-limit']\r\n                          \"\r\n                        >\r\n                          <!-- <template slot=\"append\">元</template> -->\r\n                          <template slot=\"suffix\">元</template>\r\n                        </el-input>\r\n                      </template>\r\n                      <template v-else>\r\n                        <el-input\r\n                          :ref=\"item.fieldName\"\r\n                          type=\"text\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          @blur=\"blurFunc(item.dataType, $event)\"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                          :maxlength=\"item.maxlength\"\r\n                          :show-word-limit=\"\r\n                            isEmpty(item['show-word-limit'])\r\n                              ? false\r\n                              : item['show-word-limit']\r\n                          \"\r\n                        >\r\n                          <template v-if=\"item.dataType === 'money(jiao)'\">\r\n                            <template slot=\"suffix\">角</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'money(分)'\">\r\n                            <template slot=\"suffix\">分</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'money(wan)'\">\r\n                            <template slot=\"suffix\">万元</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'money(yi)'\">\r\n                            <template slot=\"suffix\">亿元</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'percentile'\">\r\n                            <template slot=\"suffix\">%</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'thousand'\">\r\n                            <template slot=\"suffix\">‰</template>\r\n                          </template>\r\n                          <template v-else-if=\"item.dataType === 'tenThousand'\">\r\n                            <template slot=\"suffix\">‱</template>\r\n                          </template>\r\n                        </el-input>\r\n                      </template>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'password'\">\r\n                      <el-input\r\n                        :ref=\"item.fieldName\"\r\n                        type=\"password\"\r\n                        autocomplete=\"off\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @blur=\"blurFunc(item.dataType, $event)\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                      </el-input>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'checkbox'\">\r\n                      <el-checkbox-group\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                        <el-checkbox\r\n                          v-for=\"boxItem in pramDicItem[item.fieldName]\"\r\n                          :key=\"boxItem.optCode\"\r\n                          :label=\"boxItem.optCode\"\r\n                        >\r\n                          {{ boxItem.optName }}</el-checkbox\r\n                        >\r\n                      </el-checkbox-group>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'select'\">\r\n                      <template v-if=\"item.dataType === 'library'\">\r\n                        <mftcc-library-select\r\n                          :ref=\"item.fieldName\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :url=\"item.library.url\"\r\n                          :realField=\"item.library.realField\"\r\n                          :showField=\"item.library.showField\"\r\n                          :multiple=\"false\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                        >\r\n                        </mftcc-library-select>\r\n                      </template>\r\n                      <template v-else>\r\n                        <el-select\r\n                          autocomplete=\"off\"\r\n                          clearable\r\n                          filterable\r\n                          :ref=\"item.fieldName\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"selectItem in pramDicItem[item.fieldName]\"\r\n                            :key=\"selectItem.optCode\"\r\n                            :label=\"selectItem.optName\"\r\n                            :value=\"selectItem.optCode\"\r\n                          >\r\n                          </el-option>\r\n                        </el-select>\r\n                      </template>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'multipleSelection'\">\r\n                      <template v-if=\"item.dataType === 'library'\">\r\n                        <mftcc-library-select\r\n                          :ref=\"item.fieldName\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :url=\"item.library.url\"\r\n                          :realField=\"item.library.realField\"\r\n                          :showField=\"item.library.showField\"\r\n                          :multiple=\"true\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                        >\r\n                        </mftcc-library-select>\r\n                      </template>\r\n                      <template v-else>\r\n                        <el-select\r\n                          multiple\r\n                          autocomplete=\"off\"\r\n                          :ref=\"item.fieldName\"\r\n                          v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                          :placeholder=\"\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].placeholder\r\n                            )\r\n                              ? ''\r\n                              : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          \"\r\n                          :disabled=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].disabled\r\n                          \"\r\n                          :readonly=\"\r\n                            isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                              ? false\r\n                              : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                          \"\r\n                          v-on=\"events[item.fieldName]\"\r\n                          @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                        >\r\n                          <el-option\r\n                            v-for=\"selectItem in pramDicItem[item.fieldName]\"\r\n                            :key=\"selectItem.optCode\"\r\n                            :label=\"selectItem.optName\"\r\n                            :value=\"selectItem.optCode\"\r\n                          ></el-option>\r\n                        </el-select>\r\n                      </template>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'radio'\">\r\n                      <el-radio-group\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                        <el-radio\r\n                          v-for=\"radioItem in pramDicItem[item.fieldName]\"\r\n                          :key=\"radioItem.optCode\"\r\n                          :label=\"radioItem.optCode\"\r\n                        >\r\n                          {{ radioItem.optName }}</el-radio\r\n                        >\r\n                      </el-radio-group>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'switch'\">\r\n                      <el-switch\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :active-value=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].switchValue\r\n                              .activeValue\r\n                          )\r\n                            ? '1'\r\n                            : columns[item.fieldName + '_' + scope.$index].switchValue\r\n                                .activeValue\r\n                        \"\r\n                        :inactive-value=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].switchValue\r\n                              .inActiveValue\r\n                          )\r\n                            ? '0'\r\n                            : columns[item.fieldName + '_' + scope.$index].switchValue\r\n                                .inActiveValue\r\n                        \"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        @change=\"changeFunc(item, $event, scope.$index, scope.row)\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      ></el-switch>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'date'\">\r\n                      <el-date-picker\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :format=\"\r\n                          formData[item.fieldName + '_' + scope.$index] ===\r\n                          dateFormat(\r\n                            new Date('9999/12/31'),\r\n                            isEmpty(\r\n                              columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .valueFormat\r\n                            )\r\n                              ? 'yyyyMMdd'\r\n                              : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                  .valueFormat\r\n                          )\r\n                            ? '长期'\r\n                            : isEmpty(\r\n                                columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                  .format\r\n                              )\r\n                            ? 'yyyy-MM-dd'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .format\r\n                        \"\r\n                        :value-format=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                              .valueFormat\r\n                          )\r\n                            ? 'yyyyMMdd'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .valueFormat\r\n                        \"\r\n                        type=\"date\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        :picker-options=\"\r\n                          !isEmpty(item.dateOption) && item.dateOption.isLong === true\r\n                            ? pickerOptions\r\n                            : {}\r\n                        \"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                      </el-date-picker>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'time'\">\r\n                      <el-time-picker\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :format=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].dateFormat.format\r\n                          )\r\n                            ? 'HH:mm:ss'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .format\r\n                        \"\r\n                        :value-format=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                              .valueFormat\r\n                          )\r\n                            ? 'HH:mm:ss'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .valueFormat\r\n                        \"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        :picker-options=\"isEmpty(item.dateOption) ? {} : item.dateOption\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                      </el-time-picker>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'datetime'\">\r\n                      <el-date-picker\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :format=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].dateFormat.format\r\n                          )\r\n                            ? 'yyyy-MM-dd HH:mm:ss'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .format\r\n                        \"\r\n                        :value-format=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                              .valueFormat\r\n                          )\r\n                            ? 'yyyyMMdd HH:mm:ss'\r\n                            : columns[item.fieldName + '_' + scope.$index].dateFormat\r\n                                .valueFormat\r\n                        \"\r\n                        type=\"datetime\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                      </el-date-picker>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'number'\">\r\n                      <el-input\r\n                        :ref=\"item.fieldName\"\r\n                        type=\"number\"\r\n                        v-model.number=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      >\r\n                      </el-input>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'textarea'\">\r\n                      <el-input\r\n                        :ref=\"item.fieldName\"\r\n                        type=\"textarea\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                        :maxlength=\"item.maxlength\"\r\n                        :show-word-limit=\"\r\n                          isEmpty(item['show-word-limit'])\r\n                            ? true\r\n                            : item['show-word-limit']\r\n                        \"\r\n                      >\r\n                      </el-input>\r\n                    </template>\r\n                    <template v-else-if=\"item.fieldType === 'query'\">\r\n                      <span>{{ tableFormatter(scope.row[item.fieldName], item) }}</span>\r\n                    </template>\r\n                    <template v-else>\r\n                      <el-input\r\n                        :ref=\"item.fieldName\"\r\n                        v-model=\"formData[item.fieldName + '_' + scope.$index]\"\r\n                        :placeholder=\"\r\n                          isEmpty(\r\n                            columns[item.fieldName + '_' + scope.$index].placeholder\r\n                          )\r\n                            ? ''\r\n                            : columns[item.fieldName + '_' + scope.$index].placeholder\r\n                        \"\r\n                        :disabled=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].disabled\r\n                        \"\r\n                        :readonly=\"\r\n                          isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                            ? false\r\n                            : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                        \"\r\n                        v-on=\"events[item.fieldName]\"\r\n                        @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                      ></el-input>\r\n                    </template>\r\n                  </el-form-item>\r\n\r\n                  <template v-if=\"item.fieldType === 'switch'\">\r\n                    <el-switch\r\n                      v-show=\"editFlag[scope.$index] === false\"\r\n                      :ref=\"item.fieldName + '_query'\"\r\n                      v-model=\"scope.row[item.fieldName]\"\r\n                      :active-value=\"\r\n                        isEmpty(\r\n                          columns[item.fieldName + '_' + scope.$index].switchValue\r\n                            .activeValue\r\n                        )\r\n                          ? 0\r\n                          : columns[item.fieldName + '_' + scope.$index].switchValue\r\n                              .activeValue\r\n                      \"\r\n                      :inactive-value=\"\r\n                        isEmpty(\r\n                          columns[item.fieldName + '_' + scope.$index].switchValue\r\n                            .inActiveValue\r\n                        )\r\n                          ? 1\r\n                          : columns[item.fieldName + '_' + scope.$index].switchValue\r\n                              .inActiveValue\r\n                      \"\r\n                      :disabled=\"\r\n                        isEmpty(columns[item.fieldName + '_' + scope.$index].disabled)\r\n                          ? false\r\n                          : columns[item.fieldName + '_' + scope.$index].disabled\r\n                      \"\r\n                      :readonly=\"\r\n                        isEmpty(columns[item.fieldName + '_' + scope.$index].readOnly)\r\n                          ? false\r\n                          : columns[item.fieldName + '_' + scope.$index].readOnly\r\n                      \"\r\n                      @change=\"changeFunc(item, $event, scope.$index, scope.row)\"\r\n                      @click.native=\"clickFunc(item, $event, scope.$index)\"\r\n                    ></el-switch>\r\n                  </template>\r\n                  <template v-else>\r\n                    <span v-show=\"editFlag[scope.$index] === false\">{{\r\n                      tableFormatter(scope.row[item.fieldName], item)\r\n                    }}</span>\r\n                  </template>\r\n                </div>\r\n              </template>\r\n            </el-table-column>\r\n          </template>\r\n        </el-table>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { findByList, getParameter } from \"../axios\";\r\n  import formUtil from \"../utils/formUtil\";\r\n  export default {\r\n    data() {\r\n      return {\r\n        option: {},\r\n        searchData: {},\r\n        maxHeight: null,\r\n        height: null,\r\n        currentRow: null,\r\n        isEmpty: formUtil.isEmpty,\r\n        toMoney: formUtil.toMoney,\r\n        dateFormat: formUtil.dateFormat,\r\n\r\n        addFlag: {},\r\n        editFlag: {},\r\n        formData: {},\r\n        formRules: {},\r\n        rules: {},\r\n        events: {},\r\n        pramDicItem: {},\r\n        columns: {},\r\n        pickerOptions: {\r\n          shortcuts: [\r\n            {\r\n              text: \"今天\",\r\n              onClick(picker) {\r\n                picker.$emit(\"pick\", new Date());\r\n              },\r\n            },\r\n            {\r\n              text: \"长期\",\r\n              onClick(picker) {\r\n                picker.$emit(\"pick\", new Date(\"9999/12/31\"));\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n    },\r\n    props: [\"tableId\", \"initData\", \"initSearchData\", \"parentVm\"],\r\n    watch: {\r\n      tableId: {\r\n        handler(val, oldVal) {\r\n          this.initTable(() => {\r\n            this.$emit(\"callback\");\r\n          });\r\n        },\r\n        deep: true,\r\n        immediate: true,\r\n      },\r\n      formRules: {\r\n        handler(val, oldVal) {\r\n          let _this = this;\r\n          let dataList = _this.option.tableData;\r\n          let columns = _this.option.columns;\r\n          _this.rules = {};\r\n          for (let i in dataList) {\r\n            for (let j in columns) {\r\n              if (columns[j].fieldName !== \"\") {\r\n                _this.$set(\r\n                  _this.rules,\r\n                  columns[j].fieldName + \"_\" + i,\r\n                  val[columns[j].fieldName]\r\n                );\r\n              }\r\n            }\r\n          }\r\n        },\r\n        deep: true,\r\n        immediate: true,\r\n      },\r\n      option: {\r\n        handler(val, oldVal) {\r\n          let _this = this;\r\n          let dataList = val.tableData;\r\n          let columns = val.columns;\r\n          _this.columns = {};\r\n          for (let i in dataList) {\r\n            for (let j in columns) {\r\n              if (columns[j].fieldName !== \"\") {\r\n                let newColumns = Object.assign({}, columns[j]);\r\n                _this.$set(_this.columns, columns[j].fieldName + \"_\" + i, newColumns);\r\n              }\r\n            }\r\n          }\r\n        },\r\n        deep: true,\r\n        immediate: true,\r\n      },\r\n    },\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.tableResize();\r\n      });\r\n    },\r\n    methods: {\r\n      rowStyle(obj) {\r\n        let event = this.option[\"row-style\"];\r\n        if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n          return event;\r\n        } else if (event && formUtil.parentVmExist(this, event)) {\r\n          return this.parentVm._self[event](obj);\r\n        }\r\n      },\r\n      rowClassName(obj) {\r\n        obj.row._$index = obj.rowIndex;\r\n        let event = this.option[\"row-class-style\"];\r\n        if (event && formUtil.parentVmExist(this, event)) {\r\n          return this.parentVm._self[event](obj);\r\n        } else {\r\n          return event;\r\n        }\r\n      },\r\n      cellStyle(obj) {\r\n        let event = this.option[\"cell-style\"];\r\n        if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n          return event;\r\n        } else if (event && formUtil.parentVmExist(this, event)) {\r\n          return this.parentVm._self[event](obj);\r\n        }\r\n      },\r\n      cellClassName(obj) {\r\n        let event = this.option[\"cell-class-style\"];\r\n        if (event && formUtil.parentVmExist(this, event)) {\r\n          return this.parentVm._self[event](obj);\r\n        } else {\r\n          return event;\r\n        }\r\n      },\r\n      buttonAuth(btn, row) {\r\n        let buttonAuth = false;\r\n        let auth = btn.auth || \"\";\r\n        let authArray = auth.split(\";\");\r\n        for (let i in authArray) {\r\n          if (!this.isEmpty(authArray[i])) {\r\n            let authObj = authArray[i].split(\"-\");\r\n            if (authObj.length === 2) {\r\n              if (this.$store.getters.buttonAuth[authObj[0]] == authObj[1]) {\r\n                buttonAuth = true;\r\n              } else if (row[authObj[0]] == authObj[1]) {\r\n                buttonAuth = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return buttonAuth;\r\n      },\r\n      blurFunc(dataType, el) {\r\n        formUtil.func_uior_valTypeImm(el, dataType);\r\n      },\r\n      tableFormatter(cellValue, item) {\r\n        let _this = this;\r\n        let value = \"\";\r\n        if (_this.isEmpty(cellValue)) {\r\n          return cellValue;\r\n        } else {\r\n          value = cellValue;\r\n        }\r\n        let parmArray = _this.pramDicItem[item.fieldName];\r\n        if (item.fieldType === \"checkbox\" || item.fieldType === \"multipleSelection\") {\r\n          let checkBoxValue = \"\";\r\n          let checkArray = cellValue.split(\"|\");\r\n          for (let h in checkArray) {\r\n            if (!_this.isEmpty(checkArray[h])) {\r\n              for (let i in parmArray) {\r\n                if (parmArray[i][\"optCode\"] === checkArray[h]) {\r\n                  if (checkBoxValue === \"\") {\r\n                    checkBoxValue = parmArray[i][\"optName\"];\r\n                  } else {\r\n                    checkBoxValue = parmArray[i][\"optName\"] + \"|\" + checkBoxValue;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          value = checkBoxValue;\r\n        } else if (item.fieldType === \"text\") {\r\n          if (item.dataType === \"money(yuan)\") {\r\n            value = formUtil.formatMoney(cellValue);\r\n          } else if (item.dataType === \"percentile\") {\r\n            value = formUtil.numMulti(cellValue, 100);\r\n          } else if (item.dataType === \"thousand\") {\r\n            value = formUtil.numMulti(cellValue, 1000);\r\n          } else if (item.dataType === \"tenThousand\") {\r\n            value = formUtil.numMulti(cellValue, 10000);\r\n          }\r\n        } else if (item.fieldType === \"date\") {\r\n          try {\r\n            let valueFormat = \"yyyyMMdd\";\r\n            let format = \"yyyy-MM-dd\";\r\n            if (!this.isEmpty(item.dateFormat)) {\r\n              if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n                valueFormat = item.dateFormat.valueFormat;\r\n              }\r\n              if (!this.isEmpty(item.dateFormat.format)) {\r\n                format = item.dateFormat.format;\r\n              }\r\n            }\r\n            value = formUtil.dateFormat(formUtil.formatDate(value, valueFormat), format);\r\n          } catch (error) {\r\n            console.error(item.fieldName + \"日期数据解析错误\");\r\n          }\r\n        } else if (item.fieldType === \"datetime\") {\r\n          try {\r\n            let valueFormat = \"yyyyMMdd HH:mm:ss\";\r\n            let format = \"yyyy-MM-dd HH:mm:ss\";\r\n            if (!this.isEmpty(item.dateFormat)) {\r\n              if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n                valueFormat = item.dateFormat.valueFormat;\r\n              }\r\n              if (!this.isEmpty(item.dateFormat.format)) {\r\n                format = item.dateFormat.format;\r\n              }\r\n            }\r\n            value = formUtil.dateFormat(formUtil.formatDate(value, valueFormat), format);\r\n          } catch (error) {\r\n            console.error(item.fieldName + \"日期数据解析错误\");\r\n          }\r\n        } else {\r\n          for (let i in parmArray) {\r\n            if (parmArray[i][\"optCode\"] === cellValue) {\r\n              value = parmArray[i][\"optName\"];\r\n            }\r\n          }\r\n        }\r\n        if (\r\n          !_this.isEmpty(item.formatter) &&\r\n          formUtil.parentVmExist(this, item.formatter)\r\n        ) {\r\n          value = this.parentVm._self[item.formatter](value);\r\n        } else if (!_this.isEmpty(item.desensitization)) {\r\n          value = formUtil.desensitization(value, item.desensitization);\r\n        }\r\n        return value;\r\n      },\r\n      clickFunc(item, el, index) {\r\n        let events = item.events;\r\n        for (let i in events) {\r\n          if (\r\n            item.disabled !== true &&\r\n            item.readOnly !== true &&\r\n            events[i].type === \"click\" &&\r\n            formUtil.parentVmExist(this, events[i].callback)\r\n          ) {\r\n            this.parentVm._self[events[i].callback](el, index);\r\n          }\r\n        }\r\n      },\r\n      changeFunc(item, el, index, row) {\r\n        let events = item.events;\r\n        for (let i in events) {\r\n          if (\r\n            item.disabled !== true &&\r\n            item.readOnly !== true &&\r\n            events[i].type === \"change\" &&\r\n            formUtil.parentVmExist(this, events[i].callback)\r\n          ) {\r\n            this.parentVm._self[events[i].callback](el, index, row);\r\n          }\r\n        }\r\n      },\r\n      addData() {\r\n        let _this = this;\r\n        let columns = _this.option.columns;\r\n        let newObj = {};\r\n        for (let j in columns) {\r\n          if (columns[j].fieldName !== \"\") {\r\n            newObj[columns[j].fieldName] = \"\";\r\n          }\r\n        }\r\n        if (arguments.length >= 0) {\r\n          for (let i in arguments[0]) {\r\n            newObj[i] = arguments[0][i];\r\n          }\r\n        }\r\n        _this.option.tableData.push(newObj);\r\n        _this.$set(_this.addFlag, _this.option.tableData.length - 1, true);\r\n        _this.editTable(_this.option.tableData.length - 1, true);\r\n        _this.$nextTick(() => {\r\n          _this.$refs[_this.option.tableId].bodyWrapper.scrollTop =\r\n            _this.$refs[_this.option.tableId].bodyWrapper.scrollHeight;\r\n        });\r\n      },\r\n      editTable() {\r\n        let _this = this;\r\n        let tableData = _this.option.tableData;\r\n        let columns = _this.option.columns;\r\n        _this.rules = {};\r\n        let formCoyeData = JSON.parse(JSON.stringify(this.formData)); //深度copy\r\n        _this.formData = {};\r\n        for (let i = tableData.length - 1; i >= 0; i--) {\r\n          if (arguments.length === 0) {\r\n            this.editTable(i, !_this.editFlag[i]);\r\n          } else if (arguments.length === 1) {\r\n            this.editTable(i, arguments[0]);\r\n          } else if (arguments.length === 2) {\r\n            if (arguments[0] == i) {\r\n              _this.$set(_this.editFlag, arguments[0], arguments[1]);\r\n              for (let j in columns) {\r\n                if (columns[j].fieldName !== \"\") {\r\n                  _this.$set(\r\n                    _this.rules,\r\n                    columns[j].fieldName + \"_\" + i,\r\n                    _this.formRules[columns[j].fieldName]\r\n                  );\r\n                  let newColumns = Object.assign({}, columns[j]);\r\n                  _this.$set(_this.columns, columns[j].fieldName + \"_\" + i, newColumns);\r\n                }\r\n              }\r\n            }\r\n          } else if (arguments.length >= 3) {\r\n            let value = arguments[1];\r\n            if (!(arguments[1] instanceof Array)) {\r\n              value = [arguments[1]];\r\n            }\r\n            for (let j in value) {\r\n              if (tableData[i][arguments[0]] == value[j]) {\r\n                this.editTable(i, arguments[2]);\r\n              }\r\n            }\r\n          }\r\n          _this.setFormValue(i, tableData[i]);\r\n          if (_this.editFlag[i] === false) {\r\n            if (_this.addFlag[i] === true) {\r\n              for (let j = 0; j < tableData.length - i; j++) {\r\n                _this.$set(_this.addFlag, i + j, _this.addFlag[i + j + 1]);\r\n                _this.$set(_this.editFlag, i + j, _this.editFlag[i + j + 1]);\r\n\r\n                for (let k in columns) {\r\n                  if (columns[k].fieldName !== \"\") {\r\n                    formCoyeData[columns[k].fieldName + \"_\" + (i + j)] =\r\n                      formCoyeData[columns[k].fieldName + \"_\" + (i + j + 1)];\r\n                    let formItemData =\r\n                      formCoyeData[columns[k].fieldName + \"_\" + (i + j + 1)];\r\n                    if (!_this.isEmpty(formItemData)) {\r\n                      let formTextValue = this.getFormValueFormatter(\r\n                        columns[k],\r\n                        formItemData\r\n                      ).value;\r\n                      _this.setFormValue(i + j, columns[k].fieldName, formTextValue);\r\n                    } else {\r\n                      _this.setFormValue(i + j, columns[k].fieldName, \"\");\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              tableData.splice(i, 1);\r\n            }\r\n          } else {\r\n            for (let k in columns) {\r\n              if (columns[k].fieldName !== \"\") {\r\n                _this.$nextTick(() => {\r\n                  if (_this.addFlag[i] === true) {\r\n                    _this.$set(\r\n                      _this.columns[columns[k].fieldName + \"_\" + i],\r\n                      \"readOnly\",\r\n                      false\r\n                    );\r\n                    _this.$set(\r\n                      _this.columns[columns[k].fieldName + \"_\" + i],\r\n                      \"disabled\",\r\n                      false\r\n                    );\r\n                  }\r\n                  let formItemData = formCoyeData[columns[k].fieldName + \"_\" + i];\r\n                  if (!_this.isEmpty(formItemData)) {\r\n                    let formTextValue = this.getFormValueFormatter(columns[k], formItemData)\r\n                      .value;\r\n                    _this.setFormValue(i, columns[k].fieldName, formTextValue);\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      getFormValueFormatter(item, formItemData) {\r\n        let formTextValue = formItemData;\r\n        let checkFlag = false;\r\n        if (item.fieldType === \"checkbox\" || item.fieldType === \"multipleSelection\") {\r\n          formTextValue = formItemData.join(\"|\");\r\n          checkFlag = true;\r\n        } else if (item.fieldType === \"text\") {\r\n          if (item.dataType === \"money(yuan)\") {\r\n            formTextValue = formUtil.delcommafy(formItemData);\r\n          } else if (item.dataType === \"percentile\") {\r\n            formTextValue = formUtil.numDiv(formTextValue, 100);\r\n          } else if (item.dataType === \"thousand\") {\r\n            formTextValue = formUtil.numDiv(formTextValue, 1000);\r\n          } else if (item.dataType === \"tenThousand\") {\r\n            formTextValue = formUtil.numDiv(formTextValue, 10000);\r\n          }\r\n        }\r\n        let result = {\r\n          value: formTextValue,\r\n          checkFlag: checkFlag,\r\n        };\r\n        return result;\r\n      },\r\n      validateForm(callback) {\r\n        this.$refs[this.option.formId].validate((valid) => {\r\n          if (formUtil.isFunction(callback)) {\r\n            callback(valid);\r\n          }\r\n        });\r\n      },\r\n      clearValidateForm(props) {\r\n        this.$nextTick(() => {\r\n          if (arguments.length === 0) {\r\n            this.$refs[this.option.formId].clearValidate();\r\n          } else if (arguments.length >= 1) {\r\n            this.$refs[this.option.formId].clearValidate(props);\r\n          }\r\n        });\r\n      },\r\n      setFormValue() {\r\n        let formItem = this.option.columns;\r\n        if (arguments.length === 1) {\r\n          for (let i in arguments[0]) {\r\n            for (let k in arguments[0][i]) {\r\n              this.setFormValue(i, k, arguments[0][i][k]);\r\n            }\r\n          }\r\n        } else if (arguments.length == 2) {\r\n          for (let k in arguments[1]) {\r\n            this.setFormValue(arguments[0], k, arguments[1][k]);\r\n          }\r\n        } else if (arguments.length >= 3) {\r\n          this.$set(this.formData, arguments[1] + \"_\" + arguments[0], arguments[2]);\r\n          for (let j in formItem) {\r\n            if (arguments[1] === formItem[j].fieldName) {\r\n              if (\r\n                formItem[j].fieldType === \"checkbox\" ||\r\n                formItem[j].fieldType === \"multipleSelection\"\r\n              ) {\r\n                let checkBoxArray = [];\r\n                let checkArray = arguments[2].split(\"|\");\r\n                for (let h in checkArray) {\r\n                  if (!this.isEmpty(checkArray[h])) {\r\n                    checkBoxArray.push(checkArray[h]);\r\n                  }\r\n                }\r\n                this.$set(this.formData, arguments[1] + \"_\" + arguments[0], checkBoxArray);\r\n              } else if (formItem[j].fieldType === \"text\") {\r\n                let formTextValue = arguments[2];\r\n                if (formItem[j].dataType === \"money(yuan)\") {\r\n                  formTextValue = formUtil.formatMoney(formTextValue);\r\n                } else if (formItem[j].dataType === \"percentile\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 100);\r\n                } else if (formItem[j].dataType === \"thousand\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 1000);\r\n                } else if (formItem[j].dataType === \"tenThousand\") {\r\n                  formTextValue = formUtil.numMulti(formTextValue, 10000);\r\n                }\r\n                this.$set(this.formData, arguments[1] + \"_\" + arguments[0], formTextValue);\r\n              } else {\r\n                this.$set(this.formData, arguments[1] + \"_\" + arguments[0], arguments[2]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      getFormValue() {\r\n        let _this = this;\r\n        let formItem = this.option.columns;\r\n        let data = JSON.parse(JSON.stringify(this.formData)); //深度copy\r\n        if (arguments.length === 0) {\r\n          let allData = [];\r\n          let editData = [];\r\n          let dataList = _this.option.tableData;\r\n          for (let i in dataList) {\r\n            if (_this.editFlag[i] === true) {\r\n              let resultObj = _this.getFormValue(i);\r\n              if (resultObj.isEdit === true) {\r\n                editData.push(resultObj.data);\r\n              }\r\n              allData.push(resultObj.data);\r\n            }\r\n          }\r\n          let result = {\r\n            allData: allData,\r\n            editData: editData,\r\n          };\r\n          return result;\r\n        } else if (arguments.length == 1) {\r\n          let dataList = _this.option.tableData;\r\n          let dataObj = {};\r\n          let isEdit = false;\r\n          if (_this.editFlag[arguments[0]] === true) {\r\n            for (let j in dataList[arguments[0]]) {\r\n              dataObj[j] = data[j + \"_\" + arguments[0]];\r\n              var checkFlag = false;\r\n              for (let k in formItem) {\r\n                if (j === formItem[k].fieldName) {\r\n                  let formText = this.getFormValueFormatter(\r\n                    formItem[k],\r\n                    data[j + \"_\" + arguments[0]]\r\n                  );\r\n                  dataObj[j] = formText.value;\r\n                  checkFlag = formText.checkFlag;\r\n                }\r\n              }\r\n              let tableValue = dataList[arguments[0]][j];\r\n              if (checkFlag) {\r\n                dataObj[j] =\r\n                  dataObj[j].substring(dataObj[j].length - 1) == \"|\"\r\n                    ? dataObj[j].substring(0, dataObj[j].length - 1)\r\n                    : dataObj[j];\r\n                tableValue =\r\n                  tableValue.substring(tableValue.length - 1) == \"|\"\r\n                    ? tableValue.substring(0, tableValue.length - 1)\r\n                    : tableValue;\r\n              }\r\n              if (dataObj[j] != tableValue) {\r\n                isEdit = true;\r\n              }\r\n            }\r\n          }\r\n          let result = {\r\n            isEdit: isEdit,\r\n            data: dataObj,\r\n          };\r\n          return result;\r\n        } else if (arguments.length >= 2) {\r\n          let dataList = _this.option.tableData;\r\n          let result = \"\";\r\n          if (_this.editFlag[arguments[0]] === true) {\r\n            let dataObj = _this.getFormValue(arguments[0]);\r\n            if (!this.isEmpty(dataObj)) {\r\n              result = dataObj.data[arguments[1]];\r\n            }\r\n          }\r\n          return result;\r\n        }\r\n      },\r\n      attrForm() {\r\n        let formItem = this.option.columns;\r\n        if (arguments.length === 2) {\r\n          let value = \"\";\r\n          for (let i in formItem) {\r\n            if (formItem[i].fieldName === arguments[0]) {\r\n              if (arguments[1] === \"dicItem\") {\r\n                value = this.pramDicItem[arguments[0]];\r\n              } else if (arguments[1] === \"events\") {\r\n                value = this.events[arguments[0]];\r\n                break;\r\n              } else if (arguments[1] === \"rules\") {\r\n                value = this.formRules[arguments[0]];\r\n                break;\r\n              } else {\r\n                value = formItem[i][arguments[1]];\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          return value;\r\n        } else if (arguments.length >= 3) {\r\n          for (let i in formItem) {\r\n            if (formItem[i].fieldName === arguments[0]) {\r\n              if (arguments[1] === \"dicItem\") {\r\n                this.$set(this.pramDicItem, arguments[0], arguments[2]);\r\n                break;\r\n              } else if (arguments[1] === \"events\") {\r\n                //解析事件\r\n                try {\r\n                  let eventsArray = arguments[2];\r\n                  let event = {};\r\n                  for (let evetIndex in eventsArray) {\r\n                    if (\r\n                      !this.isEmpty(eventsArray[evetIndex].type) &&\r\n                      eventsArray[evetIndex].type !== \"click\" &&\r\n                      formUtil.parentVmExist(this, eventsArray[evetIndex].callback)\r\n                    ) {\r\n                      event[eventsArray[evetIndex].type] = this.parentVm._self[\r\n                        eventsArray[evetIndex].callback\r\n                        ];\r\n                    }\r\n                  }\r\n                  this.$set(this.events, formItem[i].fieldName, event);\r\n                } catch (error) {\r\n                  console.error(\"事件解析错误：\" + error);\r\n                  this.$set(this.events, formItem[i].fieldName, {});\r\n                }\r\n                break;\r\n              } else if (arguments[1] === \"rules\") {\r\n                //解析规则\r\n                try {\r\n                  //解析规则\r\n                  let formRules = arguments[2];\r\n                  let fieldNameRules = [];\r\n                  if (formItem[i].fieldType === \"text\") {\r\n                    let type = formItem[i].dataType;\r\n                    if (type === \"int\") {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateInt;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    } else if (type == \"long\") {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateLong;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    } else if (\r\n                      type == \"double(2)\" ||\r\n                      type == \"double(4)\" ||\r\n                      type == \"double(6)\" ||\r\n                      type == \"money(fen)\" ||\r\n                      type == \"money(jiao)\" ||\r\n                      type == \"money(wan)\" ||\r\n                      type == \"money(yi)\" ||\r\n                      type == \"percentile\" ||\r\n                      type === \"thousand\" ||\r\n                      type == \"tenThousand\"\r\n                    ) {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateNumber;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    } else if (type == \"float\") {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateFloat;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    } else if (type == \"boolean\") {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateBoolean;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    } else if (type === \"money(yuan)\") {\r\n                      let fieldNameRule = {};\r\n                      fieldNameRule[\"validator\"] = formUtil.validateMoney;\r\n                      fieldNameRule[\"trigger\"] = \"blur\";\r\n                      fieldNameRules.push(fieldNameRule);\r\n                    }\r\n                  }\r\n\r\n                  for (let k in formRules) {\r\n                    let fieldNameRule = {};\r\n                    let trigger = \"blur\";\r\n                    let message = \"\";\r\n                    let type = \"\";\r\n                    if (formRules[k].type === \"required\") {\r\n                      fieldNameRule[\"required\"] = true;\r\n                      trigger = \"blur\";\r\n                      message = formItem[i].label + \"不能为空\";\r\n                    } else if (formRules[k].type === \"validator\") {\r\n                      if (formUtil.parentVmExist(this, eformRules[k].validator)) {\r\n                        fieldNameRule[\"validator\"] = this.parentVm._self[\r\n                          eformRules[k].validator\r\n                          ];\r\n                      }\r\n                      trigger = \"blur\";\r\n                    } else if (formRules[k].type === \"number\") {\r\n                      trigger = \"blur\";\r\n                      message = formItem[i].label + \"必须为数字\";\r\n                      type = \"number\";\r\n                    } else if (formRules[k].type === \"email\") {\r\n                      trigger = \"blur\";\r\n                      message = \"请输入正确的邮箱\";\r\n                      type = \"email\";\r\n                    } else if (formRules[k].type === \"phone\") {\r\n                      trigger = \"blur\";\r\n                      message = \"请输入正确的手机号码\";\r\n                      fieldNameRule[\"pattern\"] = /^((13[0-9])|(14[5-9])|(15([0-3]|[5-9]))|(16[6-7])|(17[1-8])|(18[0-9])|(19[1|3])|(19[5|6])|(19[8|9]))\\d{8}$/;\r\n                    } else if (formRules[k].type === \"mobile\") {\r\n                      trigger = \"blur\";\r\n                      message = \"请输入正确的电话号码\";\r\n                      fieldNameRule[\"pattern\"] = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/;\r\n                    } else if (formRules[k].type === \"idNo\") {\r\n                      trigger = \"blur\";\r\n                      fieldNameRule[\"validator\"] = formUtil.validateIdNo;\r\n                    } else {\r\n                      //continue\r\n                    }\r\n\r\n                    if (\r\n                      formItem[i].fieldType === \"checkbox\" ||\r\n                      formItem[i].fieldType === \"multipleSelection\"\r\n                    ) {\r\n                      type = \"array\";\r\n                    }\r\n\r\n                    if (\r\n                      !this.isEmpty(formRules[k].min) &&\r\n                      !this.isEmpty(formRules[k].max)\r\n                    ) {\r\n                      fieldNameRule[\"min\"] = formRules[k].min;\r\n                      fieldNameRule[\"max\"] = formRules[k].max;\r\n                      message =\r\n                        formItem[i].label +\r\n                        \"长度必须大于等于\" +\r\n                        formRules[k].min +\r\n                        \"并且小于等于\" +\r\n                        formRules[k].max;\r\n                    } else if (!this.isEmpty(formRules[k].min)) {\r\n                      fieldNameRule[\"min\"] = formRules[k].min;\r\n                      message = formItem[i].label + \"长度必须大于等于\" + formRules[k].min;\r\n                    } else if (!this.isEmpty(formRules[k].max)) {\r\n                      fieldNameRule[\"max\"] = formRules[k].max;\r\n                      message = formItem[i].label + \"长度必须小于等于\" + formRules[k].max;\r\n                    }\r\n\r\n                    if (!this.isEmpty(formRules[k].message)) {\r\n                      message = formRules[k].message;\r\n                    }\r\n                    fieldNameRule[\"message\"] = message;\r\n\r\n                    if (!this.isEmpty(type)) {\r\n                      fieldNameRule[\"type\"] = type;\r\n                    }\r\n\r\n                    if (!this.isEmpty(formRules[k].trigger)) {\r\n                      trigger = formRules[k].trigger;\r\n                    }\r\n                    fieldNameRule[\"trigger\"] = trigger;\r\n\r\n                    fieldNameRules.push(fieldNameRule);\r\n                  }\r\n                  this.$set(this.formRules, formItem[i].fieldName, fieldNameRules);\r\n                } catch (error) {\r\n                  console.error(\"规则解析错误：\" + error);\r\n                  this.$set(this.formRules, formItem[i].fieldName, []);\r\n                }\r\n                break;\r\n              } else {\r\n                formItem[i][arguments[1]] = arguments[2];\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      Fn(method, index, row) {\r\n        if (formUtil.parentVmExist(this, method)) {\r\n          this.parentVm._self[method](index, row);\r\n        }\r\n      },\r\n      tableResize() {\r\n        if (!this.option.height || this.option.height == \"auto\") {\r\n          if (this.option.maxHeight) {\r\n            this.maxHeight = this.option.maxHeight;\r\n          } else {\r\n            this.maxHeight = this.$refs.mftccEditTable.offsetHeight;\r\n          }\r\n          this.option.maxHeight = this.maxHeight;\r\n          if (this.option.isPagination === true) {\r\n            if ((this.maxHeight + \"\").endsWith(\"px\")) {\r\n              this.maxHeight =\r\n                Number(this.maxHeight.substring(0, this.maxHeight.length - 2)) - 40;\r\n            } else {\r\n              this.maxHeight = Number(this.maxHeight) - 40;\r\n            }\r\n          }\r\n          if (this.maxHeight <= 0) {\r\n            this.maxHeight = null;\r\n          }\r\n        } else {\r\n          this.height = this.option.height;\r\n        }\r\n      },\r\n      getTableData(callback) {\r\n        if (!this.option.url) {\r\n          return;\r\n        }\r\n        var _this = this;\r\n        _this.searchData = _this.searchData || {};\r\n        _this.option.tableData = [];\r\n        let url = _this.option.url;\r\n        url = formUtil.converUrl(url);\r\n        findByList(\r\n          url,\r\n          _this.searchData,\r\n          true,\r\n          (res) => {\r\n            if (res.code == 0) {\r\n              let dataList = res.list;\r\n              for (let i in dataList) {\r\n                _this.$set(_this.editFlag, i, false);\r\n                _this.$set(_this.addFlag, i, false);\r\n              }\r\n              _this.option.tableData = dataList;\r\n            }\r\n            _this.option.loading = false;\r\n            _this.$nextTick(() => {\r\n              _this.initForm();\r\n              _this.tableResize();\r\n            });\r\n            if (typeof callback === \"function\") {\r\n              _this.$nextTick(() => {\r\n                callback();\r\n              });\r\n            }\r\n          },\r\n          (error) => {\r\n            _this.option.loading = false;\r\n            _this.$nextTick(() => {\r\n              _this.tableResize();\r\n            });\r\n            if (typeof callback === \"function\") {\r\n              _this.$nextTick(() => {\r\n                callback();\r\n              });\r\n            }\r\n          }\r\n        );\r\n      },\r\n      refresh() {\r\n        this.getTableData();\r\n      },\r\n      search(searchData) {\r\n        this.pageNo = 1;\r\n        this.pageSize = 10;\r\n        this.pageTotal = 0;\r\n        this.currentRow = null;\r\n        this.searchData = this.initSearchData || {};\r\n        if (!this.isEmpty(searchData)) {\r\n          for (let i in searchData) {\r\n            this.searchData[i] = searchData[i];\r\n          }\r\n        }\r\n        this.getTableData();\r\n      },\r\n      checkChange(col) {\r\n        console.log(col);\r\n      },\r\n      setSelectValue() {\r\n        if (arguments.length === 0) {\r\n          this.$refs[this.option.tableId].clearSelection();\r\n        } else if (arguments.length === 1) {\r\n          this.setSelectValue(this.option.selectKey, arguments[0]);\r\n        } else if (arguments.length === 2) {\r\n          let selectKey = arguments[0];\r\n          let tableDatas = this.option.tableData;\r\n          let value = arguments[1];\r\n          if (!(arguments[1] instanceof Array)) {\r\n            value = [arguments[1]];\r\n          }\r\n          for (let i in tableDatas) {\r\n            if (\r\n              tableDatas[i][selectKey] !== undefined &&\r\n              value.indexOf(tableDatas[i][selectKey]) > -1\r\n            ) {\r\n              this.$refs[this.option.tableId].toggleRowSelection(tableDatas[i]);\r\n            }\r\n          }\r\n        } else {\r\n          let selectKey = arguments[0];\r\n          let tableDatas = this.option.tableData;\r\n          let value = arguments[1];\r\n          if (!(arguments[1] instanceof Array)) {\r\n            value = [arguments[1]];\r\n          }\r\n          for (let i in tableDatas) {\r\n            if (\r\n              tableDatas[i][selectKey] !== undefined &&\r\n              value.indexOf(tableDatas[i][selectKey]) > -1\r\n            ) {\r\n              this.$refs[this.option.tableId].toggleRowSelection(\r\n                tableDatas[i],\r\n                arguments[2]\r\n              );\r\n            }\r\n          }\r\n        }\r\n      },\r\n      getSelectValue() {\r\n        let parmKeyArray = this.$refs[this.option.tableId].store.states.selection;\r\n        return parmKeyArray;\r\n      },\r\n      setCurrentValue() {\r\n        if (arguments.length === 0) {\r\n          this.$refs[this.option.tableId].setCurrentRow();\r\n        } else if (arguments.length === 1) {\r\n          this.setCurrentValue(this.option.selectKey, arguments[0]);\r\n        } else {\r\n          let selectKey = arguments[0];\r\n          let tableDatas = this.option.tableData;\r\n          for (let i in tableDatas) {\r\n            if (\r\n              tableDatas[i][selectKey] !== undefined &&\r\n              tableDatas[i][selectKey] === arguments[1]\r\n            ) {\r\n              this.$refs[this.option.tableId].setCurrentRow(tableDatas[i]);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      getCurrentValue() {\r\n        return this.currentRow;\r\n      },\r\n      currentChange(currentRow, oldCurrentRow) {\r\n        this.currentRow = currentRow;\r\n        this.$emit(\"current-change\", currentRow, oldCurrentRow);\r\n      },\r\n      rowClick(row, column, event) {\r\n        if (!this.editFlag[row._$index]) {\r\n          this.$emit(\"row-click\", row, column, event);\r\n        }\r\n      },\r\n      rowDblclick(row, column, event) {\r\n        if (!this.editFlag[row._$index]) {\r\n          this.$emit(\"row-dblclick\", row, column, event);\r\n        }\r\n      },\r\n      initForm() {\r\n        let dataList = this.option.tableData;\r\n        for (let i in dataList) {\r\n          this.setFormValue(i, dataList[i]);\r\n        }\r\n      },\r\n      async initTable(callback) {\r\n        debugger\r\n        let _this = this;\r\n        _this.option = {};\r\n        _this.searchData = _this.initSearchData || {};\r\n        _this.maxHeight = null;\r\n        _this.height = null;\r\n        _this.currentRow = null;\r\n        let tableData;\r\n        try {\r\n          if (this.tableId) {\r\n            let jsonData = await axios.get(\r\n              formUtil.getFormProfilePath() + \"/table/\" + this.tableId + \".json\"\r\n            );\r\n            tableData = jsonData.data;\r\n          }\r\n        } catch (error) {\r\n          _this.$message.error(\r\n            \"未找到 [ \" + this.tableId + \" ] 配置文件或配置文件格式错误\"\r\n          );\r\n        }\r\n        _this.option = JSON.parse(JSON.stringify(tableData));\r\n        if (_this.initData !== undefined) {\r\n          for (let i in _this.initData) {\r\n            _this.option[i] = _this.initData[i];\r\n          }\r\n        }\r\n\r\n        let formItem = _this.option.columns;\r\n        let dicKeyArray = [];\r\n        for (let i in formItem) {\r\n          if (formItem[i].fieldName !== \"\") {\r\n            //解析字典项\r\n            let dicKey = formItem[i].dicKey;\r\n            if (!_this.isEmpty(dicKey) && formItem[i].optionType !== \"1\") {\r\n              let dicKeyObject = {};\r\n              dicKeyObject.dicKey = dicKey;\r\n              dicKeyObject.fieldName = formItem[i].fieldName;\r\n              dicKeyArray.push(dicKeyObject);\r\n            } else {\r\n              _this.$set(_this.pramDicItem, formItem[i].fieldName, formItem[i].dicItem);\r\n            }\r\n\r\n            //解析事件\r\n            _this.attrForm(formItem[i].fieldName, \"events\", formItem[i].events);\r\n\r\n            //解析规则\r\n            _this.attrForm(formItem[i].fieldName, \"rules\", formItem[i].rules);\r\n\r\n            //获取库中选择字典\r\n            if (\r\n              (formItem[i].fieldType === \"select\" ||\r\n                formItem[i].fieldType === \"multipleSelection\") &&\r\n              formItem[i].dataType === \"library\"\r\n            ) {\r\n              getParameter(\r\n                formItem[i].library.url,\r\n                { query: \"\" },\r\n                true,\r\n                function (reponse) {\r\n                  if (reponse.code === 0) {\r\n                    let parmArray = [];\r\n                    let list = reponse.list;\r\n                    let realField = \"optCode\";\r\n                    let showField = \"optName\";\r\n                    if (!_this.isEmpty(formItem[i].library.realField)) {\r\n                      realField = formItem[i].library.realField;\r\n                    }\r\n                    if (!_this.isEmpty(formItem[i].library.showField)) {\r\n                      showField = formItem[i].library.showField;\r\n                    }\r\n                    for (let i in list) {\r\n                      let option = {\r\n                        optCode: list[i][realField],\r\n                        optName: list[i][showField],\r\n                      };\r\n                      parmArray.push(option);\r\n                    }\r\n                    _this.$set(_this.pramDicItem, formItem[i].fieldName, parmArray);\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        //请求字典json文件\r\n        let keyArray = [];\r\n        for (let j in dicKeyArray) {\r\n          keyArray.push(dicKeyArray[j].dicKey);\r\n        }\r\n        formUtil.getParmDic(keyArray, (dicKeyData) => {\r\n          for (let k in dicKeyArray) {\r\n            _this.$set(\r\n              _this.pramDicItem,\r\n              dicKeyArray[k].fieldName,\r\n              dicKeyData[dicKeyArray[k].dicKey]\r\n            );\r\n          }\r\n        });\r\n\r\n        let url = _this.option.url;\r\n        if (url !== undefined && url !== null && url !== \"\") {\r\n          _this.getTableData(callback);\r\n        } else {\r\n          if (typeof callback === \"function\") {\r\n            _this.$nextTick(() => {\r\n              _this.initForm();\r\n              callback();\r\n            });\r\n          }\r\n        }\r\n        // _this.$nextTick(() => {\r\n        //     _this.tableResize();\r\n        // })\r\n      },\r\n    },\r\n  };\r\n</script>\r\n<style scoped>\r\n  .mftcc-edit-table .el-checkbox__label {\r\n    font-size: 12px;\r\n  }\r\n  .mftcc-edit-table .el-dropdown-DColumn {\r\n    position: absolute;\r\n    z-index: 1;\r\n    top: 8px;\r\n    right: 8px;\r\n  }\r\n  .mftcc-edit-table .el-pagination {\r\n    margin-top: 5px;\r\n  }\r\n  .mftcc-edit-table .mftcc-edit-table-dropdown {\r\n    padding: 6px 10px;\r\n    border-radius: 4px;\r\n  }\r\n  .mftcc-edit-table .el-table__body {\r\n    width: calc(100% - 4px) !important;\r\n  }\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.mftcc-edit-table .el-checkbox__label {\n  font-size: 12px;\n}\n.mftcc-edit-table .el-dropdown-DColumn {\n  position: absolute;\n  z-index: 1;\n  top: 8px;\n  right: 8px;\n}\n.mftcc-edit-table .el-pagination {\n  margin-top: 5px;\n}\n.mftcc-edit-table .mftcc-edit-table-dropdown {\n  padding: 6px 10px;\n  border-radius: 4px;\n}\n.mftcc-edit-table .el-table__body {\n  width: calc(100% - 4px) !important;\n}\n","<template>\r\n  <div id=\"iframeBox\" ref=\"iframeBox\">\r\n    <iframe ref=\"iframe\" name=\"refresh_name\" class=\"iframe-style\" frameborder=\"no\" border=\"0\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getToken, setToken } from \"../utils/storeUtil\";\r\nexport default {\r\n  name: \"mftccIframe\",\r\n  data() {\r\n    return {\r\n      loading: null,\r\n      isLoaded:false,\r\n      callback:null\r\n    };\r\n  },\r\n  props: [\"src\",\"initParams\"],\r\n  created() {},\r\n  mounted() {\r\n    this.resetSrc();\r\n    this.message();\r\n  },\r\n  methods: {\r\n    resetSrc() {\r\n      let iframeUrl;\r\n      if(this.src){\r\n        iframeUrl = this.src;\r\n      }else{\r\n        let path = this.$route.path;\r\n        iframeUrl = this.$route.meta.iframeUrl;\r\n        if(iframeUrl.startsWith(\"/\")){\r\n          iframeUrl = iframeUrl.substring(1);\r\n        }\r\n        var productName =iframeUrl.split(\"/\")[0];\r\n        var productType = productName.substring(productName.indexOf(\"-\")+1,productName.lastIndexOf(\"-\"));\r\n        let env = process.env.NODE_ENV == 'development'?\"DEV_\":\"PRO_\";\r\n        let realPath = window.serverConfig[env+productType.toUpperCase()+\"_HOST\"]||\"\";\r\n        if(!realPath){\r\n          realPath = this.$store.getters.serverConfig[env+productType.toUpperCase()+\"_HOST\"]||\"\";\r\n        }\r\n        iframeUrl = realPath + \"/\" + iframeUrl;\r\n      }\r\n      if(iframeUrl){\r\n        this.iframeInit(iframeUrl);\r\n      }\r\n    },\r\n    sendToken(newVal) {\r\n        const iframe = this.$refs.iframe;\r\n        //发送消息\r\n        let data = JSON.stringify({\r\n          token:getToken(),\r\n          initParams:this.initParams\r\n        });\r\n        iframe.contentWindow.postMessage(data, \"*\");\r\n        // if(!this.isLoaded){\r\n        //     this.forceUpdataIframe(iframe, newVal)\r\n        //     this.isLoaded = true;\r\n\r\n        // }\r\n      //关闭加载\r\n      this.loading.close();\r\n    },\r\n    //iframe 初始化\r\n    iframeInit(newVal) {\r\n      //链接为空不显示加载状态和绑定ifram监听事件\r\n      if (newVal == \"\") {\r\n        return;\r\n      }\r\n      // debugger;\r\n      if (this.loading) {\r\n        this.loading.close();\r\n      }\r\n      this.loading = this.$loading({\r\n        target: this.$refs.iframeBox.$el,\r\n        lock: true,\r\n        customClass: \"global-loading\",\r\n        text: \"页面加载中...\",\r\n        spinner: \"el-icon-loading\",\r\n        background: \"transparent\"\r\n      });\r\n      let iframe = this.$refs.iframe;\r\n\r\n    //   处理兼容行问题\r\n      if (iframe.attachEvent) {\r\n        iframe.attachEvent(\"onload\", () => {\r\n          this.sendToken(newVal);\r\n        });\r\n      } else {\r\n        iframe.onload = () => {\r\n          console.log(\"isOnLoad\");\r\n          this.sendToken(newVal);\r\n        };\r\n      }\r\n\r\n\r\n      //利用异步延迟加载和链接随机传参来达到刷新iframe缓存的目的，不加此步骤iframe页面不更新\r\n      this.forceUpdataIframe(iframe, newVal);\r\n\r\n      // debugger;\r\n    },\r\n    //强制刷新iframe缓存\r\n    forceUpdataIframe(iframe, newVal) {\r\n        setTimeout(() => {\r\n            let fresh_link = new Date().getTime() + Math.floor(Math.random() * 1000000); //获取当前时间戳\r\n            String.prototype.splice = function(start, newStr) {\r\n                return this.slice(0, start) + newStr + this.slice(start);\r\n            };\r\n            let strIndex = newVal.indexOf(\"/#/\");\r\n            let url;\r\n            if(strIndex!=-1){\r\n                url = newVal.splice(strIndex, \"?time=\" + fresh_link);\r\n            }else{\r\n                url = newVal + \"?time=\" + fresh_link;\r\n            }\r\n            let query = this.$route.query;\r\n            for(let key in query){\r\n              url += \"&\"+key+\"=\"+query[key];\r\n            }\r\n            console.log(\"url\", url);\r\n            iframe.src = url;\r\n        }, 100);\r\n    },\r\n    message(){\r\n      window.removeEventListener('message',iframeHandler);\r\n      window.addEventListener('message', iframeHandler);\r\n      let _this = this;\r\n      function iframeHandler(e) {\r\n        if(typeof(_this.callback) === \"function\"){\r\n          if(e.data.type == \"setVariables\"\r\n          ||e.data.type == \"doCommitBack\"\r\n          ||e.data.type == \"appFormInitMethod\"\r\n          ||e.data.type == \"appPageDataMethod\"){\r\n              _this.callback(e.data.data);\r\n              _this.callback = null;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //流程获取变量函数\r\n    getVariables(variablesMethod,formData,callback){\r\n      this.callback = callback;\r\n      let data = {\r\n        type: \"getVariables\",\r\n        formData:formData,\r\n        method: variablesMethod\r\n      };\r\n      this.$refs.iframe.contentWindow.postMessage(data, \"*\");\r\n    },\r\n    doCommit(method,params,callback){\r\n      this.callback = callback;\r\n      let data = {\r\n        type: \"doCommit\",\r\n        params: params,\r\n        method: method\r\n      };\r\n      this.$refs.iframe.contentWindow.postMessage(data, \"*\");\r\n    },\r\n    appFormInitMethod(method,callback){\r\n      this.callback = callback;\r\n      let data = {\r\n        type: \"appFormInitMethod\",\r\n        method: method\r\n      };\r\n      this.$refs.iframe.contentWindow.postMessage(data, \"*\");\r\n    },\r\n    appPageDataMethod(method,callback){\r\n      this.callback = callback;\r\n      let data = {\r\n        type: \"appPageDataMethod\",\r\n        method: method\r\n      };\r\n      this.$refs.iframe.contentWindow.postMessage(data, \"*\");\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#iframeBox{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.iframe-style{\r\n  width: 100%;\r\n  height: calc(100% - 3px);\r\n}\r\n</style>","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n#iframeBox{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.iframe-style{\r\n  width: 100%;\r\n  height: calc(100% - 3px);\r\n}\r\n","<template>\r\n  <div class=\"mftcc-definitidon-search\">\r\n    <el-row>\r\n      <el-col :span=\"12\">\r\n        <div class=\"custom-search\">\r\n          <el-menu :default-active=\"filterMenuactiveIndex\" mode=\"horizontal\">\r\n            <el-menu-item\r\n              v-for=\"(menu, index) in filterMenu || []\"\r\n              :key=\"index\"\r\n              :index=\"index.toString()\"\r\n              @click=\"menuSearch(menu.query)\"\r\n              >{{ menu.label }}</el-menu-item\r\n            >\r\n          </el-menu>\r\n          <el-button\r\n            type=\"text\"\r\n            icon=\"el-icon-circle-plus-outline\"\r\n            class=\"definitidon-button\"\r\n            @click=\"searchShow = !searchShow\"\r\n            v-if=\"filterDic.show === true\"\r\n            >定义筛选</el-button\r\n          >\r\n        </div>\r\n      </el-col>\r\n      <el-col :span=\"8\" class=\"search-col\">\r\n        <div class=\"dynamic-search\">\r\n          <el-input\r\n            :placeholder=\"searchPlaceholder || '请输入查询条件'\"\r\n            suffix-icon=\"el-icon-search\"\r\n            v-model=\"searchData\"\r\n            class=\"dynamic-input\"\r\n            @input=\"search()\"\r\n          >\r\n          </el-input>\r\n          <el-button\r\n            v-for=\"(filterButtonItem, index) in filterButton || []\"\r\n            :key=\"index\"\r\n            :icon=\"filterButtonItem.icon\"\r\n            @click=\"buttonEvent(filterButtonItem.event)\"\r\n            >{{ filterButtonItem.label }}</el-button\r\n          >\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n    <el-row>\r\n      <el-collapse-transition>\r\n        <div v-if=\"searchShow\">\r\n          <div class=\"dynamic-edit-filter\">\r\n            <span>已保存的历史检索</span>\r\n            <el-tabs\r\n              v-model=\"editableFilter\"\r\n              type=\"card\"\r\n              closable\r\n              @tab-remove=\"removeFilter\"\r\n              @tab-click=\"clickFilter\"\r\n            >\r\n              <el-tab-pane\r\n                v-for=\"filter in filters\"\r\n                :key=\"filter.filterNo\"\r\n                :label=\"filter.filterName\"\r\n                :name=\"filter.filterNo\"\r\n              >\r\n              </el-tab-pane>\r\n            </el-tabs>\r\n          </div>\r\n          <el-form :model=\"definitidonForm\" ref=\"definitidonForm\" @submit.native.prevent>\r\n            <el-form-item\r\n              v-for=\"(definitidon, index) in definitidonForm.definitidon\"\r\n              :key=\"index\"\r\n            >\r\n              <el-col :span=\"3\">\r\n                <template v-if=\"index == 0\"> 请选择： </template>\r\n                <template v-else>\r\n                  <el-form-item :prop=\"'definitidon.' + index + '.andOr'\">\r\n                    <el-radio-group v-model=\"definitidon.andOr\">\r\n                      <el-radio-button label=\"0\">并且</el-radio-button>\r\n                      <el-radio-button label=\"1\">或者</el-radio-button>\r\n                    </el-radio-group>\r\n                  </el-form-item>\r\n                </template>\r\n              </el-col>\r\n              <el-col :span=\"5\">\r\n                <el-form-item\r\n                  :prop=\"'definitidon.' + index + '.fieldName'\"\r\n                  :rules=\"[\r\n                    { required: true, message: '字段不能为空！', trigger: 'change' },\r\n                  ]\"\r\n                >\r\n                  <el-select\r\n                    v-model=\"definitidon.fieldName\"\r\n                    clearable\r\n                    placeholder=\"请选择\"\r\n                    @change=\"fieldChange(index)\"\r\n                  >\r\n                    <el-option\r\n                      v-for=\"item in filterDic.filter\"\r\n                      :key=\"item.fieldName\"\r\n                      :label=\"item.label\"\r\n                      :value=\"item.fieldName\"\r\n                    >\r\n                    </el-option>\r\n                  </el-select>\r\n                </el-form-item>\r\n              </el-col>\r\n              <el-col :span=\"5\">\r\n                <template v-if=\"getFilterDic(index).dicType !== ''\">\r\n                  <el-form-item\r\n                    :prop=\"'definitidon.' + index + '.dicType'\"\r\n                    :rules=\"[\r\n                      { required: true, message: '条件不能为空！', trigger: 'change' },\r\n                    ]\"\r\n                  >\r\n                    <el-select\r\n                      v-model=\"definitidon.dicType\"\r\n                      clearable\r\n                      placeholder=\"请选择\"\r\n                    >\r\n                      <el-option\r\n                        v-for=\"item in dicType[getFilterDic(index).dicType]\"\r\n                        :key=\"item.optCode\"\r\n                        :label=\"item.optName\"\r\n                        :value=\"item.optCode\"\r\n                      >\r\n                      </el-option>\r\n                    </el-select>\r\n                  </el-form-item>\r\n                </template>\r\n              </el-col>\r\n              <template v-if=\"getFilterDic(index).dicType === 'select'\">\r\n                <template\r\n                  v-if=\"\r\n                    definitidonForm.definitidon[index].dicType === '3' ||\r\n                    definitidonForm.definitidon[index].dicType === '4'\r\n                  \"\r\n                >\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'change' },\r\n                      ]\"\r\n                    >\r\n                      <el-select\r\n                        v-model=\"definitidon.value\"\r\n                        clearable\r\n                        placeholder=\"请选择\"\r\n                      >\r\n                        <el-option\r\n                          v-for=\"item in getFilterDic(index).dicItem\"\r\n                          :key=\"item.optCode\"\r\n                          :label=\"item.optName\"\r\n                          :value=\"item.optCode\"\r\n                        >\r\n                        </el-option>\r\n                      </el-select>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                  <el-col class=\"line\" :span=\"1\">-</el-col>\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.secondValue'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'change' },\r\n                      ]\"\r\n                    >\r\n                      <el-select\r\n                        v-model=\"definitidon.secondValue\"\r\n                        clearable\r\n                        placeholder=\"请选择\"\r\n                      >\r\n                        <el-option\r\n                          v-for=\"item in getFilterDic(index).dicItem\"\r\n                          :key=\"item.optCode\"\r\n                          :label=\"item.optName\"\r\n                          :value=\"item.optCode\"\r\n                        >\r\n                        </el-option>\r\n                      </el-select>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n                <template v-else-if=\"definitidonForm.definitidon[index].dicType !== ''\">\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'change' },\r\n                      ]\"\r\n                    >\r\n                      <el-select\r\n                        v-model=\"definitidon.value\"\r\n                        clearable\r\n                        placeholder=\"请选择\"\r\n                      >\r\n                        <el-option\r\n                          v-for=\"item in getFilterDic(index).dicItem\"\r\n                          :key=\"item.optCode\"\r\n                          :label=\"item.optName\"\r\n                          :value=\"item.optCode\"\r\n                        >\r\n                        </el-option>\r\n                      </el-select>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n              </template>\r\n              <template v-else-if=\"getFilterDic(index).dicType === 'number'\">\r\n                <template\r\n                  v-if=\"\r\n                    definitidonForm.definitidon[index].dicType === '3' ||\r\n                    definitidonForm.definitidon[index].dicType === '4'\r\n                  \"\r\n                >\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"number\"\r\n                        v-model.number=\"definitidon.value\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                  <el-col class=\"line\" :span=\"1\">-</el-col>\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.secondValue'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"number\"\r\n                        v-model.number=\"definitidon.secondValue\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n                <template v-else-if=\"definitidonForm.definitidon[index].dicType !== ''\">\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"number\"\r\n                        v-model.number=\"definitidon.value\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n              </template>\r\n              <template v-else-if=\"getFilterDic(index).dicType === 'text'\">\r\n                <template\r\n                  v-if=\"\r\n                    definitidonForm.definitidon[index].dicType === '3' ||\r\n                    definitidonForm.definitidon[index].dicType === '4'\r\n                  \"\r\n                >\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"text\"\r\n                        v-model=\"definitidon.value\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                  <el-col class=\"line\" :span=\"1\">-</el-col>\r\n                  <el-col :span=\"4\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.secondValue'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"text\"\r\n                        v-model=\"definitidon.secondValue\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n                <template v-else-if=\"definitidonForm.definitidon[index].dicType !== ''\">\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'blur' },\r\n                      ]\"\r\n                    >\r\n                      <el-input\r\n                        type=\"text\"\r\n                        v-model=\"definitidon.value\"\r\n                        autocomplete=\"off\"\r\n                      ></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n              </template>\r\n              <template v-else-if=\"getFilterDic(index).dicType === 'date'\">\r\n                <template\r\n                  v-if=\"\r\n                    definitidonForm.definitidon[index].dicType === '3' ||\r\n                    definitidonForm.definitidon[index].dicType === '4'\r\n                  \"\r\n                >\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'change' },\r\n                      ]\"\r\n                    >\r\n                      <el-date-picker\r\n                        v-model=\"definitidon.value\"\r\n                        type=\"daterange\"\r\n                        range-separator=\"至\"\r\n                        format=\"yyyy-MM-dd\"\r\n                        value-format=\"yyyyMMdd\"\r\n                        placeholder=\"请选择\"\r\n                      >\r\n                      </el-date-picker>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n                <template v-else-if=\"definitidonForm.definitidon[index].dicType !== ''\">\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item\r\n                      :prop=\"'definitidon.' + index + '.value'\"\r\n                      :rules=\"[\r\n                        { required: true, message: '值不能为空！', trigger: 'change' },\r\n                      ]\"\r\n                    >\r\n                      <el-date-picker\r\n                        v-model=\"definitidon.value\"\r\n                        format=\"yyyy-MM-dd\"\r\n                        value-format=\"yyyyMMdd\"\r\n                        type=\"date\"\r\n                        placeholder=\"请选择\"\r\n                      >\r\n                      </el-date-picker>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                </template>\r\n              </template>\r\n              <el-col :span=\"2\">\r\n                <el-button\r\n                  icon=\"el-icon-circle-plus-outline\"\r\n                  circle\r\n                  @click.prevent=\"addDefinitidon\"\r\n                  size=\"small\"\r\n                ></el-button>\r\n                <template v-if=\"definitidonForm.definitidon.length !== 1\">\r\n                  <el-button\r\n                    icon=\"el-icon-circle-close\"\r\n                    circle\r\n                    @click.prevent=\"removeDefinitidon(index)\"\r\n                    size=\"small\"\r\n                  ></el-button>\r\n                </template>\r\n              </el-col>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div class=\"mftcc-definitidon-btn\">\r\n            <el-button type=\"primary\" @click=\"search()\">搜索</el-button>\r\n            <el-button type=\"primary\" @click=\"submitFilter\">保存</el-button>\r\n            <el-button type=\"primary\" @click=\"resetDefinitidon\">重置</el-button>\r\n          </div>\r\n        </div>\r\n      </el-collapse-transition>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { del, get, postJson, putJson } from \"../axios\";\r\nexport default {\r\n  props: [\"filterDic\", \"parentVm\", \"filterMenu\", \"filterButton\", \"searchPlaceholder\"],\r\n  data() {\r\n    return {\r\n      defaultDefinitidon: {\r\n        andOr: \"0\",\r\n        fieldName: \"\",\r\n        fieldType: \"\",\r\n        dicType: \"\",\r\n        value: \"\",\r\n        secondValue: \"\",\r\n      },\r\n      definitidonForm: {\r\n        definitidon: [\r\n          {\r\n            andOr: \"0\",\r\n            fieldName: \"\",\r\n            fieldType: \"\",\r\n            dicType: \"\",\r\n            value: \"\",\r\n            secondValue: \"\",\r\n          },\r\n        ],\r\n      },\r\n      dicType: {\r\n        select: [\r\n          { optName: \"是\", optCode: \"0\" },\r\n          { optName: \"不是\", optCode: \"99\" },\r\n        ],\r\n        number: [\r\n          { optName: \"等于\", optCode: \"0\" },\r\n          { optName: \"大于\", optCode: \"1\" },\r\n          { optName: \"小于\", optCode: \"2\" },\r\n          { optName: \"在...之间\", optCode: \"3\" },\r\n          { optName: \"不在...之间\", optCode: \"4\" },\r\n        ],\r\n        text: [{ optName: \"是\", optCode: \"0\" }],\r\n        date: [\r\n          { optName: \"等于\", optCode: \"0\" },\r\n          { optName: \"大于\", optCode: \"1\" },\r\n          { optName: \"小于\", optCode: \"2\" },\r\n          { optName: \"在...之间\", optCode: \"3\" },\r\n          { optName: \"不在...之间\", optCode: \"4\" },\r\n        ],\r\n      },\r\n      filters: [],\r\n      editableFilter: \"default\",\r\n      clickTabFilter: \"default\",\r\n      searchShow: false,\r\n      searchData: \"\",\r\n      filterMenuactiveIndex: \"\",\r\n    };\r\n  },\r\n  watch: {\r\n    searchShow() {\r\n      if (this.searchShow === true) {\r\n        this.init();\r\n      }\r\n    },\r\n    filterMenu: {\r\n      handler(val, oldVal) {\r\n        for (let i = 0; i < val.length; i++) {\r\n          if (val[i].default === true) {\r\n            this.filterMenuactiveIndex = i.toString();\r\n          }\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    getSearchData(searchData) {\r\n      searchData.dynamicQuery = this.searchData;\r\n      if (this.searchShow === true) {\r\n        searchData.customQuery = JSON.stringify(this.definitidonForm.definitidon);\r\n      }\r\n      return searchData;\r\n    },\r\n    buttonEvent(event) {\r\n      if (event !== undefined && event !== null && event !== \"\") {\r\n        let searchData = this.getSearchData({});\r\n        this.parentVm._self[event](searchData);\r\n      }\r\n    },\r\n    //组件初始化方法\r\n    init() {\r\n      get(\r\n        \"/mftcc-sys-server/sys/sysUserSearchFilter/findByVue/\" +\r\n          this.parentVm.$options.name,\r\n        null,\r\n        true,\r\n        (res) => {\r\n          if (res.code === 0) {\r\n            let filterList = res.list;\r\n            this.filters = filterList;\r\n            this.editableFilter = \"default\";\r\n            this.clickTabFilter = \"default\";\r\n            let definitidonObj = JSON.parse(JSON.stringify(this.defaultDefinitidon));\r\n            this.filters.unshift({\r\n              filterNo: \"default\",\r\n              filterName: \"新增\",\r\n              filterContent: JSON.stringify([definitidonObj]),\r\n            });\r\n            this.resetDefinitidon();\r\n          } else {\r\n            this.$alert(res.msg, this.$alertTitle, {\r\n              type: res.msgType,\r\n              dangerouslyUseHTMLString: true,\r\n              callback: (action) => {\r\n                this.searchShow = false;\r\n              },\r\n            });\r\n          }\r\n        },\r\n        (error) => {\r\n          this.searchShow = false;\r\n        }\r\n      );\r\n    },\r\n    //根据索引获取当前筛选配置\r\n    getFilterDic(index) {\r\n      let result = {\r\n        dicItem: [],\r\n        dicType: \"\",\r\n      };\r\n      for (let filterDic of this.filterDic.filter) {\r\n        if (filterDic.fieldName === this.definitidonForm.definitidon[index].fieldName) {\r\n          result = filterDic;\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n    //字段change事件\r\n    fieldChange(index) {\r\n      this.definitidonForm.definitidon[index].fieldType = this.getFilterDic(\r\n        index\r\n      ).dicType;\r\n      this.definitidonForm.definitidon[index].dicType = \"\";\r\n      this.definitidonForm.definitidon[index].value = \"\";\r\n      this.definitidonForm.definitidon[index].secondValue = \"\";\r\n    },\r\n    //新增筛选\r\n    submitFilter() {\r\n      this.$refs.definitidonForm.validate((valid) => {\r\n        if (valid) {\r\n          let filterNo = this.clickTabFilter;\r\n          let filterContent = JSON.stringify(this.definitidonForm.definitidon);\r\n          let data = {\r\n            vue: this.parentVm.$options.name,\r\n            filterNo: filterNo,\r\n            filterContent: filterContent,\r\n          };\r\n          if (filterNo !== \"default\") {\r\n            this.$confirm(\"此操作将保存该筛选, 是否继续?\", \"提示\", {\r\n              confirmButtonText: \"确定\",\r\n              cancelButtonText: \"取消\",\r\n              type: \"warning\",\r\n            }).then(() => {\r\n              putJson(\r\n                \"/mftcc-sys-server/sys/sysUserSearchFilter/update\",\r\n                data,\r\n                true,\r\n                (reponse) => {\r\n                  if (reponse.code === 0) {\r\n                    this.$message({\r\n                      type: reponse.msgType,\r\n                      dangerouslyUseHTMLString: true,\r\n                      message: reponse.msg,\r\n                    });\r\n                    this.filters.forEach((currentValue, index, arr) => {\r\n                      if (currentValue.filterNo == filterNo) {\r\n                        currentValue.filterContent = filterContent;\r\n                      }\r\n                    });\r\n                  } else {\r\n                    this.$alert(reponse.msg, this.$alertTitle, {\r\n                      type: reponse.msgType,\r\n                      dangerouslyUseHTMLString: true,\r\n                    });\r\n                  }\r\n                }\r\n              );\r\n            });\r\n          } else {\r\n            this.$prompt(\"请输入筛选名称\", this.$alertTitle, {\r\n              confirmButtonText: \"确定\",\r\n              cancelButtonText: \"取消\",\r\n              inputPattern: /\\S/,\r\n              inputErrorMessage: \"筛选名称不能为空\",\r\n            })\r\n              .then(({ value }) => {\r\n                data.filterName = value;\r\n                postJson(\r\n                  \"/mftcc-sys-server/sys/sysUserSearchFilter/insert\",\r\n                  data,\r\n                  true,\r\n                  (res) => {\r\n                    if (res.code === 0) {\r\n                      this.$message({\r\n                        type: res.msgType,\r\n                        dangerouslyUseHTMLString: true,\r\n                        message: res.msg,\r\n                      });\r\n                      this.filters.push(res.data);\r\n                      this.editableFilter = res.data.filterNo;\r\n                      this.clickTabFilter = res.data.filterNo;\r\n                    } else {\r\n                      this.$alert(res.msg, this.$alertTitle, {\r\n                        type: res.msgType,\r\n                        dangerouslyUseHTMLString: true,\r\n                      });\r\n                    }\r\n                  }\r\n                );\r\n              })\r\n              .catch(() => {});\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    //删除已保存筛选\r\n    removeFilter(filterNo) {\r\n      if (filterNo !== \"default\") {\r\n        this.$confirm(\"此操作将永久删除该筛选, 是否继续?\", \"提示\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\",\r\n        }).then(() => {\r\n          del(\r\n            \"/mftcc-sys-server/sys/sysUserSearchFilter/deleteById/\" + filterNo,\r\n            null,\r\n            true,\r\n            (reponse) => {\r\n              if (reponse.code === 0) {\r\n                this.$message({\r\n                  type: reponse.msgType,\r\n                  dangerouslyUseHTMLString: true,\r\n                  message: reponse.msg,\r\n                });\r\n                if (this.clickTabFilter === filterNo) {\r\n                  this.editableFilter = \"default\";\r\n                  this.clickTabFilter = \"default\";\r\n                  this.resetDefinitidon();\r\n                }\r\n                this.filters.forEach((currentValue, index, arr) => {\r\n                  if (currentValue.filterNo == filterNo) {\r\n                    this.filters.splice(index, 1);\r\n                  }\r\n                });\r\n              } else {\r\n                this.$alert(reponse.msg, this.$alertTitle, {\r\n                  type: reponse.msgType,\r\n                  dangerouslyUseHTMLString: true,\r\n                });\r\n              }\r\n            }\r\n          );\r\n        });\r\n      }\r\n    },\r\n    //点击已保存的筛选\r\n    clickFilter(filter) {\r\n      if (this.clickTabFilter !== filter.name) {\r\n        this.filters.forEach((currentValue) => {\r\n          if (currentValue.filterNo == filter.name) {\r\n            this.definitidonForm.definitidon = JSON.parse(currentValue.filterContent);\r\n          }\r\n        });\r\n        this.clickTabFilter = filter.name;\r\n      }\r\n    },\r\n    //查询按钮回调\r\n    search() {\r\n      this.$refs.definitidonForm.validate((valid) => {\r\n        if (valid) {\r\n          let searchData = this.getSearchData({});\r\n          this.$emit(\"search\", searchData);\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    menuSearch(searchData) {\r\n      this.$emit(\"search\", searchData);\r\n    },\r\n    //移除筛选\r\n    removeDefinitidon(index) {\r\n      this.definitidonForm.definitidon.splice(index, 1);\r\n    },\r\n    //重置筛选\r\n    resetDefinitidon() {\r\n      let definitidonObj = JSON.parse(JSON.stringify(this.defaultDefinitidon));\r\n      this.definitidonForm.definitidon = [definitidonObj];\r\n    },\r\n    //添加筛选条件\r\n    addDefinitidon() {\r\n      let definitidonObj = JSON.parse(JSON.stringify(this.defaultDefinitidon));\r\n      this.definitidonForm.definitidon.push(definitidonObj);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mftcc-definitidon-search .dynamic-search {\r\n  width: 100%;\r\n  margin: 0;\r\n  height: 34px;\r\n  margin-top: 8px;\r\n}\r\n.mftcc-definitidon-search .dynamic-search .dynamic-input {\r\n  width: 230px;\r\n  float: left;\r\n}\r\n.mftcc-definitidon-search .dynamic-search .dynamic-input input {\r\n  border: 1px solid #4a7ec3;\r\n  border-radius: 0px;\r\n  height: 34px;\r\n}\r\n.mftcc-definitidon-search .dynamic-search button {\r\n  color: #4a7ec3;\r\n  border-color: #4a7ec3;\r\n  border-radius: 2px;\r\n  height: 100%;\r\n  float: left;\r\n  padding: 10px 20px;\r\n  background: none;\r\n}\r\n\r\n.mftcc-definitidon-search .custom-search {\r\n  display: flex;\r\n  margin-top: 4px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button {\r\n  font-size: 12px;\r\n  color: #4a7ec3;\r\n  margin-left: 10px;\r\n  margin-top: -3px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button i {\r\n  font-size: 16px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button span {\r\n  position: relative;\r\n  top: -2px;\r\n}\r\n\r\n.mftcc-definitidon-search .custom-search .el-menu {\r\n  border: none;\r\n  background: none;\r\n}\r\n\r\n.mftcc-definitidon-search .el-menu .el-menu-item {\r\n  height: 34px;\r\n  line-height: 34px;\r\n  border: none;\r\n  font-size: 12px;\r\n  color: #3d3d3d;\r\n}\r\n.mftcc-definitidon-search .el-menu .el-menu-item:hover {\r\n  background: none;\r\n}\r\n\r\n.mftcc-definitidon-search .el-menu .el-menu-item.is-active {\r\n  color: #4a7ec3;\r\n  font-size: 14px;\r\n  padding: 0 20px !important;\r\n  border-bottom: 1px solid rgba(74, 126, 195, 1) !important;\r\n}\r\n\r\n.mftcc-definitidon-search .search-col {\r\n  float: right;\r\n  width: auto;\r\n}\r\n\r\n.mftcc-definitidon-search .el-form > .el-form-item > .el-form-item__content {\r\n  margin: 0 auto;\r\n  width: 840px;\r\n}\r\n.mftcc-definitidon-search .el-input {\r\n  padding-right: 10px;\r\n  box-sizing: border-box;\r\n}\r\n.mftcc-definitidon-search .el-col-3 {\r\n  text-align: right;\r\n  padding-right: 10px;\r\n}\r\n.mftcc-definitidon-search .el-col-2:last-child {\r\n  padding-left: 10px;\r\n}\r\n.mftcc-definitidon-search .el-col-1.line {\r\n  text-align: center;\r\n  padding-right: 10px;\r\n}\r\n.mftcc-definitidon-search .el-input__inner,\r\n.mftcc-definitidon-search .el-select {\r\n  width: 100%;\r\n}\r\n.mftcc-definitidon-search .el-date-editor.el-input,\r\n.mftcc-definitidon-search .el-date-editor.el-input__inner {\r\n  width: calc(100% - 10px);\r\n  border-radius: 0;\r\n  height: 34px;\r\n}\r\n\r\n.mftcc-definitidon-search .el-date-editor.el-input__inner.el-date-editor--daterange {\r\n  border: 1px solid rgba(153, 153, 153, 1);\r\n}\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range__icon,\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range__close-icon,\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range-separator {\r\n  line-height: 26px;\r\n}\r\n.mftcc-definitidon-search .el-button.is-circle {\r\n  padding: 0;\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search .el-button--small {\r\n  font-size: 16px;\r\n}\r\n.mftcc-definitidon-search .el-input__suffix {\r\n  right: 10px;\r\n  top: -2px;\r\n}\r\n.mftcc-definitidon-search .el-input .el-input__inner {\r\n  height: 34px;\r\n  padding-right: 20px;\r\n  border: 1px solid rgba(153, 153, 153, 1);\r\n  border-radius: 0;\r\n}\r\n.mftcc-definitidon-search .el-radio-button__inner {\r\n  padding: 10px 6px;\r\n}\r\n.mftcc-definitidon-search .el-radio-button__orig-radio:checked + .el-radio-button__inner {\r\n  background-color: rgba(68, 148, 249, 1);\r\n  border-color: rgba(68, 148, 249, 1);\r\n}\r\n.mftcc-list .mftcc-search-form {\r\n  position: relative;\r\n}\r\n.mftcc-definitidon-search .el-form {\r\n  padding-bottom: 0px;\r\n  overflow: hidden;\r\n  padding-top: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.mftcc-definitidon-search .dynamic-edit-filter {\r\n  padding: 0 20px;\r\n}\r\n.mftcc-definitidon-search .mftcc-definitidon-btn {\r\n  position: relative;\r\n  text-align: center;\r\n  padding: 6px 0;\r\n  background: #edf2fa;\r\n  border: 1px solid rgba(225, 226, 227, 1);\r\n  margin-bottom: 0;\r\n  float: none;\r\n}\r\n.mftcc-definitidon-search .el-button--primary {\r\n  padding: 10px 36px;\r\n}\r\n.mftcc-definitidon-search .el-button--primary:first-child {\r\n  background: #4494f9;\r\n  border-color: #4494f9;\r\n}\r\n.mftcc-definitidon-search .el-button--primary:last-child {\r\n  background: #fff;\r\n  border-color: #d2d4d6;\r\n  color: #333;\r\n}\r\n.mftcc-definitidon-search .el-tabs--top.el-tabs--card > .el-tabs__header .el-tabs__item {\r\n  border-radius: 14px;\r\n  height: 28px;\r\n  line-height: 28px;\r\n  background: #edf2fa;\r\n  margin-left: 10px;\r\n  border: 1px solid #e1e2e3;\r\n}\r\n.mftcc-definitidon-search .el-tabs--card > .el-tabs__header .el-tabs__nav {\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search .el-tabs.el-tabs--card.el-tabs--top {\r\n  display: inline-block;\r\n  position: relative;\r\n  top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n.mftcc-definitidon-search .el-tabs--card > .el-tabs__header {\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search\r\n  .el-tabs--card\r\n  > .el-tabs__header\r\n  .el-tabs__item.is-active.is-closable {\r\n  background: #e3f2fd;\r\n  color: #333;\r\n}\r\n.mftcc-definitidon-search .el-row:last-child {\r\n  border: 1px solid #e1e2e3;\r\n  background: #fafafa;\r\n}\r\n.mftcc-definitidon-search .el-row:first-child {\r\n  height: 50px;\r\n}\r\n@media screen and (min-width: 1200px) {\r\n  .mftcc-definitidon-search .el-form > .el-form-item {\r\n    float: left;\r\n  }\r\n}\r\n</style>\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.mftcc-definitidon-search .dynamic-search {\r\n  width: 100%;\r\n  margin: 0;\r\n  height: 34px;\r\n  margin-top: 8px;\r\n}\r\n.mftcc-definitidon-search .dynamic-search .dynamic-input {\r\n  width: 230px;\r\n  float: left;\r\n}\r\n.mftcc-definitidon-search .dynamic-search .dynamic-input input {\r\n  border: 1px solid #4a7ec3;\r\n  border-radius: 0px;\r\n  height: 34px;\r\n}\r\n.mftcc-definitidon-search .dynamic-search button {\r\n  color: #4a7ec3;\r\n  border-color: #4a7ec3;\r\n  border-radius: 2px;\r\n  height: 100%;\r\n  float: left;\r\n  padding: 10px 20px;\r\n  background: none;\r\n}\r\n.mftcc-definitidon-search .custom-search {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  margin-top: 4px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button {\r\n  font-size: 12px;\r\n  color: #4a7ec3;\r\n  margin-left: 10px;\r\n  margin-top: -3px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button i {\r\n  font-size: 16px;\r\n}\r\n.mftcc-definitidon-search .custom-search .definitidon-button span {\r\n  position: relative;\r\n  top: -2px;\r\n}\r\n.mftcc-definitidon-search .custom-search .el-menu {\r\n  border: none;\r\n  background: none;\r\n}\r\n.mftcc-definitidon-search .el-menu .el-menu-item {\r\n  height: 34px;\r\n  line-height: 34px;\r\n  border: none;\r\n  font-size: 12px;\r\n  color: #3d3d3d;\r\n}\r\n.mftcc-definitidon-search .el-menu .el-menu-item:hover {\r\n  background: none;\r\n}\r\n.mftcc-definitidon-search .el-menu .el-menu-item.is-active {\r\n  color: #4a7ec3;\r\n  font-size: 14px;\r\n  padding: 0 20px !important;\r\n  border-bottom: 1px solid rgba(74, 126, 195, 1) !important;\r\n}\r\n.mftcc-definitidon-search .search-col {\r\n  float: right;\r\n  width: auto;\r\n}\r\n.mftcc-definitidon-search .el-form > .el-form-item > .el-form-item__content {\r\n  margin: 0 auto;\r\n  width: 840px;\r\n}\r\n.mftcc-definitidon-search .el-input {\r\n  padding-right: 10px;\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n}\r\n.mftcc-definitidon-search .el-col-3 {\r\n  text-align: right;\r\n  padding-right: 10px;\r\n}\r\n.mftcc-definitidon-search .el-col-2:last-child {\r\n  padding-left: 10px;\r\n}\r\n.mftcc-definitidon-search .el-col-1.line {\r\n  text-align: center;\r\n  padding-right: 10px;\r\n}\r\n.mftcc-definitidon-search .el-input__inner,\r\n.mftcc-definitidon-search .el-select {\r\n  width: 100%;\r\n}\r\n.mftcc-definitidon-search .el-date-editor.el-input,\r\n.mftcc-definitidon-search .el-date-editor.el-input__inner {\r\n  width: calc(100% - 10px);\r\n  border-radius: 0;\r\n  height: 34px;\r\n}\r\n.mftcc-definitidon-search .el-date-editor.el-input__inner.el-date-editor--daterange {\r\n  border: 1px solid rgba(153, 153, 153, 1);\r\n}\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range__icon,\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range__close-icon,\r\n.mftcc-definitidon-search\r\n  .el-date-editor.el-input__inner.el-date-editor--daterange\r\n  .el-range-separator {\r\n  line-height: 26px;\r\n}\r\n.mftcc-definitidon-search .el-button.is-circle {\r\n  padding: 0;\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search .el-button--small {\r\n  font-size: 16px;\r\n}\r\n.mftcc-definitidon-search .el-input__suffix {\r\n  right: 10px;\r\n  top: -2px;\r\n}\r\n.mftcc-definitidon-search .el-input .el-input__inner {\r\n  height: 34px;\r\n  padding-right: 20px;\r\n  border: 1px solid rgba(153, 153, 153, 1);\r\n  border-radius: 0;\r\n}\r\n.mftcc-definitidon-search .el-radio-button__inner {\r\n  padding: 10px 6px;\r\n}\r\n.mftcc-definitidon-search .el-radio-button__orig-radio:checked + .el-radio-button__inner {\r\n  background-color: rgba(68, 148, 249, 1);\r\n  border-color: rgba(68, 148, 249, 1);\r\n}\r\n.mftcc-list .mftcc-search-form {\r\n  position: relative;\r\n}\r\n.mftcc-definitidon-search .el-form {\r\n  padding-bottom: 0px;\r\n  overflow: hidden;\r\n  padding-top: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.mftcc-definitidon-search .dynamic-edit-filter {\r\n  padding: 0 20px;\r\n}\r\n.mftcc-definitidon-search .mftcc-definitidon-btn {\r\n  position: relative;\r\n  text-align: center;\r\n  padding: 6px 0;\r\n  background: #edf2fa;\r\n  border: 1px solid rgba(225, 226, 227, 1);\r\n  margin-bottom: 0;\r\n  float: none;\r\n}\r\n.mftcc-definitidon-search .el-button--primary {\r\n  padding: 10px 36px;\r\n}\r\n.mftcc-definitidon-search .el-button--primary:first-child {\r\n  background: #4494f9;\r\n  border-color: #4494f9;\r\n}\r\n.mftcc-definitidon-search .el-button--primary:last-child {\r\n  background: #fff;\r\n  border-color: #d2d4d6;\r\n  color: #333;\r\n}\r\n.mftcc-definitidon-search .el-tabs--top.el-tabs--card > .el-tabs__header .el-tabs__item {\r\n  border-radius: 14px;\r\n  height: 28px;\r\n  line-height: 28px;\r\n  background: #edf2fa;\r\n  margin-left: 10px;\r\n  border: 1px solid #e1e2e3;\r\n}\r\n.mftcc-definitidon-search .el-tabs--card > .el-tabs__header .el-tabs__nav {\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search .el-tabs.el-tabs--card.el-tabs--top {\r\n  display: inline-block;\r\n  position: relative;\r\n  top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n.mftcc-definitidon-search .el-tabs--card > .el-tabs__header {\r\n  border: none;\r\n}\r\n.mftcc-definitidon-search\r\n  .el-tabs--card\r\n  > .el-tabs__header\r\n  .el-tabs__item.is-active.is-closable {\r\n  background: #e3f2fd;\r\n  color: #333;\r\n}\r\n.mftcc-definitidon-search .el-row:last-child {\r\n  border: 1px solid #e1e2e3;\r\n  background: #fafafa;\r\n}\r\n.mftcc-definitidon-search .el-row:first-child {\r\n  height: 50px;\r\n}\r\n@media screen and (min-width: 1200px) {\r\n  .mftcc-definitidon-search .el-form > .el-form-item {\r\n    float: left;\r\n  }\r\n}\r\n","<template>\r\n  <div\r\n    style=\"\r\n      width: 100%;\r\n      flex-grow: 1;\r\n      position: relative;\r\n      display: flex;\r\n      flex-direction: column;\r\n      background: #fff;\r\n    \"\r\n    :title=\"$show_title == false ? '' : tableId || initOption.tableId\"\r\n  >\r\n    <div\r\n      class=\"mftcc-form-search\"\r\n      v-if=\"option.modelType == 'queryModel' && queryModelShow\"\r\n    >\r\n      <el-form\r\n        label-position=\"right\"\r\n        label-width=\"130px\"\r\n        ref=\"searchForm\"\r\n        style=\"width: 100%\"\r\n        :model=\"searchData\"\r\n        @submit.native.prevent\r\n      >\r\n        <el-row style=\"width: 100%\">\r\n          <el-col\r\n            :span=\"20\"\r\n            style=\"min-height: 100px; display: flex; align-items: center; flex-wrap: wrap\"\r\n          >\r\n            <template v-for=\"col in option.columns\">\r\n              <el-col\r\n                :span=\"\r\n                  isEmpty(option.searchColCut) || option.searchColCut <= 1\r\n                    ? 24\r\n                    : Math.floor(24 / option.searchColCut)\r\n                \"\r\n                v-if=\"col.isQuery\"\r\n                :key=\"col.prop\"\r\n              >\r\n                <form-item\r\n                  :props=\"col\"\r\n                  v-model=\"searchData[col.prop]\"\r\n                  :designer=\"true\"\r\n                  :isQuery=\"true\"\r\n                  :isSearch=\"true\"\r\n                  class=\"widgets\"\r\n                >\r\n                </form-item>\r\n              </el-col>\r\n            </template>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <div class=\"search-button\">\r\n              <el-button\r\n                class=\"searchBtn\"\r\n                type=\"primary\"\r\n                native-type=\"submit\"\r\n                @click=\"searchTableData\"\r\n                >查询\r\n              </el-button>\r\n            </div>\r\n          </el-col>\r\n          <el-col :span=\"4\" style=\"margin-top: 10px\">\r\n            <div class=\"search-button\">\r\n              <el-button class=\"searchBtn\" type=\"primary\" @click=\"resetSearchData\"\r\n                >重置\r\n              </el-button>\r\n            </div>\r\n          </el-col>\r\n        </el-row>\r\n      </el-form>\r\n    </div>\r\n    <div\r\n      class=\"mftcc-form-buttom\"\r\n      v-if=\"\r\n        option.modelType == 'queryModel' ||\r\n        (option.modelType == 'dynamicModel' && option.customBtns.length > 0)\r\n      \"\r\n      :class=\"option.modelType\"\r\n    >\r\n      <span v-if=\"option.modelType == 'queryModel'\">{{ option.tableName }}</span>\r\n      <template v-for=\"(btn, index) in option.customBtns\">\r\n        <el-button\r\n          :key=\"index\"\r\n          class=\"optbtn\"\r\n          :type=\"btn.colorType == undefined ? 'primary' : btn.colorType\"\r\n          v-if=\"$hasPerm(btn.perm || true)\"\r\n          @click=\"Fn(btn.callback)\"\r\n        >\r\n          {{ btn.label }}\r\n        </el-button>\r\n      </template>\r\n      <div class=\"sysBtns\" v-if=\"option.modelType == 'queryModel'\">\r\n        <template v-if=\"option.isEdit && !option.dontShowEditOptBtn\">\r\n          <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"addTableRow\"\r\n            >{{ editTableInsertLabel }}\r\n          </el-button>\r\n          <el-button\r\n            type=\"primary\"\r\n            icon=\"el-icon-check\"\r\n            size=\"mini\"\r\n            @click=\"saveTableRows\"\r\n            >{{ editTableSaveLabel }}\r\n          </el-button>\r\n          <template v-if=\"option.editType == 'all'\">\r\n            <el-button\r\n              v-if=\"tableIsEdit == false\"\r\n              type=\"primary\"\r\n              icon=\"el-icon-edit\"\r\n              size=\"mini\"\r\n              @click=\"editTableRows\"\r\n              >{{ editTableUpdateLabel }}\r\n            </el-button>\r\n            <el-button\r\n              v-else\r\n              type=\"primary\"\r\n              icon=\"el-icon-close\"\r\n              size=\"mini\"\r\n              @click=\"cancelTableRows\"\r\n              >{{ editTableCancelLabel }}\r\n            </el-button>\r\n          </template>\r\n        </template>\r\n        <el-button\r\n          v-if=\"option.isExport\"\r\n          type=\"primary\"\r\n          class=\"exportBtn\"\r\n          icon=\"el-icon-download\"\r\n          @click=\"exportTable\"\r\n          >导出\r\n        </el-button>\r\n        <el-dropdown\r\n          size=\"small\"\r\n          v-if=\"option.isDColumn\"\r\n          :hide-on-click=\"false\"\r\n          class=\"el-dropdown-DColumn\"\r\n          trigger=\"click\"\r\n        >\r\n          <el-button icon=\"el-icon-setting\" type=\"primary\" class=\"mftcc-table-dropdown\"\r\n            >设置\r\n          </el-button>\r\n          <el-dropdown-menu slot=\"dropdown\" style=\"text-align: center\">\r\n            <div style=\"text-align: left\">\r\n              <template v-for=\"(col, index) in option.columns\">\r\n                <el-dropdown-item\r\n                  :key=\"index\"\r\n                  v-if=\"col.prop != ''\"\r\n                  :class=\"{ 'is-disabled': col.isDisabled, optCol: true }\"\r\n                >\r\n                  <el-checkbox\r\n                    :checked=\"col.isShow\"\r\n                    v-model=\"col.isShow\"\r\n                    :disabled=\"col.isDisabled\"\r\n                    @change=\"checkChange(col)\"\r\n                    >{{ col.label }}\r\n                  </el-checkbox>\r\n                </el-dropdown-item>\r\n              </template>\r\n            </div>\r\n          </el-dropdown-menu>\r\n        </el-dropdown>\r\n      </div>\r\n    </div>\r\n    <div class=\"mftcc-form-tools\" v-if=\"option.modelType == 'dynamicModel'\">\r\n      <div class=\"mftcc-form-tools-item\">\r\n        <div\r\n          class=\"tabs\"\r\n          v-if=\"\r\n            (option.queryTabs && option.queryTabs.length > 0) ||\r\n            customFilterData.length > 0\r\n          \"\r\n        >\r\n          <el-tabs v-model=\"option.tabActiveName\" @tab-click=\"queryTabClick\">\r\n            <el-tab-pane\r\n              v-for=\"tab in option.queryTabs\"\r\n              :key=\"tab.id\"\r\n              :label=\"tab.label\"\r\n              :name=\"tab.id\"\r\n            >\r\n            </el-tab-pane>\r\n            <template v-for=\"tab in customFilterData\">\r\n              <el-tab-pane\r\n                v-if=\"tab.selected\"\r\n                :key=\"tab.id\"\r\n                :label=\"tab.label\"\r\n                :name=\"tab.id\"\r\n              >\r\n              </el-tab-pane>\r\n            </template>\r\n          </el-tabs>\r\n        </div>\r\n        <el-button\r\n          type=\"text\"\r\n          v-if=\"option.isCustomQuery\"\r\n          @click=\"customQueryClick\"\r\n          style=\"margin-left: 24px\"\r\n          >筛选<i\r\n            class=\"el-icon-d-arrow-right el-icon--right\"\r\n            style=\"transform: rotate(90deg)\"\r\n          ></i\r\n        ></el-button>\r\n      </div>\r\n      <div class=\"mftcc-form-tools-item\">\r\n        <div class=\"dynamicQuery\" v-if=\"option.isDynamicQuery\">\r\n          <el-input\r\n            :placeholder=\"\r\n              option.dynamicQuery.placeholder\r\n                ? option.dynamicQuery.placeholder\r\n                : '请输入查询条件'\r\n            \"\r\n            v-model=\"dynamicQuery\"\r\n            @keyup.enter.native=\"searchTableData\"\r\n          >\r\n            <i\r\n              slot=\"suffix\"\r\n              @click=\"searchTableData\"\r\n              class=\"el-input__icon el-icon-search\"\r\n            ></i>\r\n          </el-input>\r\n        </div>\r\n        <div class=\"sysBtns\">\r\n          <template v-if=\"option.isEdit && !option.dontShowEditOptBtn\">\r\n            <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"addTableRow\"\r\n              >{{ editTableInsertLabel }}\r\n            </el-button>\r\n            <el-button\r\n              type=\"primary\"\r\n              icon=\"el-icon-check\"\r\n              size=\"mini\"\r\n              @click=\"saveTableRows\"\r\n              >{{ editTableSaveLabel }}\r\n            </el-button>\r\n            <template v-if=\"option.editType == 'all'\">\r\n              <el-button\r\n                v-if=\"tableIsEdit == false\"\r\n                type=\"primary\"\r\n                icon=\"el-icon-edit\"\r\n                size=\"mini\"\r\n                @click=\"editTableRows\"\r\n                >{{ editTableUpdateLabel }}\r\n              </el-button>\r\n              <el-button\r\n                v-else\r\n                type=\"primary\"\r\n                icon=\"el-icon-close\"\r\n                size=\"mini\"\r\n                @click=\"cancelTableRows\"\r\n                >{{ editTableCancelLabel }}\r\n              </el-button>\r\n            </template>\r\n          </template>\r\n          <el-button\r\n            v-if=\"option.isExport\"\r\n            type=\"primary\"\r\n            class=\"exportBtn\"\r\n            icon=\"el-icon-download\"\r\n            @click=\"exportTable\"\r\n            >导出\r\n          </el-button>\r\n          <el-dropdown\r\n            size=\"small\"\r\n            v-if=\"option.isDColumn\"\r\n            :hide-on-click=\"false\"\r\n            class=\"el-dropdown-DColumn\"\r\n            trigger=\"click\"\r\n          >\r\n            <el-button icon=\"el-icon-setting\" type=\"primary\" class=\"mftcc-table-dropdown\"\r\n              >设置\r\n            </el-button>\r\n            <el-dropdown-menu slot=\"dropdown\" style=\"text-align: center\">\r\n              <div style=\"text-align: left\">\r\n                <template v-for=\"(col, index) in option.columns\">\r\n                  <el-dropdown-item\r\n                    :key=\"index\"\r\n                    v-if=\"col.prop != ''\"\r\n                    :class=\"{ 'is-disabled': col.isDisabled, optCol: true }\"\r\n                  >\r\n                    <el-checkbox\r\n                      :checked=\"col.isShow\"\r\n                      v-model=\"col.isShow\"\r\n                      :disabled=\"col.isDisabled\"\r\n                      @change=\"checkChange(col)\"\r\n                      >{{ col.label }}\r\n                    </el-checkbox>\r\n                  </el-dropdown-item>\r\n                </template>\r\n              </div>\r\n            </el-dropdown-menu>\r\n          </el-dropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"mftcc-form-buttom\"\r\n      v-if=\"\r\n        option.modelType == 'nothingModel' && option.isEdit && !option.dontShowEditOptBtn\r\n      \"\r\n      :class=\"option.modelType\"\r\n    >\r\n      <div class=\"sysBtns\">\r\n        <el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"addTableRow\"\r\n          >{{ editTableInsertLabel }}\r\n        </el-button>\r\n        <el-button type=\"primary\" icon=\"el-icon-check\" size=\"mini\" @click=\"saveTableRows\"\r\n          >{{ editTableSaveLabel }}\r\n        </el-button>\r\n        <template v-if=\"option.editType == 'all'\">\r\n          <el-button\r\n            v-if=\"tableIsEdit == false\"\r\n            type=\"primary\"\r\n            icon=\"el-icon-edit\"\r\n            size=\"mini\"\r\n            @click=\"editTableRows\"\r\n            >{{ editTableUpdateLabel }}\r\n          </el-button>\r\n          <el-button\r\n            v-else\r\n            type=\"primary\"\r\n            icon=\"el-icon-close\"\r\n            size=\"mini\"\r\n            @click=\"cancelTableRows\"\r\n            >{{ editTableCancelLabel }}\r\n          </el-button>\r\n        </template>\r\n      </div>\r\n    </div>\r\n    <template v-if=\"option.modelType == 'expandModel'\">\r\n      <div class=\"expandModelDiv\">\r\n        <div class=\"mftcc-form-tools\">\r\n          <div class=\"mftcc-form-tools-item\">\r\n            <i\r\n              v-if=\"option.isShowGoBack !== false\"\r\n              class=\"el-icon-arrow-left goBack\"\r\n              @click=\"$router.back(-1)\"\r\n            ></i>\r\n            <span style=\"margin: 0 20px 0 15px; font-weight: bold\">{{\r\n              option.tableName\r\n            }}</span>\r\n            <div\r\n              class=\"tabs\"\r\n              v-if=\"\r\n                (option.queryTabs && option.queryTabs.length > 0) ||\r\n                customFilterData.length > 0\r\n              \"\r\n            >\r\n              <el-tabs v-model=\"option.tabActiveName\" @tab-click=\"queryTabClick\">\r\n                <el-tab-pane\r\n                  v-for=\"tab in option.queryTabs\"\r\n                  :key=\"tab.id\"\r\n                  :label=\"tab.label\"\r\n                  :name=\"tab.id\"\r\n                >\r\n                </el-tab-pane>\r\n                <template v-for=\"tab in customFilterData\">\r\n                  <el-tab-pane\r\n                    v-if=\"tab.selected\"\r\n                    :key=\"tab.id\"\r\n                    :label=\"tab.label\"\r\n                    :name=\"tab.id\"\r\n                  >\r\n                  </el-tab-pane>\r\n                </template>\r\n              </el-tabs>\r\n            </div>\r\n          </div>\r\n          <div class=\"mftcc-form-tools-item\">\r\n            <div class=\"dynamicQuery\" v-if=\"option.isDynamicQuery\">\r\n              <el-input\r\n                :placeholder=\"\r\n                  option.dynamicQuery.placeholder\r\n                    ? option.dynamicQuery.placeholder\r\n                    : '请输入查询条件'\r\n                \"\r\n                v-model=\"dynamicQuery\"\r\n                @keyup.enter.native=\"searchTableData\"\r\n              >\r\n                <i\r\n                  slot=\"suffix\"\r\n                  @click=\"searchTableData\"\r\n                  class=\"el-input__icon el-icon-search\"\r\n                ></i>\r\n              </el-input>\r\n            </div>\r\n            <div class=\"sysBtns\">\r\n              <template v-for=\"(btn, index) in option.customBtns\">\r\n                <el-button\r\n                  :key=\"index\"\r\n                  class=\"optbtn\"\r\n                  :type=\"btn.colorType == undefined ? 'primary' : btn.colorType\"\r\n                  v-if=\"$hasPerm(btn.perm || true)\"\r\n                  @click=\"Fn(btn.callback)\"\r\n                >\r\n                  {{ btn.label }}\r\n                </el-button>\r\n              </template>\r\n              <template v-if=\"option.isEdit && !option.dontShowEditOptBtn\">\r\n                <el-button\r\n                  type=\"primary\"\r\n                  icon=\"el-icon-plus\"\r\n                  size=\"mini\"\r\n                  @click=\"addTableRow\"\r\n                  >{{ editTableInsertLabel }}\r\n                </el-button>\r\n                <el-button\r\n                  type=\"primary\"\r\n                  icon=\"el-icon-check\"\r\n                  size=\"mini\"\r\n                  @click=\"saveTableRows\"\r\n                  >{{ editTableSaveLabel }}\r\n                </el-button>\r\n                <template v-if=\"option.editType == 'all'\">\r\n                  <el-button\r\n                    v-if=\"tableIsEdit == false\"\r\n                    type=\"primary\"\r\n                    icon=\"el-icon-edit\"\r\n                    size=\"mini\"\r\n                    @click=\"editTableRows\"\r\n                    >{{ editTableUpdateLabel }}\r\n                  </el-button>\r\n                  <el-button\r\n                    v-else\r\n                    type=\"primary\"\r\n                    icon=\"el-icon-close\"\r\n                    size=\"mini\"\r\n                    @click=\"cancelTableRows\"\r\n                    >{{ editTableCancelLabel }}\r\n                  </el-button>\r\n                </template>\r\n              </template>\r\n              <el-button\r\n                v-if=\"option.isExport\"\r\n                type=\"primary\"\r\n                class=\"exportBtn\"\r\n                icon=\"el-icon-download\"\r\n                @click=\"exportTable\"\r\n                >导出\r\n              </el-button>\r\n              <el-dropdown\r\n                size=\"small\"\r\n                v-if=\"option.isDColumn\"\r\n                :hide-on-click=\"false\"\r\n                class=\"el-dropdown-DColumn\"\r\n                trigger=\"click\"\r\n              >\r\n                <el-button\r\n                  icon=\"el-icon-setting\"\r\n                  type=\"primary\"\r\n                  class=\"mftcc-table-dropdown\"\r\n                  >设置\r\n                </el-button>\r\n                <el-dropdown-menu slot=\"dropdown\" style=\"text-align: center\">\r\n                  <div style=\"text-align: left\">\r\n                    <template v-for=\"(col, index) in option.columns\">\r\n                      <el-dropdown-item\r\n                        :key=\"index\"\r\n                        v-if=\"col.prop != ''\"\r\n                        :class=\"{ 'is-disabled': col.isDisabled, optCol: true }\"\r\n                      >\r\n                        <el-checkbox\r\n                          :checked=\"col.isShow\"\r\n                          v-model=\"col.isShow\"\r\n                          :disabled=\"col.isDisabled\"\r\n                          @change=\"checkChange(col)\"\r\n                          >{{ col.label }}\r\n                        </el-checkbox>\r\n                      </el-dropdown-item>\r\n                    </template>\r\n                  </div>\r\n                </el-dropdown-menu>\r\n              </el-dropdown>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <el-collapse-transition>\r\n          <div v-show=\"showExpandSearchCollapse\">\r\n            <el-form label-position=\"right\" label-width=\"100px\">\r\n              <template v-for=\"col in option.columns\">\r\n                <form-item\r\n                  v-if=\"col.isQuery\"\r\n                  :key=\"col.prop\"\r\n                  :props=\"col\"\r\n                  v-model=\"searchData[col.prop]\"\r\n                  :designer=\"true\"\r\n                  :isQuery=\"true\"\r\n                  :isExpandQuery=\"true\"\r\n                  :isSearch=\"true\"\r\n                  class=\"widgets\"\r\n                >\r\n                </form-item>\r\n              </template>\r\n              <el-form-item\r\n                v-if=\"option.hasOther\"\r\n                class=\"widgets otherWidgets\"\r\n                label=\"其他\"\r\n              >\r\n                <template v-for=\"col in option.columns\">\r\n                  <form-item\r\n                    v-if=\"col.isOtherQuery\"\r\n                    :key=\"col.prop\"\r\n                    :props=\"col\"\r\n                    v-model=\"searchData[col.prop]\"\r\n                    :designer=\"true\"\r\n                    :isQuery=\"true\"\r\n                    :isExpandQuery=\"true\"\r\n                    :isSearch=\"true\"\r\n                    class=\"widgets\"\r\n                  >\r\n                  </form-item>\r\n                </template>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div class=\"tableSreach\">\r\n              <el-button\r\n                class=\"searchBtn\"\r\n                type=\"primary\"\r\n                native-type=\"submit\"\r\n                @click=\"searchTableData\"\r\n                >查询\r\n              </el-button>\r\n              <el-button class=\"searchBtn\" @click=\"resetSearchData\">重置 </el-button>\r\n            </div>\r\n          </div>\r\n        </el-collapse-transition>\r\n      </div>\r\n      <div v-if=\"hasExpandQuery()\" class=\"expandBtn\" @click=\"expandSearchCollapse\">\r\n        <span>{{ expandBtnLable }}</span>\r\n        <i :class=\"expandBtnIcon\"></i>\r\n      </div>\r\n    </template>\r\n\r\n    <custom-filter\r\n      v-show=\"customFilterShow\"\r\n      :queryTabs=\"option.queryTabs\"\r\n      :columns=\"option.columns\"\r\n      :pramDicItem=\"pramDicItem\"\r\n      :customFilterData=\"customFilterData\"\r\n    ></custom-filter>\r\n    <div\r\n      v-loading=\"isLoading\"\r\n      ref=\"mftccTable\"\r\n      :class=\"option.query === 'query' ? 'mftcc-table-query' : 'mftcc-table'\"\r\n    >\r\n      <el-form :rules=\"rules\" :model=\"option\" ref=\"ruleForm\">\r\n        <!--<--option.treeParentKey-->\r\n        <el-table\r\n          v-if=\"isShowTable\"\r\n          :data=\"option.tableData\"\r\n          :max-height=\"maxHeight\"\r\n          :show-summary=\"option.summation\"\r\n          :summary-method=\"getSummaries\"\r\n          :height=\"height\"\r\n          highlight-current-row\r\n          :ref=\"tableId || initOption.tableId\"\r\n          style=\"width: 100%; height: auto\"\r\n          empty-text=\"暂无数据\"\r\n          lazy\r\n          :load=\"treeLoads\"\r\n          :row-key=\"option.selectKey || option.treeKey\"\r\n          :tree-props=\"{ children: 'children', hasChildren: 'hasChildren' }\"\r\n          :row-style=\"rowStyle\"\r\n          :row-class-name=\"rowClassName\"\r\n          :cell-style=\"cellStyle\"\r\n          :cell-class-name=\"cellClassName\"\r\n          :class=\"{\r\n            isExpand: option.isExpand ? true : '',\r\n            maxHeight: maxHeight,\r\n          }\"\r\n          v-mftcc-table-infinite-scroll=\"tableLoad\"\r\n          infinite-scroll-disabled=\"disabledFlag\"\r\n          infinite-scroll-immediate=\"false\"\r\n          @current-change=\"currentChange\"\r\n          @select=\"tableSelected\"\r\n          @selection-change=\"$emit('selection-change', $event)\"\r\n          @row-dblclick=\"rowDblclick\"\r\n          @expand-change=\"expandChange\"\r\n          @row-click=\"oneFunc\"\r\n        >\r\n          <el-table-column\r\n            v-if=\"option.isSelect != '' && option.isSelect ? option.isSelect : false\"\r\n            type=\"selection\"\r\n            fixed\r\n            width=\"50\"\r\n            align=\"center\"\r\n            :reserve-selection=\"true\"\r\n          >\r\n          </el-table-column>\r\n          <el-table-column\r\n            v-else-if=\"option.isRadio\"\r\n            fixed\r\n            label=\"\"\r\n            width=\"50\"\r\n            align=\"center\"\r\n            header-align=\"center\"\r\n            class-name=\"el-table-column--selection\"\r\n          >\r\n            <template slot-scope=\"scope\">\r\n              <el-radio\r\n                :label=\"scope.$index\"\r\n                v-model=\"templateRadio\"\r\n                @change.native=\"getTemplateRow(scope.$index, scope.row)\"\r\n                style=\"margin-left: 10px\"\r\n                >&nbsp;</el-radio\r\n              >\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column\r\n            v-if=\"option.isSerial != '' && option.isSerial ? option.isSerial : false\"\r\n            type=\"index\"\r\n            fixed\r\n            width=\"50\"\r\n            align=\"center\"\r\n          >\r\n          </el-table-column>\r\n          <el-table-column v-if=\"option.isExpand\" type=\"expand\">\r\n            <template slot-scope=\"scope\">\r\n              <mftcc-form\r\n                :initOption=\"expandFormData\"\r\n                :parentVm=\"this\"\r\n                :ref=\"'expandForm_' + scope.$index\"\r\n                :class=\"option.expandType == 'edit' ? 'expandEditForm' : ''\"\r\n              ></mftcc-form>\r\n              <template v-if=\"option.expandType == 'edit'\">\r\n                <div style=\"text-align: center; margin-top: 5px\">\r\n                  <el-button type=\"primary\" @click=\"saveExpandFormData(scope.$index)\"\r\n                    >保存\r\n                  </el-button>\r\n                  <el-button @click=\"closeExpand(scope.$index)\">取消</el-button>\r\n                </div>\r\n              </template>\r\n            </template>\r\n          </el-table-column>\r\n          <template v-for=\"(col, index) in option.columns\">\r\n            <el-table-column\r\n              v-if=\"(col.prop != '' ? col.isShow : false) && $hasPerm(col.perm || true)\"\r\n              :sortable=\"col.sortType == 'defaultSort' ? true : false\"\r\n              :sort-orders=\"['ascending', 'descending']\"\r\n              :key=\"index\"\r\n              :prop=\"col.prop\"\r\n              :label=\"col.label\"\r\n              :show-overflow-tooltip=\"\r\n                col['show-overflow-tooltip'] === true ? true : false\r\n              \"\r\n              :min-width=\"col.minWidth\"\r\n              :fixed=\"col.fixedColumn || false\"\r\n              :align=\"col.align || 'left'\"\r\n              header-align=\"center\"\r\n              :width=\"col.width\"\r\n            >\r\n              <template slot-scope=\"scope\">\r\n                <template v-if=\"scope.row.isEdit == true && !col.disableEdit\">\r\n                  <el-form-item\r\n                    :prop=\"'tableData.' + scope.$index + '.' + col.prop\"\r\n                    :rules=\"rules[col.prop]\"\r\n                    @click.native=\"col && clickFunc(col, $event)\"\r\n                    :event=\"scope.row[index + ''] && events[col.prop]\"\r\n                  >\r\n                    <component\r\n                      :is=\"$Component[col.fieldType]\"\r\n                      v-model=\"scope.row[col.prop]\"\r\n                      :props=\"col\"\r\n                      :event=\"events[col.prop]\"\r\n                      :designer=\"true\"\r\n                      :isTable=\"true\"\r\n                    >\r\n                    </component>\r\n                  </el-form-item>\r\n                </template>\r\n                <template v-else-if=\"col.isHref === true\">\r\n                  <template\r\n                    v-if=\"\r\n                      col.showIconImg &&\r\n                      (col.iconClass || col.imgPath) &&\r\n                      showIconExpr(col.showIconExpr, scope.row)\r\n                    \"\r\n                  >\r\n                    <div\r\n                      style=\"display: inline-flex; align-items: center; color: #409eff\"\r\n                    >\r\n                      <template v-if=\"col.iconImgLocation == 'before'\">\r\n                        <i\r\n                          v-if=\"col.showIconImg == 'icon'\"\r\n                          :class=\"getIconImg(col, scope.row)\"\r\n                        ></i>\r\n                        <img v-else :src=\"getIconImg(col, scope.row)\" />\r\n                        <span style=\"margin-left: 3px\">\r\n                          <hyperlinks :scope=\"scope\" :col=\"col\"></hyperlinks>\r\n                        </span>\r\n                      </template>\r\n                      <template v-else-if=\"col.iconImgLocation == 'after'\">\r\n                        <span style=\"margin-right: 3px\">\r\n                          <hyperlinks :scope=\"scope\" :col=\"col\"></hyperlinks>\r\n                        </span>\r\n                        <i\r\n                          v-if=\"col.showIconImg == 'icon'\"\r\n                          :class=\"getIconImg(col, scope.row)\"\r\n                        ></i>\r\n                        <img v-else :src=\"getIconImg(col, scope.row)\" />\r\n                      </template>\r\n                    </div>\r\n                  </template>\r\n                  <template v-else>\r\n                    <hyperlinks :scope=\"scope\" :col=\"col\"></hyperlinks>\r\n                  </template>\r\n                </template>\r\n                <template v-else-if=\"col.fieldType === 'switch'\">\r\n                  <mfswitch\r\n                    v-model=\"scope.row[col.prop]\"\r\n                    :props=\"col\"\r\n                    @change=\"Fn(col.switchValue.changeEvent, scope.$index, scope.row)\"\r\n                  ></mfswitch>\r\n                </template>\r\n                <template\r\n                  v-else-if=\"col.isCustomComponent === true && col.customComponentPath\"\r\n                >\r\n                  <component\r\n                    :is=\"colCustomComp[col.customComponentPath]\"\r\n                    v-bind=\"{ row: scope.row, fieldName: col.prop }\"\r\n                  >\r\n                  </component>\r\n                </template>\r\n                <template v-else>\r\n                  <template\r\n                    v-if=\"\r\n                      col.showIconImg &&\r\n                      (col.iconClass || col.imgPath) &&\r\n                      showIconExpr(col.showIconExpr, scope.row)\r\n                    \"\r\n                  >\r\n                    <div style=\"display: inline-flex; align-items: center\">\r\n                      <template v-if=\"col.iconImgLocation == 'before'\">\r\n                        <i\r\n                          v-if=\"col.showIconImg == 'icon'\"\r\n                          :class=\"getIconImg(col, scope.row)\"\r\n                        ></i>\r\n                        <img v-else :src=\"getIconImg(col, scope.row)\" />\r\n                        <span style=\"margin-left: 3px\">{{\r\n                          tableFormatter(scope.row[col.prop], col)\r\n                        }}</span>\r\n                      </template>\r\n                      <template v-else-if=\"col.iconImgLocation == 'after'\">\r\n                        <span style=\"margin-right: 3px\">{{\r\n                          tableFormatter(scope.row[col.prop], col)\r\n                        }}</span>\r\n                        <i\r\n                          v-if=\"col.showIconImg == 'icon'\"\r\n                          :class=\"getIconImg(col, scope.row)\"\r\n                        ></i>\r\n                        <img v-else :src=\"getIconImg(col, scope.row)\" />\r\n                      </template>\r\n                    </div>\r\n                  </template>\r\n                  <template v-else>\r\n                    <i\r\n                      v-if=\"\r\n                        (col.fieldType === 'date' ||\r\n                          col.fieldType === 'time' ||\r\n                          col.fieldType === 'datetime') &&\r\n                        col.showDateIcon != false\r\n                      \"\r\n                      class=\"el-icon-time\"\r\n                    ></i>\r\n                    <span>{{ tableFormatter(scope.row[col.prop], col) }}</span>\r\n                  </template>\r\n                </template>\r\n              </template>\r\n            </el-table-column>\r\n          </template>\r\n          <el-table-column\r\n            v-if=\"option.isOptBtns === true\"\r\n            :fixed=\"option.isExpand ? false : 'right'\"\r\n            label=\"操作\"\r\n            align=\"center\"\r\n            :width=\"!option.isBtnAutoWidth && option.BtnWidth\"\r\n            :min-width=\"!option.isBtnAutoWidth && option.BtnMinWidth\"\r\n          >\r\n            <template slot-scope=\"scope\">\r\n              <template\r\n                v-if=\"\r\n                  option.editType == 'always' ||\r\n                  (option.editType != 'always' && scope.row.isEdit != true)\r\n                \"\r\n              >\r\n                <template\r\n                  v-if=\"option.isMoreBtn && option.moreBtnCut && option.moreBtnCut > 0\"\r\n                >\r\n                  <template v-for=\"(btn, index) in option.optBtns\">\r\n                    <el-button\r\n                      v-if=\"$hasPerm(btn.perm || true) && index < option.moreBtnCut\"\r\n                      :key=\"index\"\r\n                      size=\"mini\"\r\n                      type=\"text\"\r\n                      :disabled=\"buttonAuth(btn, scope.row)\"\r\n                      @click.stop=\"Fn(btn.callback, scope.$index, scope.row)\"\r\n                      >{{ btn.label }}\r\n                    </el-button>\r\n                  </template>\r\n                  <el-dropdown\r\n                    trigger=\"click\"\r\n                    v-if=\"option.optBtns.length > option.moreBtnCut\"\r\n                    @command=\"handleCommand\"\r\n                    size=\"mini\"\r\n                    placement=\"bottom\"\r\n                    class=\"moreBtn\"\r\n                  >\r\n                    <i :class=\"moreBtnIcon\"></i>\r\n                    <el-dropdown-menu slot=\"dropdown\">\r\n                      <template v-for=\"(btn, index) in option.optBtns\">\r\n                        <el-dropdown-item\r\n                          v-if=\"$hasPerm(btn.perm || true) && index >= option.moreBtnCut\"\r\n                          :key=\"index\"\r\n                          :class=\"{ 'is-disabled': buttonAuth(btn, scope.row) }\"\r\n                          :command=\"{\r\n                            callback: btn.callback,\r\n                            index: scope.$index,\r\n                            row: scope.row,\r\n                          }\"\r\n                          >{{ btn.label }}</el-dropdown-item\r\n                        >\r\n                      </template>\r\n                    </el-dropdown-menu>\r\n                  </el-dropdown>\r\n                </template>\r\n                <template v-else>\r\n                  <template v-for=\"(btn, index) in option.optBtns\">\r\n                    <el-button\r\n                      :key=\"index\"\r\n                      size=\"mini\"\r\n                      type=\"text\"\r\n                      :disabled=\"buttonAuth(btn, scope.row)\"\r\n                      v-if=\"$hasPerm(btn.perm || true)\"\r\n                      @click.stop=\"Fn(btn.callback, scope.$index, scope.row)\"\r\n                      >{{ btn.label }}\r\n                    </el-button>\r\n                  </template>\r\n                </template>\r\n              </template>\r\n              <el-button\r\n                size=\"mini\"\r\n                :key=\"index\"\r\n                type=\"text\"\r\n                v-else-if=\"\r\n                  option.editType != 'always' &&\r\n                  scope.row.isEdit == true &&\r\n                  !option.dontShowCancelBtn\r\n                \"\r\n                @click.stop=\"cancelEdit(scope.row, scope.$index)\"\r\n                >取消\r\n              </el-button>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column\r\n            v-else-if=\"\r\n              option.modelType == 'nothingModel' &&\r\n              option.isEdit &&\r\n              !option.dontShowCancelBtn\r\n            \"\r\n            :fixed=\"option.isExpand ? false : 'right'\"\r\n            label=\"操作\"\r\n            align=\"center\"\r\n          >\r\n            <template slot-scope=\"scope\">\r\n              <el-button\r\n                size=\"mini\"\r\n                :key=\"index\"\r\n                type=\"text\"\r\n                @click.stop=\"cancelEdit(scope.row, scope.$index)\"\r\n                >取消\r\n              </el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-form>\r\n      <el-pagination\r\n        v-if=\"option.pageInfoClass == 'isPagination'\"\r\n        background\r\n        :hide-on-single-page=\"option.isNoDataPagination\"\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :page-sizes=\"[10, 20, 50, 100]\"\r\n        :page-size=\"pageSize\"\r\n        :current-page=\"pageNo\"\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :total=\"pageTotal\"\r\n      >\r\n      </el-pagination>\r\n      <div v-if=\"option.pageInfoClass == 'isLazy'\" class=\"lazy-pagination\">\r\n        当前显示{{ option.tableData.length }}条数据, 一共{{ pageTotal }}条数据\r\n      </div>\r\n    </div>\r\n    <!-- <p v-if=\"loading\" style=\"text-align: center\">加载中...</p>\r\n    <p v-if=\"noMore\" style=\"text-align: center\">没有更多了</p> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { postJsonNoLoading, postJson, getParameter } from \"../../../axios\";\r\nimport formUtil from \"../../../utils/formUtil\";\r\nimport customFilter from \"../customFilter/index\";\r\nimport api from \"../../../api/sysCustomFilter\";\r\nimport mfswitch from \"../../form/switch\";\r\nimport hyperlinks from \"./components/hyperlinks\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      isInit: true,\r\n      option: {},\r\n      searchData: {},\r\n      maxHeight: null,\r\n      height: null,\r\n      isShowTable: false,\r\n      pageNo: 1,\r\n      pageSize: 10,\r\n      pageTotal: 0,\r\n      currentRow: null,\r\n      isEmpty: formUtil.isEmpty,\r\n      pramDicItem: {},\r\n      exportHeader: [],\r\n      exportField: [],\r\n      dynamicQuery: \"\",\r\n      oldTabActiveName: \"\",\r\n      isLoading: false,\r\n      queryModelShow: false,\r\n      editWatch: null,\r\n      editTableData: null,\r\n      tableIsEdit: false,\r\n      editTableInsertLabel: \"新增行\",\r\n      editTableSaveLabel: \"保存\",\r\n      editTableUpdateLabel: \"编辑\",\r\n      editTableCancelLabel: \"取消\",\r\n      rules: {},\r\n      events: {},\r\n      expandFormData: {},\r\n      totals: \"\",\r\n      sort: [],\r\n      tableData: [],\r\n      customFilterData: [],\r\n      customFilterShow: false,\r\n      customQuery: \"\",\r\n      allSum: [],\r\n      flag: 1,\r\n      treeArray: [],\r\n      loading: false,\r\n      colCustomComp: {},\r\n      showExpandSearchCollapse: false,\r\n      expandBtnLable: \"展开\",\r\n      expandBtnIcon: \"el-icon-arrow-down\",\r\n      moreBtnIcon: \"el-icon-arrow-down\",\r\n      templateRadio: false, //是否被选中，默认否\r\n      templateSelection: null, //选中对象\r\n    };\r\n  },\r\n  provide() {\r\n    return {\r\n      tableFormatter: this.tableFormatter,\r\n      Fn: this.Fn,\r\n    };\r\n  },\r\n  computed: {\r\n    noMore() {\r\n      return this.total < this.pageNo;\r\n    },\r\n    disabledFlag() {\r\n      return this.loading || this.noMore;\r\n    },\r\n  },\r\n  components: {\r\n    customFilter,\r\n    mfswitch,\r\n    hyperlinks,\r\n  },\r\n  props: {\r\n    tableId: {\r\n      type: String,\r\n      required: \"\",\r\n    },\r\n    initOption: {\r\n      type: Object,\r\n    },\r\n    initSearchData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {};\r\n      },\r\n    },\r\n    parentVm: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  watch: {\r\n    tableId: {\r\n      handler(val, oldVal) {\r\n        if (val) {\r\n          this.init();\r\n        }\r\n      },\r\n    },\r\n  },\r\n  created() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    /* 用于弹层单选 radio选中 */\r\n    getTemplateRow(index, row) {\r\n      this.templateSelection = this.clone(row);\r\n    },\r\n    /* 操作列按钮超出后下拉点击事件 */\r\n    handleCommand(data) {\r\n      let index = data.index;\r\n      let row = data.row;\r\n      let callback = data.callback;\r\n      this.Fn(callback, index, row);\r\n    },\r\n    /* 判断是否有展开的筛选条件（仅在组合模板下生效） */\r\n    hasExpandQuery() {\r\n      if (this.option.hasOther) {\r\n        return true;\r\n      }\r\n      for (let item of this.option.columns) {\r\n        if (item.isQuery) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    /**\r\n     * 切换展开筛选面板按钮名称（仅在组合模板下生效）\r\n     */\r\n    expandSearchCollapse() {\r\n      if (this.showExpandSearchCollapse) {\r\n        this.showExpandSearchCollapse = false;\r\n        this.expandBtnLable = \"展开\";\r\n        this.expandBtnIcon = \"el-icon-arrow-down\";\r\n      } else {\r\n        this.showExpandSearchCollapse = true;\r\n        this.expandBtnLable = \"收起\";\r\n        this.expandBtnIcon = \"el-icon-arrow-up\";\r\n      }\r\n    },\r\n    /**\r\n     * 列表初始化\r\n     */\r\n    init() {\r\n      this.initTable(() => {\r\n        if (this.option.editType == \"always\" && this.option.isEdit) {\r\n          this.editTableRows();\r\n        }\r\n        this.$emit(\"callback\");\r\n      });\r\n    },\r\n    /**\r\n     * 根据条件判断要显示的图片/图标\r\n     */\r\n    getIconImg(col, row) {\r\n      //判断是否配置了图标切换\r\n      if (col.isIconSwitch) {\r\n        for (let item of col.iconSwitchData) {\r\n          if (this.showIconExpr(item.expr, row)) {\r\n            return item.value;\r\n          }\r\n        }\r\n      } else if (col.showIconImg == \"icon\") {\r\n        return col.iconClass;\r\n      } else {\r\n        return col.imgPath;\r\n      }\r\n    },\r\n    /**\r\n     * 根据表达式判断是否显示/隐藏图标\r\n     */\r\n    showIconExpr(condition, row) {\r\n      if (condition) {\r\n        let keys = formUtil.doExpression(condition);\r\n        //转换条件\r\n        for (let name of keys.values()) {\r\n          //字段真实值\r\n          let value = row[name];\r\n          //数字\r\n          if (!isNaN(value)) {\r\n            condition = condition.replaceAll(\"${\" + name + \"}\", value);\r\n          }\r\n          //boolean\r\n          else if (\r\n            value === true ||\r\n            value === false ||\r\n            value === \"true\" ||\r\n            value === \"false\"\r\n          ) {\r\n            condition = condition.replaceAll(\"${\" + name + \"}\", value);\r\n          }\r\n          //string\r\n          else {\r\n            condition = condition.replaceAll(\"${\" + name + \"}\", `'${value}'`);\r\n          }\r\n        }\r\n        //判断是否满足表达式\r\n        if (eval(condition)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        //没有填写表达式则不控制\r\n        return true;\r\n      }\r\n    },\r\n    /**\r\n     * 列表多选事件触发\r\n     */\r\n    tableSelected(selection, row) {\r\n      let flag = false;\r\n      for (let item of selection) {\r\n        if (JSON.stringify(item) == JSON.stringify(row)) {\r\n          flag = true;\r\n          break;\r\n        }\r\n      }\r\n      if (this.option.selectedEvent) {\r\n        this.Fn(this.option.selectedEvent, row, flag);\r\n      }\r\n    },\r\n    /*\r\n     * 列表数据赋值\r\n     */\r\n    setTableData(data) {\r\n      this.isShowTable = false;\r\n      this.$set(this.option, \"tableData\", data);\r\n      this.$nextTick(() => {\r\n        this.isShowTable = true;\r\n      });\r\n    },\r\n    /*\r\n     * 表格合计\r\n     * */\r\n    getSummaries(param) {\r\n      if (this.option.summationType == \"allSum\" && this.flag == 1) {\r\n        this.getAllTableData();\r\n        this.flag++;\r\n      }\r\n      const { columns, data } = param;\r\n      if (param.columns == undefined) {\r\n        return;\r\n      }\r\n      var sums = [];\r\n      columns.forEach((column, index) => {\r\n        let col = null;\r\n        this.option.columns.forEach((item, ele) => {\r\n          if (column.property == item.prop) {\r\n            col = item;\r\n            return false;\r\n          }\r\n        });\r\n        if (this.option.summationAddr === undefined && index === 0) {\r\n          sums[0] = this.option.summationName;\r\n          return;\r\n        }\r\n        if (this.option.summationAddr === \"front\" && index === 0) {\r\n          sums[index] = this.option.summationName;\r\n          return;\r\n        }\r\n        if (this.option.summationAddr === \"after\" && index === columns.length - 1) {\r\n          sums[index] = this.option.summationName;\r\n          return;\r\n        }\r\n\r\n        if (column.property && col && col.fieldType == \"text\" && col.dataType) {\r\n          const values = data.map((item) => Number(item[column.property]));\r\n          if (!values.every((value) => isNaN(value))) {\r\n            sums[index] = values.reduce((prev, curr) => {\r\n              const value = Number(curr);\r\n              if (!isNaN(value)) {\r\n                return prev + curr;\r\n              } else {\r\n                return prev;\r\n              }\r\n            }, 0);\r\n            if (col.dataType == \"money(yuan)\") {\r\n              sums[index] = formUtil.formatMoney(sums[index]);\r\n              sums[index] += \"元\";\r\n            } else if (col.dataType == \"money(wan)\") {\r\n              sums[index] = formUtil.formatMoney(Number(sums[index]) / 10000, 2);\r\n              sums[index] += \"万元\";\r\n            } else if (col.dataType == \"percentile\") {\r\n              sums[index] = formUtil.numMulti(sums[index], 100);\r\n              sums[index] += \"%\";\r\n            } else if (col.dataType == \"thousand\") {\r\n              sums[index] = formUtil.numMulti(sums[index], 1000);\r\n              sums[index] += \"‰\";\r\n            } else if (col.dataType == \"tenThousand\") {\r\n              sums[index] = formUtil.numMulti(sums[index], 10000);\r\n              sums[index] += \"‱\";\r\n            }\r\n          } else {\r\n            sums[index] = \"\";\r\n          }\r\n        } else {\r\n          sums[index] = \"\";\r\n          return;\r\n        }\r\n      });\r\n      return sums;\r\n    },\r\n    /*\r\n     * 监听表格排序\r\n     * */\r\n    onSortChange({ prop, order }) {\r\n      this.sort = [];\r\n      if ((prop, order)) {\r\n        this.sort.push({\r\n          filedName: prop,\r\n          order: order,\r\n        });\r\n      } else {\r\n        this.sort.push({\r\n          filedName: prop,\r\n          order: \"\",\r\n        });\r\n      }\r\n      if (this.option.pageInfoClass == \"isPagination\") {\r\n        for (let index = 0; index < this.option.columns.length; index++) {\r\n          if (this.option.columns[index].sortType == \"defaultSort\") {\r\n            this.getTableData(this.pageNo, this.pageSize);\r\n          }\r\n        }\r\n      }\r\n      if (this.option.pageInfoClass == \"isLazy\") {\r\n        this.option.tableData.sort(this.compare(prop, order));\r\n      }\r\n    },\r\n    /*\r\n     * 瀑布流情况下前端计算排序\r\n     * */\r\n    compare(propertyName, sort) {\r\n      return function (obj1, obj2) {\r\n        var value1 = obj1[propertyName];\r\n        var value2 = obj2[propertyName];\r\n        if (typeof value1 === \"string\" && typeof value2 === \"string\") {\r\n          const res = value1.localeCompare(value2, \"zh\");\r\n          if (res < 0) {\r\n            return sort === \"descending\" ? 1 : -1;\r\n          } else {\r\n            return sort === \"ascending\" ? 1 : -1;\r\n          }\r\n        } else {\r\n          if (value1 <= value2) {\r\n            return sort === \"ascending\" ? -1 : 1;\r\n          } else if (value1 > value2) {\r\n            return sort === \"ascending\" ? 1 : -1;\r\n          }\r\n        }\r\n      };\r\n    },\r\n\r\n    loadData() {\r\n      this.getTableData(this.pageNo, this.pageSize);\r\n    },\r\n    tableLoad() {\r\n      if (this.option.pageInfoClass == \"isLazy\") {\r\n        this.loading = true;\r\n        //当前页数小于总页数继续请求\r\n        setTimeout(() => {\r\n          if (this.pageNo < this.total) {\r\n            this.pageNo++;\r\n            this.loadData();\r\n          }\r\n          this.loading = false;\r\n        }, 200);\r\n      }\r\n    },\r\n    isNumber(val) {\r\n      var regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\r\n      var regNeg = /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\r\n      if (regPos.test(val) || regNeg.test(val)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n    switchValue(value, prop, state) {\r\n      if (this.isEmpty(prop)) {\r\n        return state;\r\n      }\r\n      if (typeof value == \"number\") {\r\n        return Number(prop);\r\n      }\r\n      return prop;\r\n    },\r\n    queryTabClick(tab, event) {\r\n      let tabData = this.option.queryTabs[tab.index];\r\n      this.customQuery = null;\r\n      delete this.searchData.queryTab;\r\n      if (tabData) {\r\n        let data = {};\r\n        if (tabData.filterType == \"normal\" || typeof tabData.filterType == \"undefined\") {\r\n          if (!this.isEmpty(tabData.fieldName)) {\r\n            data[tabData.fieldName] = tabData.value;\r\n          }\r\n          if (this.oldTabActiveName) {\r\n            let tabs = this.option.queryTabs.filter(\r\n              (item) => item.id == this.oldTabActiveName\r\n            );\r\n            if (tabs.length > 0) {\r\n              delete this.searchData[tabs[0].fieldName];\r\n            }\r\n          }\r\n        } else if (tabData.filterType == \"expr\" && !this.isEmpty(tabData.queryExpr)) {\r\n          let queryExpr = tabData.queryExpr;\r\n          data.queryTab = queryExpr;\r\n        }\r\n        this.oldTabActiveName = tabData.id;\r\n        this.search(data);\r\n      } else {\r\n        for (let item of this.customFilterData) {\r\n          if (item.id == tab.name) {\r\n            this.customQuery = JSON.stringify(item.filter);\r\n            this.search();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    searchTableData() {\r\n      this.search();\r\n    },\r\n    resetSearchData() {\r\n      this.searchData = {};\r\n      this.$nextTick(() => {\r\n        this.$refs.searchForm.resetFields();\r\n        this.$nextTick(() => {\r\n          this.searchTableData();\r\n        });\r\n      });\r\n    },\r\n    rowStyle(obj) {\r\n      let event = this.option[\"row-style\"];\r\n      if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n        return event;\r\n      } else if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      }\r\n    },\r\n    //列表树形懒加载\r\n    treeLoads(tree, treeNode, resolve) {\r\n      if (this.option.treeLoad) {\r\n        let tableSearchData = Object.assign({}, this.searchData);\r\n        tableSearchData.sort = JSON.stringify(this.sort);\r\n        tableSearchData.tableId =\r\n          this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n        tableSearchData.pageNo = 1;\r\n        tableSearchData.pageSize = -1;\r\n        let initTreeSearchData = Object.assign({}, this.initSearchData);\r\n        initTreeSearchData[this.option.treeParentKey] = tree[this.option.treeKey];\r\n        tableSearchData.initQuery = JSON.stringify(initTreeSearchData);\r\n\r\n        let url = this.option.url;\r\n        if (url) {\r\n          url = formUtil.converUrl(url);\r\n          postJsonNoLoading(url, tableSearchData, true, (res) => {\r\n            if (res.code == 0) {\r\n              let dataList = res.list;\r\n              let list = dataList.records || dataList;\r\n              let treeData = this.treeArray;\r\n              let sid = this.option.treeKey;\r\n              let pid = this.option.treeParentKey;\r\n              for (let node in list) {\r\n                for (let index in treeData) {\r\n                  if (list[node][sid] == treeData[index][pid]) {\r\n                    list[node].hasChildren = true;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              resolve(list);\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        let result = [];\r\n        let data = this.treeArray;\r\n        for (let node in data) {\r\n          if (data[node][this.option.treeParentKey] == tree[this.option.treeKey]) {\r\n            result.push(data[node]);\r\n          }\r\n        }\r\n        for (let node in data) {\r\n          for (let index in result) {\r\n            if (\r\n              result[index][this.option.treeKey] == data[node][this.option.treeParentKey]\r\n            ) {\r\n              result[index].hasChildren = true;\r\n            }\r\n          }\r\n        }\r\n        resolve(result);\r\n      }\r\n    },\r\n    /**\r\n     * 获取全部数据（树形懒加载使用）\r\n     * 用于判断懒加载后的节点 是否有子级\r\n     */\r\n    getTreeData() {\r\n      let tableSearchData = Object.assign({}, this.searchData);\r\n      tableSearchData.pageNo = 1;\r\n      tableSearchData.pageSize = -1;\r\n      tableSearchData.tableId =\r\n        this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n      tableSearchData.initQuery = JSON.stringify(this.initSearchData);\r\n      tableSearchData.sort = JSON.stringify(this.sort);\r\n      let url = this.option.url;\r\n      if (url) {\r\n        url = formUtil.converUrl(url);\r\n        postJsonNoLoading(url, tableSearchData, true, (res) => {\r\n          if (res.code == 0) {\r\n            let dataList = res.list;\r\n            this.treeArray = dataList.records || dataList;\r\n          }\r\n        });\r\n      }\r\n    },\r\n    rowClassName(obj) {\r\n      let event = this.option[\"row-class-name\"];\r\n      if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      } else {\r\n        return event;\r\n      }\r\n    },\r\n    cellStyle(obj) {\r\n      let event = this.option[\"cell-style\"];\r\n      if (Object.prototype.toString.call(event) === \"[object Object]\") {\r\n        return event;\r\n      } else if (event && formUtil.parentVmExist(this, event)) {\r\n        return this.parentVm._self[event](obj);\r\n      }\r\n    },\r\n    cellClassName(obj) {\r\n      let cellClassName = \"\";\r\n      let column = this.option.columns.find((item) => {\r\n        if (obj.column.property == item.prop) {\r\n          return true;\r\n        }\r\n      });\r\n      if (column && column.converColorData && column.converColorData.length > 0) {\r\n        let value = obj.row[column.prop] || \"\";\r\n        value = value.replace(\".00\", \"\");\r\n        for (let item of column.converColorData) {\r\n          if (item.originalData == value) {\r\n            cellClassName += \" \" + item.dataColor;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      let event = this.option[\"cell-class-name\"];\r\n      if (event) {\r\n        if (formUtil.parentVmExist(this, event)) {\r\n          cellClassName += \" \" + this.parentVm._self[event](obj);\r\n        } else {\r\n          cellClassName += \" \" + event;\r\n        }\r\n      }\r\n      return cellClassName;\r\n    },\r\n    buttonAuth(btn, row) {\r\n      let buttonAuth = false;\r\n      let auth = btn.noShowParams || \"\";\r\n      let authArray = auth.split(\";\");\r\n      for (let i in authArray) {\r\n        if (!this.isEmpty(authArray[i])) {\r\n          let authObj = authArray[i].split(\"-\");\r\n          if (authObj.length === 2) {\r\n            if (\r\n              this.$store.getters.buttonAuth &&\r\n              this.$store.getters.buttonAuth[authObj[0]] == authObj[1]\r\n            ) {\r\n              buttonAuth = true;\r\n            } else if (row[authObj[0]] == authObj[1]) {\r\n              buttonAuth = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return buttonAuth;\r\n    },\r\n    tableFormatter(cellValue, item) {\r\n      let _this = this;\r\n      let value = \"\";\r\n      if (_this.isEmpty(cellValue)) {\r\n        return cellValue;\r\n      } else {\r\n        value = cellValue;\r\n      }\r\n      let parmArray = _this.pramDicItem[item.prop];\r\n      if (item.fieldType === \"checkbox\" || item.fieldType === \"multipleSelection\") {\r\n        let checkBoxValue = \"\";\r\n        let checkArray;\r\n        if (Array.isArray(cellValue)) {\r\n          checkArray = cellValue;\r\n        } else {\r\n          checkArray = cellValue.split(\"|\");\r\n        }\r\n        if (checkArray && checkArray[0].indexOf(\",\") != -1) {\r\n          for (let h in checkArray) {\r\n            if (!_this.isEmpty(checkArray[h])) {\r\n              for (let i in parmArray) {\r\n                let cascaderArr = parmArray[i][\"optName\"];\r\n                if (cascaderArr) {\r\n                  if (typeof cascaderArr != \"string\") {\r\n                    cascaderArr = cascaderArr.toString();\r\n                  }\r\n                  cascaderArr = cascaderArr.split(\"|\");\r\n                }\r\n                let cascaderCodeArr = parmArray[i][\"optCode\"];\r\n                if (cascaderCodeArr) {\r\n                  if (typeof cascaderCodeArr != \"string\") {\r\n                    cascaderCodeArr = cascaderCodeArr.toString();\r\n                  }\r\n                  cascaderCodeArr = cascaderCodeArr.split(\"|\");\r\n                }\r\n                //级联选择器解析\r\n                let arrs = checkArray[h].split(\",\");\r\n                for (let key in cascaderArr) {\r\n                  for (let g in arrs) {\r\n                    if (cascaderCodeArr[key] == arrs[g]) {\r\n                      if (arrs.length - 1 === parseInt(g)) {\r\n                        checkBoxValue = checkBoxValue + \"/\" + cascaderArr[key] + \",\";\r\n                      } else {\r\n                        if (checkBoxValue === \"\") {\r\n                          checkBoxValue = cascaderArr[key];\r\n                        } else {\r\n                          if (0 === parseInt(g)) {\r\n                            checkBoxValue = checkBoxValue + cascaderArr[key];\r\n                          } else {\r\n                            checkBoxValue = checkBoxValue + \"/\" + cascaderArr[key];\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          for (let h in checkArray) {\r\n            if (!_this.isEmpty(checkArray[h])) {\r\n              for (let i in parmArray) {\r\n                if (parmArray[i][\"optCode\"] === checkArray[h]) {\r\n                  if (checkBoxValue === \"\") {\r\n                    checkBoxValue = parmArray[i][\"optName\"];\r\n                  } else {\r\n                    checkBoxValue = checkBoxValue + \"|\" + parmArray[i][\"optName\"];\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        value = checkBoxValue;\r\n      } else if (item.fieldType === \"text\") {\r\n        let isConver = false;\r\n        if (item.converData && item.converData.length > 0) {\r\n          cellValue = cellValue + \"\";\r\n          cellValue = cellValue.replace(\".00\", \"\");\r\n          for (let cd of item.converData) {\r\n            if (cd.originalData == cellValue) {\r\n              value = cd.newData;\r\n              isConver = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!isConver) {\r\n          if (item.dataType === \"money(yuan)\") {\r\n            cellValue = formUtil.delcommafy(cellValue);\r\n            value = formUtil.formatMoney(cellValue);\r\n          } else if (item.dataType === \"money(wan)\") {\r\n            cellValue = formUtil.delcommafy(cellValue);\r\n            value = formUtil.formatMoney(Number(cellValue) / 10000, 2);\r\n          } else if (item.dataType === \"percentile\") {\r\n            value = formUtil.numMulti(cellValue, 100);\r\n          } else if (item.dataType === \"thousand\") {\r\n            value = formUtil.numMulti(cellValue, 1000);\r\n          } else if (item.dataType === \"tenThousand\") {\r\n            value = formUtil.numMulti(cellValue, 10000);\r\n          }\r\n          value += item.suffix || \"\";\r\n        }\r\n      } else if (item.fieldType === \"date\" || item.fieldType === \"dateGroup\") {\r\n        try {\r\n          let valueFormat = \"yyyyMMdd\";\r\n          let format = \"yyyy-MM-dd\";\r\n          if (!this.isEmpty(item.dateFormat)) {\r\n            if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n              valueFormat = item.dateFormat.valueFormat;\r\n            }\r\n            if (!this.isEmpty(item.dateFormat.format)) {\r\n              format = item.dateFormat.format;\r\n            }\r\n          }\r\n          value = formUtil.dateFormat(formUtil.formatDate(value, valueFormat), format);\r\n        } catch (error) {\r\n          console.error(item.fieldName + \"日期数据解析错误\");\r\n        }\r\n      } else if (item.fieldType === \"datetime\" || item.fieldType === \"datetimeGroup\") {\r\n        try {\r\n          let valueFormat = \"yyyyMMdd HH:mm:ss\";\r\n          let format = \"yyyy-MM-dd HH:mm:ss\";\r\n          if (!this.isEmpty(item.dateFormat)) {\r\n            if (!this.isEmpty(item.dateFormat.valueFormat)) {\r\n              valueFormat = item.dateFormat.valueFormat;\r\n            }\r\n            if (!this.isEmpty(item.dateFormat.format)) {\r\n              format = item.dateFormat.format;\r\n            }\r\n          }\r\n          value = formUtil.dateFormat(formUtil.formatDate(value, valueFormat), format);\r\n        } catch (error) {\r\n          console.error(item.fieldName + \"日期数据解析错误\");\r\n        }\r\n      } else {\r\n        for (let i in parmArray) {\r\n          if (parmArray[i][\"optCode\"] === cellValue) {\r\n            value = parmArray[i][\"optName\"];\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        !_this.isEmpty(item.formatter) &&\r\n        formUtil.parentVmExist(this, item.formatter)\r\n      ) {\r\n        value = this.parentVm._self[item.formatter](value);\r\n      } else if (!_this.isEmpty(item.desensitization)) {\r\n        let dese = {\r\n          desensitization: item.desensitization,\r\n          front: item.desensitizationFront,\r\n          after: item.desensitizationAfter,\r\n        };\r\n        value = formUtil.desensitization(value, dese);\r\n      }\r\n      return value;\r\n    },\r\n    Fn(method, index, row) {\r\n      // this[method](index, row);\r\n      //this.$emit('callback', method, index, row);\r\n      if (formUtil.parentVmExist(this, method)) {\r\n        this.parentVm._self[method](index, row);\r\n      }\r\n    },\r\n    tableResize() {\r\n      if (this.option.isAutoHeight || this.option.height == \"auto\") {\r\n        if (this.option.query == \"query\") {\r\n          return;\r\n        }\r\n        if (!this.maxHeight) {\r\n          this.maxHeight = this.$refs.mftccTable.offsetHeight;\r\n          if (\r\n            this.option.pageInfoClass === \"isPagination\" ||\r\n            this.option.pageInfoClass === \"isLazy\"\r\n          ) {\r\n            if ((this.maxHeight + \"\").endsWith(\"px\")) {\r\n              this.maxHeight =\r\n                Number(this.maxHeight.substring(0, this.maxHeight.length - 2)) - 40;\r\n            } else {\r\n              this.maxHeight = Number(this.maxHeight) - 40;\r\n            }\r\n          }\r\n          if (this.maxHeight <= 0) {\r\n            this.maxHeight = null;\r\n          }\r\n        }\r\n      } else {\r\n        this.height = this.option.height;\r\n        this.maxHeight = this.option.maxHeight;\r\n      }\r\n    },\r\n    getAllTableData(pageNo, pageSize) {\r\n      let tableSearchData = {};\r\n      tableSearchData.dynamicQuery = this.dynamicQuery;\r\n      tableSearchData.pageNo = 1;\r\n      tableSearchData.pageSize = -1;\r\n      tableSearchData.tableId =\r\n        this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n      tableSearchData.initQuery = JSON.stringify(this.initSearchData);\r\n      tableSearchData.sort = JSON.stringify(this.sort);\r\n      let url = this.option.url;\r\n      if (url) {\r\n        url = formUtil.converUrl(url);\r\n        postJsonNoLoading(url, tableSearchData, true, (res) => {\r\n          if (res.code == 0) {\r\n            let dataList = res.list;\r\n            this.allSum = [];\r\n            this.$refs[this.tableId || this.initOption.tableId].$children.forEach(\r\n              (obj) => {\r\n                this.allSum.push(obj.columnConfig);\r\n              }\r\n            );\r\n            for (let i = 0; i < this.allSum.length; i++) {\r\n              if (this.allSum[i] === undefined) {\r\n                this.allSum.splice(i, 1);\r\n                i = i - 1;\r\n              }\r\n            }\r\n            let param = {};\r\n            param[\"data\"] = dataList.records || dataList;\r\n            param[\"columns\"] = this.allSum;\r\n            this.$nextTick(() => {\r\n              let allList = this.getSummaries(param);\r\n              let alltable = document.querySelector(\".el-table__footer-wrapper>table\");\r\n              for (let j = 0; j < allList.length; j++) {\r\n                for (let i = 0; i < alltable.rows[0].children.length; i++) {\r\n                  // alltable.rows[0].children[j].innerText = allList[j]\r\n                  alltable.rows[0].children[j].innerHTML =\r\n                    '<div class=\"cell\">' + allList[j] + \"</div>\";\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    },\r\n    getTableData(pageNo, pageSize, callback) {\r\n      if (this.option.isLoading) {\r\n        this.isLoading = true;\r\n      }\r\n      let tableSearchData = Object.assign({}, this.searchData);\r\n      if (tableSearchData.dynamicQuery) {\r\n        this.dynamicQuery = tableSearchData.dynamicQuery;\r\n      }\r\n      for (let key in tableSearchData) {\r\n        if (typeof tableSearchData[key] == \"object\") {\r\n          tableSearchData[key] = JSON.stringify(tableSearchData[key]);\r\n        }\r\n      }\r\n      //分页或者懒加载 只要开了全部合计 赋值给1，-1\r\n      if (\r\n        this.option.pageInfoClass === \"isPagination\" ||\r\n        this.option.pageInfoClass === \"isLazy\"\r\n      ) {\r\n        tableSearchData.pageNo = pageNo;\r\n        tableSearchData.pageSize = pageSize;\r\n      } else {\r\n        tableSearchData.pageNo = 1;\r\n        tableSearchData.pageSize = -1;\r\n      }\r\n      for (let index = 0; index < this.option.columns.length; index++) {\r\n        if (\r\n          this.option.columns[index].sort &&\r\n          this.option.columns[index].sortType == \"customSort\"\r\n        ) {\r\n          this.sort.push({\r\n            filedName: this.option.columns[index].prop,\r\n            order: this.option.columns[index].sort,\r\n          });\r\n        }\r\n      }\r\n      if (!this.option.pageInfoClass == \"isLazy\") {\r\n        this.option.tableData = [];\r\n      }\r\n      tableSearchData.dynamicQuery = this.dynamicQuery;\r\n      tableSearchData.sort = JSON.stringify(this.sort);\r\n      tableSearchData.tableId =\r\n        this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n      // for (let key in tableSearchData) {\r\n      //   if (this.initSearchData[key]) {\r\n      //     delete this.initSearchData[key];\r\n      //   }\r\n      // }\r\n\r\n      /* 自定义筛选 */\r\n      if (this.customQuery) {\r\n        tableSearchData.customQuery = this.customQuery;\r\n      }\r\n      //树形列表懒加载默认pid为0\r\n      if (this.option.isTree && this.option.treeLoad && this.dynamicQuery == \"\") {\r\n        let initTreeSearchData = Object.assign({}, this.initSearchData);\r\n        initTreeSearchData[this.option.treeParentKey] = 0;\r\n        tableSearchData.initQuery = JSON.stringify(initTreeSearchData);\r\n      } else {\r\n        tableSearchData.initQuery = JSON.stringify(this.initSearchData);\r\n      }\r\n\r\n      let url = this.option.url;\r\n      if (url) {\r\n        url = formUtil.converUrl(url);\r\n        postJsonNoLoading(\r\n          url,\r\n          tableSearchData,\r\n          true,\r\n          (res) => {\r\n            if (res.code == 0) {\r\n              let dataList = res.list;\r\n              if (this.option.pageInfoClass == \"isLazy\") {\r\n                let tl = dataList.records || dataList;\r\n                for (let i = 0; i < tl.length; i++) {\r\n                  this.option.tableData.push(tl[i]);\r\n                }\r\n                this.loading = false;\r\n              } else {\r\n                this.option.tableData = dataList.records || dataList;\r\n                this.option.tableData = this.resTreeData(this.option.tableData);\r\n              }\r\n              this.editTableData = this.clone(this.option.tableData);\r\n              if (!this.option.treeLoad) {\r\n                this.treeArray = dataList.records || dataList;\r\n              }\r\n              // this.tableData = dataList.records || dataList;\r\n              // this.tableData  = this.tableData.concat(this.tableData);\r\n              this.pageNo = dataList.current; // 当前页数\r\n              this.pageSize = dataList.size; // 每页数量\r\n              this.pageTotal = dataList.total; // 页面总数\r\n              let colList = res.colList;\r\n              if (colList && colList.length > 0) {\r\n                this.option.columns = colList;\r\n              }\r\n              this.total = this.pageTotal / this.pageSize;\r\n            }\r\n            this.isLoading = false;\r\n            this.$nextTick(() => {\r\n              this.tableResize();\r\n            });\r\n            if (typeof callback === \"function\") {\r\n              this.$nextTick(() => {\r\n                callback();\r\n              });\r\n            }\r\n            this.initCallBack();\r\n          },\r\n          (error) => {\r\n            this.isLoading = false;\r\n            this.$nextTick(() => {\r\n              this.tableResize();\r\n            });\r\n            if (typeof callback === \"function\") {\r\n              this.$nextTick(() => {\r\n                callback();\r\n              });\r\n            }\r\n            this.initCallBack();\r\n          }\r\n        );\r\n      }\r\n    },\r\n    initCallBack() {\r\n      if (this.isInit) {\r\n        this.$nextTick(() => {\r\n          this.$emit(\"initCallBack\", this);\r\n        });\r\n        this.isInit = false;\r\n      }\r\n    },\r\n    clickFunc(item, el) {\r\n      let events = item.events;\r\n      for (let i in events) {\r\n        if (\r\n          events[i].type === \"click\" &&\r\n          formUtil.parentVmExist(this, events[i].callback)\r\n        ) {\r\n          this.parentVm._self[events[i].callback](el);\r\n        }\r\n      }\r\n    },\r\n    resTreeData(data) {\r\n      if (!this.option.isTree || this.dynamicQuery != \"\") {\r\n        return data;\r\n      }\r\n      let result = [];\r\n      for (let node of data) {\r\n        if (node[this.option.treeParentKey] == 0) {\r\n          node.hasChildren = true;\r\n          result.push(node);\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n    getTreeChilds(id, data) {\r\n      let childs = [];\r\n      for (let node of data) {\r\n        if (node[this.option.treeParentKey] == id) {\r\n          childs.push(node);\r\n        }\r\n      }\r\n      for (let child of childs) {\r\n        let childs2 = this.getTreeChilds(child[this.option.treeKey], data); //递归获取子节点\r\n        if (childs2.length > 0) {\r\n          child.children = childs2;\r\n        }\r\n      }\r\n      return childs;\r\n    },\r\n    refresh() {\r\n      this.option.tableData = [];\r\n      this.getTableData(this.pageNo, this.pageSize, () => {\r\n        if (this.option.editType == \"always\" && this.option.isEdit) {\r\n          this.editTableRows();\r\n        }\r\n        this.setSelectValue();\r\n      });\r\n    },\r\n    search(searchData) {\r\n      this.pageNo = 1;\r\n      // this.pageSize = 10;\r\n      this.pageTotal = 0;\r\n      this.currentRow = null;\r\n      if (!this.isEmpty(searchData)) {\r\n        Object.assign(this.searchData, searchData);\r\n      }\r\n      this.option.tableData = [];\r\n      this.getTableData(this.pageNo, this.pageSize);\r\n    },\r\n    handleSizeChange(val) {\r\n      this.getTableData(1, val);\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.getTableData(val, this.pageSize);\r\n    },\r\n    checkChange(col) {\r\n      console.log(col);\r\n    },\r\n    setSelectValue() {\r\n      if (arguments.length === 0) {\r\n        this.$refs[this.tableId || this.initOption.tableId].clearSelection();\r\n      } else if (arguments.length === 1) {\r\n        this.setSelectValue(this.option.selectKey, arguments[0]);\r\n      } else if (arguments.length === 2) {\r\n        let selectKey = arguments[0];\r\n        let value = arguments[1];\r\n        if (!(arguments[1] instanceof Array)) {\r\n          value = [arguments[1]];\r\n        }\r\n        this.getSelectedRows(selectKey, value, true);\r\n      } else {\r\n        let selectKey = arguments[0];\r\n        let value = arguments[1];\r\n        if (!(arguments[1] instanceof Array)) {\r\n          value = [arguments[1]];\r\n        }\r\n        this.getSelectedRows(selectKey, value, arguments[2]);\r\n      }\r\n    },\r\n    getSelectedRows(selectKey, selectValue, state) {\r\n      let url = this.option.url;\r\n      if (url) {\r\n        url = formUtil.converUrl(url);\r\n        let tableSearchData = {};\r\n        tableSearchData.dynamicQuery = \"\";\r\n        tableSearchData.pageNo = 1;\r\n        tableSearchData.pageSize = -1;\r\n        tableSearchData.tableId =\r\n          this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n        tableSearchData.selectKey = selectKey;\r\n        tableSearchData.selectValue = selectValue.join(\",\");\r\n        tableSearchData.sort = JSON.stringify(this.sort);\r\n        if (!tableSearchData.selectValue) {\r\n          return;\r\n        }\r\n        postJsonNoLoading(url, tableSearchData, true, (res) => {\r\n          if (res.code == 0) {\r\n            let dataList = res.list;\r\n            let list = dataList.records || dataList;\r\n\r\n            let tableDatas = this.option.tableData;\r\n            list.forEach((item) => {\r\n              let flag = true;\r\n              let tableItem;\r\n              for (let i in tableDatas) {\r\n                if (JSON.stringify(item) == JSON.stringify(tableDatas[i])) {\r\n                  flag = false;\r\n                  tableItem = tableDatas[i];\r\n                  break;\r\n                }\r\n              }\r\n              if (flag) {\r\n                this.$refs[this.tableId || this.initOption.tableId].toggleRowSelection(\r\n                  item,\r\n                  state\r\n                );\r\n              } else {\r\n                this.$refs[this.tableId || this.initOption.tableId].toggleRowSelection(\r\n                  tableItem,\r\n                  state\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    },\r\n    getSelectValue() {\r\n      let parmKeyArray = this.$refs[this.tableId || this.initOption.tableId].store.states\r\n        .selection;\r\n      return parmKeyArray;\r\n    },\r\n    setCurrentValue() {\r\n      if (arguments.length === 0) {\r\n        this.$refs[this.tableId || this.initOption.tableId].setCurrentRow();\r\n      } else if (arguments.length === 1) {\r\n        this.setCurrentValue(this.option.selectKey, arguments[0]);\r\n      } else {\r\n        let selectKey = arguments[0];\r\n        let tableDatas = this.option.tableData;\r\n        for (let i in tableDatas) {\r\n          if (\r\n            tableDatas[i][selectKey] !== undefined &&\r\n            tableDatas[i][selectKey] === arguments[1]\r\n          ) {\r\n            this.$refs[this.tableId || this.initOption.tableId].setCurrentRow(\r\n              tableDatas[i]\r\n            );\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getCurrentValue() {\r\n      return this.currentRow;\r\n    },\r\n    currentChange(currentRow, oldCurrentRow) {\r\n      this.getTemplateRow(null, currentRow);\r\n      this.currentRow = currentRow;\r\n      this.$emit(\"current-change\", currentRow, oldCurrentRow);\r\n    },\r\n    async initTable(callback) {\r\n      let _this = this;\r\n      this.option = {};\r\n      this.maxHeight = null;\r\n      this.height = null;\r\n      this.pageNo = 1;\r\n      this.pageSize = 10;\r\n      this.pageTotal = 0;\r\n      this.currentRow = null;\r\n      this.queryModelShow = false;\r\n      this.searchData = {};\r\n      try {\r\n        let jsonData;\r\n        if (this.tableId) {\r\n          jsonData = await axios.get(\r\n            formUtil.getFormProfilePath() + \"/table/\" + this.tableId + \".json\"\r\n          );\r\n        }\r\n        if (jsonData) {\r\n          this.option = JSON.parse(JSON.stringify(jsonData.data));\r\n        } else {\r\n          this.option = JSON.parse(JSON.stringify(this.$busDatas[this.tableId]));\r\n        }\r\n      } catch (error) {\r\n        if (_this.initOption === undefined) {\r\n          this.$message.error(\r\n            \"未找到 [ \" + this.tableId + \" ] 配置文件或配置文件格式错误\"\r\n          );\r\n        }\r\n      }\r\n      if (_this.initOption !== undefined) {\r\n        this.option = Object.assign(this.option, this.initOption);\r\n      }\r\n\r\n      /* 设置分页条数 */\r\n      if (this.option.paginationPageSize) {\r\n        this.pageSize = this.option.paginationPageSize;\r\n      }\r\n      if (this.option.pageInfoClass === \"isLazy\" && this.pageSize < 20) {\r\n        this.pageSize = 20;\r\n      }\r\n      if (typeof this.option.tableData == \"undefined\") {\r\n        this.option.tableData = [];\r\n      }\r\n      //如果为合计全部 则在这里调用查询全部数据接口\r\n      // if (this.option.summationType == \"allSum\"){\r\n      //   await this.getAllTableData();\r\n      // }\r\n      this.$nextTick(() => {\r\n        this.tableResize();\r\n      });\r\n      if (\r\n        this.option.isPagination === true &&\r\n        this.option.pageInfoClass != \"unIsPagination\" &&\r\n        this.option.pageInfoClass != \"isLazy\"\r\n      ) {\r\n        this.option.pageInfoClass = \"isPagination\";\r\n      }\r\n      if (this.option.isTree) {\r\n        this.option.pageInfoClass = \"unIsPagination\";\r\n      }\r\n      if (this.option.modelType == \"dynamicModel\" && this.option.queryTabs.length > 0) {\r\n        let tabs = this.option.queryTabs.filter(\r\n          (item) => item.id == this.option.tabActiveName\r\n        );\r\n        if (tabs.length > 0) {\r\n          if (\r\n            (tabs[0].filterType == \"normal\" ||\r\n              typeof tabs[0].filterType == \"undefined\") &&\r\n            !this.isEmpty(tabs[0].fieldName)\r\n          ) {\r\n            this.searchData[tabs[0].fieldName] = tabs[0].value;\r\n            this.oldTabActiveName = this.option.tabActiveName;\r\n          } else if (tabs[0].filterType == \"expr\" && !this.isEmpty(tabs[0].queryExpr)) {\r\n            let queryExpr = tabs[0].queryExpr;\r\n            this.searchData.queryTab = queryExpr;\r\n            this.oldTabActiveName = this.option.tabActiveName;\r\n          }\r\n        }\r\n        if (tabs.length > 0 && !this.isEmpty(tabs[0].fieldName)) {\r\n          this.searchData[tabs[0].fieldName] = tabs[0].value;\r\n          this.oldTabActiveName = this.option.tabActiveName;\r\n        }\r\n      }\r\n      if (this.option.isTree && this.option.treeLoad) {\r\n        this.getTreeData();\r\n      }\r\n      if (this.option.modelType == \"queryModel\") {\r\n        let columns = this.option.columns.filter((item) => item.isQuery === true);\r\n        for (let col of columns) {\r\n          this.$set(this.searchData, col.prop, col.value);\r\n        }\r\n        /* 判断是否存在固定列查询 */\r\n        for (let col of this.option.columns) {\r\n          if (col.isQuery) {\r\n            this.queryModelShow = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      /* 获取自定义筛选信息 */\r\n      if (this.option.isCustomQuery && this.option.modelType == \"dynamicModel\") {\r\n        let cfData = {\r\n          router: this.$route.path,\r\n          opNo: this.$store.getters.user.opNo,\r\n        };\r\n        api.findByRouterOpNo(cfData, (res) => {\r\n          if (res.code == 0 && res.data) {\r\n            this.customFilterData = JSON.parse(res.data.customFilter);\r\n          } else {\r\n            // this.$message.error(res.msg);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (this.initSearchData) {\r\n        for (let key in this.initSearchData) {\r\n          this.$set(this.searchData, key, this.initSearchData[key]);\r\n        }\r\n      }\r\n      let formItem = this.option.columns;\r\n      let dicKeyArray = [];\r\n      for (let i in formItem) {\r\n        if (formItem[i].prop !== \"\") {\r\n          formItem[i].pkType = \"table\";\r\n          //解析字典项\r\n          let dicKey = formItem[i].dicKey;\r\n          if (!this.isEmpty(dicKey) && formItem[i].optionType == \"2\") {\r\n            let dicKeyObject = {};\r\n            dicKeyObject.dicKey = dicKey;\r\n            dicKeyObject.fieldName = formItem[i].prop;\r\n            dicKeyArray.push(dicKeyObject);\r\n          } else {\r\n            this.$set(this.pramDicItem, formItem[i].prop, formItem[i].dicItem);\r\n          }\r\n\r\n          //获取库中选择字典\r\n          if (\r\n            formItem[i].optionType == \"3\" &&\r\n            (formItem[i].fieldType === \"select\" ||\r\n              formItem[i].fieldType === \"multipleSelection\") &&\r\n            formItem[i].dataType === \"library\"\r\n          ) {\r\n            let url = formItem[i].library.url;\r\n            let searchData = {};\r\n            let searchDataStr = formItem[i].library.searchDataStr || \"\";\r\n            let searchDataArray = searchDataStr.split(\";\");\r\n            for (let j in searchDataArray) {\r\n              if (!this.isEmpty(searchDataArray[j])) {\r\n                let searchDataObj = searchDataArray[j].split(\"-\");\r\n                if (searchDataObj.length === 2) {\r\n                  let value = \"\";\r\n                  var reg = /^\\${.*}$/;\r\n                  let parm = searchDataObj[1].replace(/^(\\s|\\${)+|(\\s|})+$/g, \"\");\r\n                  // value = parm;\r\n                  if (value === undefined || value === \"\") {\r\n                    value = this.$route.query[parm];\r\n                  }\r\n                  if (value === undefined || value === \"\") {\r\n                    value = this.$route.params[parm];\r\n                  }\r\n                  searchData[searchDataObj[0]] = value;\r\n                }\r\n              }\r\n            }\r\n            this.$set(formItem[i].library, \"searchData\", searchData);\r\n            url = formUtil.converUrl(url);\r\n            getParameter(url, searchData, true, (reponse) => {\r\n              if (reponse.code === 0) {\r\n                let parmArray = [];\r\n                let list = reponse.list;\r\n                let realField = \"optCode\";\r\n                let showField = \"optName\";\r\n                if (!this.isEmpty(formItem[i].library.realField)) {\r\n                  realField = formItem[i].library.realField;\r\n                }\r\n                if (!this.isEmpty(formItem[i].library.showField)) {\r\n                  showField = formItem[i].library.showField;\r\n                }\r\n                for (let i in list) {\r\n                  let option = {\r\n                    optCode: list[i][realField],\r\n                    optName: list[i][showField],\r\n                  };\r\n                  parmArray.push(option);\r\n                }\r\n                this.$set(this.pramDicItem, formItem[i].prop, parmArray);\r\n              }\r\n            });\r\n          }\r\n          //解析校验规则\r\n          this.resRules(formItem[i]);\r\n          //解析事件设置\r\n          this.resEvents(formItem[i]);\r\n          //解析自定义组件\r\n          this.resCustomComponent(formItem[i]);\r\n        }\r\n      }\r\n\r\n      this.isShowTable = true;\r\n\r\n      //请求字典json文件\r\n      let keyArray = [];\r\n      for (let j in dicKeyArray) {\r\n        keyArray.push(dicKeyArray[j].dicKey);\r\n      }\r\n      formUtil.getParmDic(keyArray, (dicKeyData) => {\r\n        for (let k in dicKeyArray) {\r\n          _this.$set(\r\n            _this.pramDicItem,\r\n            dicKeyArray[k].fieldName,\r\n            dicKeyData[dicKeyArray[k].dicKey]\r\n          );\r\n        }\r\n      });\r\n\r\n      let url = this.option.url;\r\n      this.option.tableData = [];\r\n      if (url !== undefined && url !== null && url !== \"\") {\r\n        this.getTableData(this.pageNo, this.pageSize, callback);\r\n      } else {\r\n        if (typeof callback === \"function\") {\r\n          this.$nextTick(() => {\r\n            callback();\r\n          });\r\n        }\r\n        this.initCallBack();\r\n      }\r\n\r\n      if (this.option.isExpand) {\r\n        const formId = this.option.expandFormId;\r\n        try {\r\n          let formData = await axios.get(\r\n            formUtil.getFormProfilePath() + \"/form/\" + formId + \".json\"\r\n          );\r\n          if (formData) {\r\n            this.expandFormData = formData.data;\r\n          } else {\r\n            this.expandFormData = this.$busDatas[_this.formId];\r\n          }\r\n        } catch (error) {\r\n          this.$message.error(\"未找到 [ \" + formId + \" ] 配置文件或配置文件格式错误\");\r\n        }\r\n\r\n        if (this.option.expandType == \"readOnly\") {\r\n          this.expandFormData.query = \"query\";\r\n        } else if (this.option.expandType == \"edit\") {\r\n          this.expandFormData.formDisabled = null;\r\n        }\r\n        this.expandFormData.isExpand = true;\r\n      }\r\n    },\r\n    exportTable() {\r\n      this.$confirm(\"确定要导出当前列表全部数据？\", \"提示\", {\r\n        dangerouslyUseHTMLString: true,\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n      })\r\n        .then(() => {\r\n          this.getExpportData();\r\n        })\r\n        .catch(() => {});\r\n    },\r\n    getExpportData() {\r\n      let loading = this.$loading({\r\n        lock: true,\r\n        text: \"正在拼命导出......\",\r\n        spinner: \"el-icon-loading\",\r\n        background: \"rgba(0, 0, 0, 0.7)\",\r\n      });\r\n      let tableSearchData = Object.assign({}, this.searchData);\r\n      for (let key in tableSearchData) {\r\n        if (typeof tableSearchData[key] == \"object\") {\r\n          tableSearchData[key] = JSON.stringify(tableSearchData[key]);\r\n        }\r\n      }\r\n      tableSearchData.pageNo = 1;\r\n      tableSearchData.pageSize = -1;\r\n      tableSearchData.dynamicQuery = this.dynamicQuery;\r\n      // for (let key in tableSearchData) {\r\n      //   if (this.initSearchData[key]) {\r\n      //     delete this.initSearchData[key];\r\n      //   }\r\n      // }\r\n      tableSearchData.sort = JSON.stringify(this.sort);\r\n      tableSearchData.tableId =\r\n        this.tableId || window.productType + \"/\" + this.initOption.tableId;\r\n      /* 自定义筛选 */\r\n      if (this.customQuery) {\r\n        tableSearchData.customQuery = this.customQuery;\r\n      }\r\n      tableSearchData.initQuery = JSON.stringify(this.initSearchData);\r\n\r\n      let url = this.option.url;\r\n      url = formUtil.converUrl(url);\r\n      postJsonNoLoading(\r\n        url,\r\n        tableSearchData,\r\n        true,\r\n        (res) => {\r\n          if (res.code == 0 && res.list.records.length > 0) {\r\n            // require.ensure([], () => {\r\n            /* eslint-disable */\r\n            // 这里的径路要修改正确\r\n            this.exportHeader = [];\r\n            this.exportField = [];\r\n            const { export_json_to_excel } = require(\"../../../plugins/Export2Excel.js\");\r\n            for (let c in this.option.columns) {\r\n              if (this.option.columns[c].prop != \"\" && this.option.columns[c].isShow) {\r\n                this.exportField.push(this.option.columns[c].prop);\r\n                this.exportHeader.push(this.option.columns[c].label);\r\n              }\r\n            }\r\n            let tableData = res.list.records;\r\n            const data = this.formatJson(this.option.columns, tableData);\r\n            export_json_to_excel(this.exportHeader, data, this.option.tableId);\r\n            loading.close();\r\n            // });\r\n          } else {\r\n            this.$alert(res.msg, this.$alertTitle, {\r\n              type: res.msgType,\r\n              dangerouslyUseHTMLString: true,\r\n            });\r\n            loading.close();\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n          loading.close();\r\n        }\r\n      );\r\n    },\r\n    formatJson(columns, tableData) {\r\n      columns = columns.filter((col) => {\r\n        if (col.prop != \"\" && col.isShow) {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      let data = tableData.map((data) => {\r\n        return columns.map((col) => {\r\n          if (col.prop != \"\" && col.isShow) {\r\n            let value = data[col.prop];\r\n            if (\r\n              col.dataType === \"money(yuan)\" ||\r\n              col.dataType === \"money(wan)\" ||\r\n              col.dataType === \"percentile\" ||\r\n              col.dataType === \"thousand\" ||\r\n              col.dataType === \"tenThousand\"\r\n            ) {\r\n              return value;\r\n            } else {\r\n              return this.tableFormatter(value, col);\r\n            }\r\n          } else {\r\n            return null;\r\n          }\r\n        });\r\n      });\r\n      return data;\r\n    },\r\n    addTableRow() {\r\n      let rowData = {};\r\n      for (const columns of this.option.columns) {\r\n        if (columns.prop) {\r\n          rowData[columns.prop] = \"\";\r\n        }\r\n      }\r\n      rowData.isEdit = true;\r\n      rowData.isNewRow = true;\r\n      this.option.tableData.push(rowData);\r\n      this.$nextTick(function () {\r\n        this.$refs[this.tableId || this.initOption.tableId];\r\n        let bodyWrapper = this.$refs[this.tableId || this.initOption.tableId].$refs\r\n          .bodyWrapper;\r\n        bodyWrapper.scrollTop = bodyWrapper.scrollHeight;\r\n      });\r\n    },\r\n    /*\r\n     * 获取地址栏中的参数\r\n     * */\r\n    GetRequest() {\r\n      var query = this.$route.query;\r\n      return query;\r\n    },\r\n    saveTableRows(callback, query) {\r\n      let url = this.option.editUrl;\r\n      if (!url) {\r\n        this.$message.warning(\"未配置列表保存请求地址，无法保存\");\r\n        return;\r\n      }\r\n      let routeParams = this.GetRequest();\r\n      if (query) {\r\n        routeParams = Object.assign(routeParams, query);\r\n      }\r\n      this.saveEditTable(callback, routeParams);\r\n    },\r\n    getEditTableData() {\r\n      const multipleSelection = {};\r\n      for (const columns of this.option.columns) {\r\n        if (columns.prop && columns.fieldType == \"multipleSelection\") {\r\n          multipleSelection[columns.prop] = true;\r\n        }\r\n      }\r\n      let insertTableData = [];\r\n      let updateTableData = [];\r\n      // let tableData = this.clone(this.option.tableData);\r\n      let tableData = this.option.tableData;\r\n      for (const r in tableData) {\r\n        let row = tableData[r];\r\n        if (row.isEdit === true) {\r\n          for (const key in multipleSelection) {\r\n            let value = row[key];\r\n            if (Array.isArray(value)) {\r\n              row[key] = value.join(\"|\");\r\n            }\r\n          }\r\n          for (let fieldName in row) {\r\n            for (let columns of this.option.columns) {\r\n              let value = row[fieldName];\r\n              if (columns.prop == fieldName) {\r\n                if (columns.dataType == \"percentile\") {\r\n                  row[fieldName] = Number(value) / 100;\r\n                } else if (columns.dataType == \"thousand\") {\r\n                  row[fieldName] = Number(value) / 1000;\r\n                } else if (columns.dataType == \"tenThousand\") {\r\n                  row[fieldName] = Number(value) / 1000;\r\n                } else if (columns.dataType === \"money(yuan)\") {\r\n                  row[fieldName] = formUtil.delcommafy(value);\r\n                } else if (columns.dataType === \"money(wan)\") {\r\n                  value = formUtil.delcommafy(value);\r\n                  row[fieldName] = formUtil.numMulti(value, 10000);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          // delete row.isEdit;\r\n          if (row.isNewRow === true) {\r\n            // delete row.isNewRow;\r\n            insertTableData.push(row);\r\n          } else if (row.isEditRow === true) {\r\n            // delete row.isEditRow;\r\n            updateTableData.push(row);\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        insertTableData,\r\n        updateTableData,\r\n      };\r\n    },\r\n    saveEditTable(callback, routeParams) {\r\n      let url = this.option.editUrl;\r\n      url = formUtil.converUrl(url);\r\n      let { insertTableData, updateTableData } = this.getEditTableData();\r\n      if (insertTableData.length > 0 || updateTableData.length > 0) {\r\n        this.$refs.ruleForm.validate((valid, object) => {\r\n          if (valid) {\r\n            postJson(\r\n              url,\r\n              {\r\n                insertData: insertTableData,\r\n                updateData: updateTableData,\r\n                editType: this.option.editType,\r\n                routeParams: routeParams,\r\n              },\r\n              true,\r\n              (res) => {\r\n                if (res.code == 0) {\r\n                  // for (const r in this.option.tableData) {\r\n                  //   let row = this.option.tableData[r];\r\n                  //   if (row.isEdit === true) {\r\n                  //     delete row.isEdit;\r\n                  //     if (row.isNewRow === true) {\r\n                  //       delete row.isNewRow;\r\n                  //     } else if (row.isEditRow === true) {\r\n                  //       delete row.isEditRow;\r\n                  //     }\r\n                  //     this.$set(this.option.tableData, r, row);\r\n                  //   }\r\n                  // }\r\n                  this.getTableData(1, -1);\r\n                  this.editTableData = this.clone(this.option.tableData);\r\n                  this.$message.success(res.msg || \"保存成功\");\r\n                  let trDivs = document.querySelectorAll(\"tr[active=true]\");\r\n                  for (let i = 0; i < trDivs.length; i++) {\r\n                    trDivs[i].removeAttribute(\"active\");\r\n                  }\r\n                  this.tableIsEdit = false;\r\n                }\r\n                if (typeof callback == \"function\") {\r\n                  callback(res);\r\n                }\r\n              },\r\n              (error) => {\r\n                this.$message.error(error);\r\n              }\r\n            );\r\n          } else {\r\n            let validateMsg = [];\r\n            for (let key in object) {\r\n              let arr = object[key];\r\n              for (let data of arr) {\r\n                validateMsg.push(data.message);\r\n              }\r\n            }\r\n            this.$message({\r\n              duration: 5000,\r\n              showClose: true,\r\n              dangerouslyUseHTMLString: true,\r\n              customClass: \"errorMessage\",\r\n              message: validateMsg.join(\"<br/>\"),\r\n              type: \"error\",\r\n            });\r\n            return false;\r\n          }\r\n        });\r\n      } else {\r\n        for (const r in this.option.tableData) {\r\n          let row = this.option.tableData[r];\r\n          if (row.isEdit === true) {\r\n            delete row.isEdit;\r\n            this.$set(this.option.tableData, r, row);\r\n          }\r\n        }\r\n        this.tableIsEdit = false;\r\n      }\r\n    },\r\n    editTableRows() {\r\n      this.tableIsEdit = true;\r\n      for (const r in this.option.tableData) {\r\n        let row = this.option.tableData[r];\r\n        for (const columns of this.option.columns) {\r\n          if (columns.prop && columns.fieldType == \"multipleSelection\") {\r\n            let value = row[columns.prop] || [];\r\n            if (Array.isArray(value)) {\r\n              row[columns.prop] = value;\r\n            } else {\r\n              row[columns.prop] = value.split(\"|\");\r\n            }\r\n          }\r\n          let value = row[columns.prop];\r\n          if (value) {\r\n            let dataType = columns.dataType;\r\n            if (dataType === \"money(yuan)\") {\r\n              value = formUtil.formatMoney(value);\r\n            } else if (dataType === \"money(wan)\") {\r\n              value = formUtil.formatMoney(Number(value) / 10000, 2);\r\n            } else if (dataType === \"percentile\") {\r\n              value = formUtil.numMulti(value, 100);\r\n            } else if (dataType === \"thousand\") {\r\n              value = formUtil.numMulti(value, 1000);\r\n            } else if (dataType === \"tenThousand\") {\r\n              value = formUtil.numMulti(value, 10000);\r\n            }\r\n            row[columns.prop] = value;\r\n          }\r\n        }\r\n        // row.isEdit = true;\r\n        this.$set(row, \"isEdit\", true);\r\n        // this.$set(this.option.tableData, r, row);\r\n      }\r\n      this.editWatcher();\r\n    },\r\n    cancelTableRows() {\r\n      this.option.tableData = this.clone(this.editTableData);\r\n      this.tableIsEdit = false;\r\n    },\r\n    //单击事件\r\n    oneFunc(row, column, event) {\r\n      if (this.option.isSelect) {\r\n        //多选\r\n        this.$refs[this.tableId || this.initOption.tableId].toggleRowSelection(row);\r\n      } else if (this.option.isRadio) {\r\n        //单选\r\n        this.templateRadio = event.currentTarget.rowIndex;\r\n      }\r\n      if (this.option.oneClickEve) {\r\n        this.Fn(this.option.oneFunc, column, row);\r\n      }\r\n    },\r\n    cancelEdit(data, index) {\r\n      if (data.isNewRow) {\r\n        data.isEdit = false;\r\n        data.isNewRow = false;\r\n        this.option.tableData.splice(index, 1);\r\n      } else {\r\n        this.$set(this.option.tableData, index, this.clone(this.editTableData[index]));\r\n      }\r\n    },\r\n    rowDblclick(row, column, event) {\r\n      //双击事件\r\n      if (this.option.doubleClickEve) {\r\n        this.Fn(this.option.doubleFunc, column, row);\r\n      }\r\n      if (!this.option.isEdit || this.option.editType != \"row\") {\r\n        return;\r\n      }\r\n      //因为第一次点开时isedit为undefined\r\n      for (let i in this.option.columns) {\r\n        let dataType = this.option.columns[i].dataType;\r\n        if (!row.isEdit) {\r\n        }\r\n        let value = row[this.option.columns[i].prop];\r\n        if (value) {\r\n          if (dataType === \"money(yuan)\") {\r\n            value = formUtil.formatMoney(value);\r\n          } else if (dataType === \"money(wan)\") {\r\n            value = formUtil.formatMoney(Number(value) / 10000, 2);\r\n          } else if (dataType === \"percentile\") {\r\n            value = formUtil.numMulti(value, 100);\r\n          } else if (dataType === \"thousand\") {\r\n            value = formUtil.numMulti(value, 1000);\r\n          } else if (dataType === \"tenThousand\") {\r\n            value = formUtil.numMulti(value, 10000);\r\n          }\r\n          row[this.option.columns[i].prop] = value;\r\n        }\r\n      }\r\n      let rowDiv = event.currentTarget;\r\n      if (!rowDiv.hasAttribute(\"active\")) {\r\n        rowDiv.setAttribute(\"active\", true);\r\n      }\r\n      const multipleSelection = {};\r\n      for (const columns of this.option.columns) {\r\n        if (columns.prop && columns.fieldType == \"multipleSelection\") {\r\n          multipleSelection[columns.prop] = true;\r\n        }\r\n      }\r\n      for (const key in multipleSelection) {\r\n        let value = row[key];\r\n        if (Array.isArray(value)) {\r\n          row[key] = value;\r\n        } else {\r\n          row[key] = value.split(\"|\");\r\n        }\r\n      }\r\n      this.editWatcher();\r\n      this.$set(row, \"isEdit\", true);\r\n    },\r\n    editWatcher() {\r\n      if (this.editWatch != null) {\r\n        this.editWatch();\r\n      }\r\n      this.editWatch = this.$watch(\"option.tableData\", {\r\n        handler(val, oldVal) {\r\n          for (const i in val) {\r\n            let row = val[i];\r\n            let rowData = this.clone(row);\r\n            for (let columns of this.option.columns) {\r\n              let value = rowData[columns.prop];\r\n              if (columns.dataType == \"percentile\") {\r\n                rowData[columns.prop] = Number(value) / 100;\r\n              } else if (columns.dataType == \"thousand\") {\r\n                rowData[columns.prop] = Number(value) / 1000;\r\n              } else if (columns.dataType == \"tenThousand\") {\r\n                rowData[columns.prop] = Number(value) / 1000;\r\n              } else if (columns.dataType === \"money(yuan)\") {\r\n                rowData[columns.prop] = formUtil.delcommafy(value);\r\n              } else if (columns.dataType === \"money(wan)\") {\r\n                value = formUtil.delcommafy(value);\r\n                rowData[columns.prop] = formUtil.numMulti(value, 10000);\r\n              }\r\n            }\r\n            if (\r\n              rowData.isEdit &&\r\n              !rowData.isNewRow &&\r\n              !this.isObjEqual(rowData, this.editTableData[i])\r\n            ) {\r\n              row.isEditRow = true;\r\n            }\r\n          }\r\n        },\r\n        deep: true,\r\n      });\r\n    },\r\n    clone(data) {\r\n      return JSON.parse(JSON.stringify(data));\r\n    },\r\n    isObjEqual(o1, o2) {\r\n      let object = this.clone(o1);\r\n      delete object.isEdit;\r\n      delete object.isNewRow;\r\n      delete object.isEditRow;\r\n      var props1 = Object.getOwnPropertyNames(object);\r\n      // var props2 = Object.getOwnPropertyNames(o2);\r\n      // if (props1.length != props2.length) {\r\n      //   return false;\r\n      // }\r\n      for (var i = 0, max = props1.length; i < max; i++) {\r\n        var propName = props1[i];\r\n        // if (propName == \"isEdit\" || propName == \"isEditRow\" || propName == \"isNewRow\") {\r\n        //   continue;\r\n        // }\r\n        let v1 = o1[propName];\r\n        let v2 = o2[propName];\r\n        if (Array.isArray(v1)) {\r\n          v1 = v1.join(\"|\");\r\n        }\r\n        if (Array.isArray(v2)) {\r\n          v2 = v2.join(\"|\");\r\n        }\r\n        if (v1 != v2) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    /**\r\n     * 自定义组件处理\r\n     */\r\n    resCustomComponent(formField) {\r\n      if (formField.isCustomComponent === true && formField.customComponentPath) {\r\n        this.getCustomComponent(formField.customComponentPath);\r\n      }\r\n    },\r\n    /**\r\n     * 获取自定义组件\r\n     */\r\n    getCustomComponent(path) {\r\n      let compPath = path.replace(/\\s+/g, \"\");\r\n      if (/.vue$/.test(compPath)) {\r\n        compPath = compPath.substring(0, compPath.length - 4);\r\n      }\r\n      if (compPath.startsWith(\"/\")) {\r\n        compPath = compPath.substring(1);\r\n      }\r\n      let productName = compPath.split(\"/\")[0];\r\n      let spaPath = compPath.substring(productName.length);\r\n      if (this.$singleSpa) {\r\n        if (productName.startsWith(\"mftcc\")) {\r\n          //微前端\r\n        } else {\r\n          //单体项目\r\n        }\r\n        this.$singleSpa.toLoadPromise(this.$singleSpa.getApp(productName)).then((res) => {\r\n          res.loadApp().then((res) => {\r\n            const apps = res.default;\r\n            const app = apps[spaPath];\r\n            this.colCustomComp[path] = app;\r\n          });\r\n        });\r\n      } else {\r\n        this.colCustomComp[path] = require(\"/src/components\" + spaPath).default;\r\n      }\r\n    },\r\n    //事件函数处理\r\n    resEvents(formField) {\r\n      try {\r\n        let eventsArray = formField.events;\r\n        let event = {};\r\n\r\n        for (let evetIndex in eventsArray) {\r\n          if (\r\n            !this.isEmpty(eventsArray[evetIndex].type) &&\r\n            eventsArray[evetIndex].type !== \"click\" &&\r\n            formUtil.parentVmExist(this, eventsArray[evetIndex].callback)\r\n          ) {\r\n            event[eventsArray[evetIndex].type] = this.parentVm._self[\r\n              eventsArray[evetIndex].callback\r\n            ];\r\n          }\r\n        }\r\n        this.$set(this.events, formField.prop, event);\r\n        console.log(this.events);\r\n      } catch (error) {\r\n        console.error(\"事件解析错误：\" + error);\r\n        this.$set(this.events, formField.prop, {});\r\n      }\r\n    },\r\n    resRules(formField) {\r\n      let formRules = formField.rules;\r\n      let label = formField.label;\r\n      try {\r\n        //解析规则\r\n        let fieldNameRules = [];\r\n        if (formField.fieldType === \"text\") {\r\n          let type = formField.dataType;\r\n          if (type === \"int\") {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateInt;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          } else if (type == \"long\") {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateLong;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          } else if (\r\n            type == \"double(2)\" ||\r\n            type == \"double(4)\" ||\r\n            type == \"double(6)\" ||\r\n            type == \"money(fen)\" ||\r\n            type == \"money(jiao)\" ||\r\n            type == \"percentile\" ||\r\n            type === \"thousand\" ||\r\n            type == \"tenThousand\"\r\n          ) {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateNumber;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          } else if (type == \"float\") {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateFloat;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          } else if (type == \"boolean\") {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateBoolean;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          } else if (type === \"money(yuan)\") {\r\n            let fieldNameRule = {};\r\n            fieldNameRule[\"validator\"] = formUtil.validateMoney;\r\n            fieldNameRule[\"trigger\"] = \"blur\";\r\n            fieldNameRules.push(fieldNameRule);\r\n          }\r\n        }\r\n\r\n        for (let k in formRules) {\r\n          let fieldNameRule = {};\r\n          let trigger = \"change\";\r\n          let message = \"\";\r\n          let type = \"\";\r\n          if (formRules[k].type === \"required\") {\r\n            if (!this.isEmpty(formField[\"formItem\"])) {\r\n              formField[\"formItem\"].required = true;\r\n            }\r\n            fieldNameRule[\"required\"] = true;\r\n            // trigger = \"blur\";\r\n            message = label + \"不能为空\";\r\n          } else if (formRules[k].type === \"validator\") {\r\n            if (formUtil.parentVmExist(this, formRules[k].validator)) {\r\n              fieldNameRule[\"validator\"] = this.parentVm._self[formRules[k].validator];\r\n            }\r\n            // trigger = \"blur\";\r\n          } else if (formRules[k].type === \"number\") {\r\n            // trigger = \"blur\";\r\n            message = label + \"必须为数字\";\r\n            type = \"number\";\r\n          } else if (formRules[k].type === \"email\") {\r\n            // trigger = \"blur\";\r\n            message = label + \"格式不正确\";\r\n            type = \"email\";\r\n          } else if (formRules[k].type === \"phone\") {\r\n            // trigger = \"blur\";\r\n            message = \"请输入正确的手机号码\";\r\n            fieldNameRule[\r\n              \"pattern\"\r\n            ] = /^((13[0-9])|(14[5-9])|(15([0-3]|[5-9]))|(16[6-7])|(17[1-8])|(18[0-9])|(19[1|3])|(19[5|6])|(19[8|9]))\\d{8}$/;\r\n          } else if (formRules[k].type === \"mobile\") {\r\n            // trigger = \"blur\";\r\n            message = \"请输入正确的电话\";\r\n            fieldNameRule[\r\n              \"pattern\"\r\n            ] = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/;\r\n          } else if (formRules[k].type === \"idNo\") {\r\n            // trigger = \"blur\";\r\n            fieldNameRule[\"validator\"] = formUtil.validateIdNo;\r\n          } else {\r\n            //continue\r\n          }\r\n\r\n          if (\r\n            formField.fieldType === \"checkbox\" ||\r\n            formField.fieldType === \"multipleSelection\"\r\n          ) {\r\n            type = \"array\";\r\n          }\r\n\r\n          if (!this.isEmpty(formRules[k].min) && !this.isEmpty(formRules[k].max)) {\r\n            fieldNameRule[\"min\"] = formRules[k].min;\r\n            fieldNameRule[\"max\"] = formRules[k].max;\r\n            message =\r\n              label +\r\n              \"长度必须大于等于\" +\r\n              formRules[k].min +\r\n              \"并且小于等于\" +\r\n              formRules[k].max;\r\n          } else if (!this.isEmpty(formRules[k].min)) {\r\n            fieldNameRule[\"min\"] = formRules[k].min;\r\n            message = label + \"长度必须大于等于\" + formRules[k].min;\r\n          } else if (!this.isEmpty(formRules[k].max)) {\r\n            fieldNameRule[\"max\"] = formRules[k].max;\r\n            message = label + \"长度必须小于等于\" + formRules[k].max;\r\n          }\r\n\r\n          if (!this.isEmpty(formRules[k].message)) {\r\n            message = formRules[k].message;\r\n          }\r\n          fieldNameRule[\"message\"] = message;\r\n\r\n          if (!this.isEmpty(type)) {\r\n            fieldNameRule[\"type\"] = type;\r\n          }\r\n\r\n          if (!this.isEmpty(formRules[k].trigger)) {\r\n            trigger = formRules[k].trigger;\r\n          }\r\n          fieldNameRule[\"trigger\"] = trigger;\r\n\r\n          fieldNameRules.push(fieldNameRule);\r\n        }\r\n        this.$set(this.rules, formField.prop, fieldNameRules);\r\n      } catch (error) {\r\n        console.error(\"规则解析错误：\" + error);\r\n        this.$set(this.rules, formField.prop, []);\r\n      }\r\n    },\r\n    expandChange(row, expanded) {\r\n      if (!this.option.isExpand) {\r\n        return;\r\n      }\r\n      if (!row.isExpand) {\r\n        let rowIndex = null;\r\n        for (const i in this.option.tableData) {\r\n          let rowData = this.option.tableData[i];\r\n          if (this.isObjEqual(rowData, row)) {\r\n            rowIndex = i;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex == null) {\r\n          return;\r\n        }\r\n        this.$nextTick(() => {\r\n          let form = this.$refs[\"expandForm_\" + rowIndex];\r\n          form.setFormValue(this.clone(row));\r\n        });\r\n        row.isExpand = true;\r\n      } else {\r\n        delete row.isExpand;\r\n      }\r\n      // if (this.option.isTree){\r\n      //   row.children = [];\r\n      //   let Array = this.treeArray;\r\n      //   for (let index in Array){\r\n      //     if (row[this.option.treeKey] == Array[index][this.option.treeParentKey])\r\n      //     row.children.push(Array[index])\r\n      //   }\r\n      // }else {\r\n      //\r\n      // }\r\n    },\r\n    closeExpand(index) {\r\n      this.$refs[this.tableId || this.initOption.tableId].toggleRowExpansion(\r\n        this.option.tableData[index],\r\n        false\r\n      );\r\n    },\r\n    saveExpandFormData(index) {\r\n      const formId = \"expandForm_\" + index;\r\n      let form = this.$refs[formId];\r\n      form.validateForm((state) => {\r\n        if (state) {\r\n          let data = form.getFormValue();\r\n          let url = this.option.expandFormUrl;\r\n          if (!url) {\r\n            this.$message.warning(\"未配置表单保存请求地址\");\r\n            return;\r\n          }\r\n          url = formUtil.converUrl(url);\r\n          postJson(\r\n            url,\r\n            data,\r\n            true,\r\n            (res) => {\r\n              if (res.code == 0) {\r\n                Object.assign(this.option.tableData[index], data);\r\n                this.closeExpand(index);\r\n                this.$message.success(res.msg);\r\n              } else {\r\n                this.$message.error(res.msg);\r\n              }\r\n            },\r\n            (error) => {\r\n              this.$message.error(error);\r\n            }\r\n          );\r\n        }\r\n      });\r\n    },\r\n    customQueryClick() {\r\n      if (this.customFilterShow) {\r\n        this.customFilterShow = false;\r\n      } else {\r\n        this.customFilterShow = true;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mftcc-table .el-checkbox__label {\r\n  font-size: 12px;\r\n}\r\n\r\n.mftcc-table .el-pagination {\r\n  margin-top: 5px;\r\n}\r\n\r\n.mftcc-table-query .el-table__body,\r\n.mftcc-table .el-table__body {\r\n  width: calc(100% - 4px) !important;\r\n}\r\n\r\n.errorMessage .el-message__content {\r\n  line-height: 20px;\r\n}\r\n\r\n.errorMessage .el-message__closeBtn {\r\n  top: 24px;\r\n}\r\n\r\n.mftcc-table .el-table th > .cell {\r\n  display: block;\r\n  padding-left: 14px;\r\n  padding-right: 14px;\r\n  white-space: nowrap;\r\n  overflow: visible;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.el-table .caret-wrapper {\r\n  display: -webkit-inline-box;\r\n  display: -ms-inline-flexbox;\r\n  display: inline-flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  height: 34px;\r\n  width: 24px;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n  overflow: initial;\r\n  position: absolute;\r\n  left: 84%;\r\n  bottom: -30%;\r\n}\r\n\r\n.btnPage {\r\n  margin-top: 2%;\r\n}\r\n.mftcc-table .el-table__body tr td.success {\r\n  color: #67c23a;\r\n}\r\n.mftcc-table .el-table__body tr td.warning {\r\n  color: #e6a23c;\r\n}\r\n.mftcc-table .el-table__body tr td.danger {\r\n  color: #f56c6c;\r\n}\r\n.expandBtn {\r\n  background: url(\"../../../assets/common/trapezoidal.png\") center center no-repeat;\r\n}\r\n</style>\r\n","\r\n/* fade */\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.28s;\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-active {\r\n  opacity: 0;\r\n}\r\n\r\n/* fade-transform */\r\n.fade-transform-leave-active,\r\n.fade-transform-enter-active {\r\n  transition: all .25s;\r\n}\r\n\r\n.fade-transform-enter {\r\n  opacity: 0;\r\n  transform: translateX(-30px);\r\n}\r\n\r\n.fade-transform-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n\r\n/* breadcrumb transition */\r\n.breadcrumb-enter-active,\r\n.breadcrumb-leave-active {\r\n  transition: all .5s;\r\n}\r\n\r\n.breadcrumb-enter,\r\n.breadcrumb-leave-active {\r\n  opacity: 0;\r\n  transform: translateX(20px);\r\n}\r\n\r\n.breadcrumb-move {\r\n  transition: all .5s;\r\n}\r\n\r\n.breadcrumb-leave-active {\r\n  position: absolute;\r\n}\r\n","\r\n/* fade */\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  -webkit-transition: opacity 0.28s;\r\n  transition: opacity 0.28s;\r\n}\r\n.fade-enter,\r\n.fade-leave-active {\r\n  opacity: 0;\r\n}\r\n/* fade-transform */\r\n.fade-transform-leave-active,\r\n.fade-transform-enter-active {\r\n  -webkit-transition: all .25s;\r\n  transition: all .25s;\r\n}\r\n.fade-transform-enter {\r\n  opacity: 0;\r\n  -webkit-transform: translateX(-30px);\r\n          transform: translateX(-30px);\r\n}\r\n.fade-transform-leave-to {\r\n  opacity: 0;\r\n  -webkit-transform: translateX(30px);\r\n          transform: translateX(30px);\r\n}\r\n/* breadcrumb transition */\r\n.breadcrumb-enter-active,\r\n.breadcrumb-leave-active {\r\n  -webkit-transition: all .5s;\r\n  transition: all .5s;\r\n}\r\n.breadcrumb-enter,\r\n.breadcrumb-leave-active {\r\n  opacity: 0;\r\n  -webkit-transform: translateX(20px);\r\n          transform: translateX(20px);\r\n}\r\n.breadcrumb-move {\r\n  -webkit-transition: all .5s;\r\n  transition: all .5s;\r\n}\r\n.breadcrumb-leave-active {\r\n  position: absolute;\r\n}\r\n","@font-face {\r\n  font-family: \"mftccdevicon\"; /* Project id 2628528 */\r\n  src: url('iconfont.woff2?t=1624433692191') format('woff2'),\r\n       url('iconfont.woff?t=1624433692191') format('woff'),\r\n       url('iconfont.ttf?t=1624433692191') format('truetype');\r\n}\r\n\r\n.mftccdevicon {\r\n  font-family: \"mftccdevicon\" !important;\r\n  font-size: 16px;\r\n  font-style: normal;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.mf-dev-icon-disabled:before {\r\n  content: \"\\e706\";\r\n}\r\n\r\n","@font-face {\r\n  font-family: \"mftccdevicon\"; /* Project id 2628528 */\r\n  src: url('iconfont.woff2?t=1624433692191') format('woff2'),\r\n       url('iconfont.woff?t=1624433692191') format('woff'),\r\n       url('iconfont.ttf?t=1624433692191') format('truetype');\r\n}\r\n\r\n.mftccdevicon {\r\n  font-family: \"mftccdevicon\" !important;\r\n  font-size: 16px;\r\n  font-style: normal;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.mf-dev-icon-disabled:before {\r\n  content: \"\\e706\";\r\n}\r\n\r\n"]}